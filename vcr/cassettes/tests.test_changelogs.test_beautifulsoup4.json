{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.24.0"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/beautifulsoup4/json"}, "response": {"body": {"encoding": "UTF-8", "string": "<html><head><title>301 Moved Permanently</title></head><body><center><h1>301 Moved Permanently</h1></center></body></html>"}, "headers": {"Connection": ["close"], "Content-Length": ["122"], "Server": ["Varnish"], "Retry-After": ["0"], "Location": ["https://pypi.org/pypi/beautifulsoup4/json"], "Content-Type": ["text/html; charset=UTF-8"], "Accept-Ranges": ["bytes"], "Date": ["Sun, 01 Nov 2020 01:13:57 GMT"], "X-Served-By": ["cache-gig17030-GIG"], "X-Cache": ["HIT"], "X-Cache-Hits": ["0"], "X-Timer": ["S1604193238.930322,VS0,VE0"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains; preload"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 301, "message": "Redirect to Primary Domain"}, "url": "https://pypi.python.org/pypi/beautifulsoup4/json"}, "recorded_at": "2020-11-01T01:13:57"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.24.0"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.org/pypi/beautifulsoup4/json"}, "response": {"body": {"encoding": null, "base64_string": ""}, "headers": {"Connection": ["keep-alive"], "Content-Length": ["12658"], "Access-Control-Allow-Headers": ["Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since"], "Access-Control-Allow-Methods": ["GET"], "Access-Control-Allow-Origin": ["*"], "Access-Control-Expose-Headers": ["X-PyPI-Last-Serial"], "Access-Control-Max-Age": ["86400"], "Cache-Control": ["max-age=900, public"], "Content-Encoding": ["gzip"], "Content-Security-Policy": ["base-uri 'self'; block-all-mixed-content; connect-src 'self' https://api.github.com/repos/ *.fastly-insights.com sentry.io https://api.pwnedpasswords.com https://2p66nmmycsj3.statuspage.io; default-src 'none'; font-src 'self' fonts.gstatic.com; form-action 'self'; frame-ancestors 'none'; frame-src 'none'; img-src 'self' https://warehouse-camo.ingress.cmh1.psfhosted.org/ www.google-analytics.com *.fastly-insights.com; script-src 'self' www.googletagmanager.com www.google-analytics.com *.fastly-insights.com https://cdn.ravenjs.com; style-src 'self' fonts.googleapis.com; worker-src *.fastly-insights.com"], "Content-Type": ["application/json"], "ETag": ["\"/4OWU9iFG2ltz1Brt8wcCQ\""], "Referrer-Policy": ["origin-when-cross-origin"], "Server": ["nginx/1.13.9"], "X-PyPI-Last-Serial": ["8332883"], "Accept-Ranges": ["bytes"], "Date": ["Sun, 01 Nov 2020 01:13:58 GMT"], "X-Served-By": ["cache-bwi5129-BWI, cache-gig17035-GIG"], "X-Cache": ["HIT, HIT"], "X-Cache-Hits": ["4084, 1"], "X-Timer": ["S1604193238.111505,VS0,VE1"], "Vary": ["Accept-Encoding"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains; preload"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.org/pypi/beautifulsoup4/json"}, "recorded_at": "2020-11-01T01:13:58"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.24.0"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://bazaar.launchpad.net/~leonardr/beautifulsoup/bs4/download/head:/CHANGELOG"}, "response": {"body": {"encoding": null, "string": "= 4.9.3 (20201003)\n\n* Implemented a significant performance optimization to the process of\n  searching the parse tree. Patch by Morotti. [bug=1898212]\n\n= 4.9.2 (20200926)\n\n* Fixed a bug that caused too many tags to be popped from the tag\n  stack during tree building, when encountering a closing tag that had\n  no matching opening tag. [bug=1880420]\n\n* Fixed a bug that inconsistently moved elements over when passing\n  a Tag, rather than a list, into Tag.extend(). [bug=1885710]\n\n* Specify the soupsieve dependency in a way that complies with\n  PEP 508. Patch by Mike Nerone. [bug=1893696]\n\n* Change the signatures for BeautifulSoup.insert_before and insert_after\n  (which are not implemented) to match PageElement.insert_before and\n  insert_after, quieting warnings in some IDEs. [bug=1897120]\n\n= 4.9.1 (20200517)\n\n* Added a keyword argument 'on_duplicate_attribute' to the\n  BeautifulSoupHTMLParser constructor (used by the html.parser tree\n  builder) which lets you customize the handling of markup that\n  contains the same attribute more than once, as in:\n  <a href=\"url1\" href=\"url2\"> [bug=1878209]\n\n* Added a distinct subclass, GuessedAtParserWarning, for the warning\n  issued when BeautifulSoup is instantiated without a parser being\n  specified. [bug=1873787]\n\n* Added a distinct subclass, MarkupResemblesLocatorWarning, for the\n  warning issued when BeautifulSoup is instantiated with 'markup' that\n  actually seems to be a URL or the path to a file on\n  disk. [bug=1873787]\n\n* The new NavigableString subclasses (Stylesheet, Script, and\n  TemplateString) can now be imported directly from the bs4 package.\n\n* If you encode a document with a Python-specific encoding like\n  'unicode_escape', that encoding is no longer mentioned in the final\n  XML or HTML document. Instead, encoding information is omitted or\n  left blank. [bug=1874955]\n\n* Fixed test failures when run against soupselect 2.0. Patch by Tom\u00e1\u0161\n  Chv\u00e1tal. [bug=1872279]\n\n= 4.9.0 (20200405)\n\n* Added PageElement.decomposed, a new property which lets you\n  check whether you've already called decompose() on a Tag or\n  NavigableString.\n\n* Embedded CSS and Javascript is now stored in distinct Stylesheet and\n  Script tags, which are ignored by methods like get_text() since most\n  people don't consider this sort of content to be 'text'. This\n  feature is not supported by the html5lib treebuilder. [bug=1868861]\n\n* Added a Russian translation by 'authoress' to the repository.\n\n* Fixed an unhandled exception when formatting a Tag that had been\n  decomposed.[bug=1857767]\n\n* Fixed a bug that happened when passing a Unicode filename containing\n  non-ASCII characters as markup into Beautiful Soup, on a system that\n  allows Unicode filenames. [bug=1866717]\n\n* Added a performance optimization to PageElement.extract(). Patch by\n  Arthur Darcet.\n\n= 4.8.2 (20191224)\n\n* Added Python docstrings to all public methods of the most commonly\n  used classes.\n\n* Added a Chinese translation by Deron Wang and a Brazilian Portuguese\n  translation by Cezar Peixeiro to the repository.\n\n* Fixed two deprecation warnings. Patches by Colin\n  Watson and Nicholas Neumann. [bug=1847592] [bug=1855301]\n\n* The html.parser tree builder now correctly handles DOCTYPEs that are\n  not uppercase. [bug=1848401]\n\n* PageElement.select() now returns a ResultSet rather than a regular\n  list, making it consistent with methods like find_all().\n\n= 4.8.1 (20191006)\n\n* When the html.parser or html5lib parsers are in use, Beautiful Soup\n  will, by default, record the position in the original document where\n  each tag was encountered. This includes line number (Tag.sourceline)\n  and position within a line (Tag.sourcepos).  Based on code by Chris\n  Mayo. [bug=1742921]\n\n* When instantiating a BeautifulSoup object, it's now possible to\n   provide a dictionary ('element_classes') of the classes you'd like to be\n   instantiated instead of Tag, NavigableString, etc.\n\n* Fixed the definition of the default XML namespace when using\n   lxml 4.4. Patch by Isaac Muse. [bug=1840141]\n\n* Fixed a crash when pretty-printing tags that were not created\n   during initial parsing. [bug=1838903]\n\n* Copying a Tag preserves information that was originally obtained from\n   the TreeBuilder used to build the original Tag. [bug=1838903]\n\n* Raise an explanatory exception when the underlying parser\n   completely rejects the incoming markup. [bug=1838877]\n\n* Avoid a crash when trying to detect the declared encoding of a\n   Unicode document. [bug=1838877]\n\n* Avoid a crash when unpickling certain parse trees generated\n   using html5lib on Python 3. [bug=1843545]\n\n= 4.8.0 (20190720, \"One Small Soup\")\n\nThis release focuses on making it easier to customize Beautiful Soup's\ninput mechanism (the TreeBuilder) and output mechanism (the Formatter).\n\n* You can customize the TreeBuilder object by passing keyword\n  arguments into the BeautifulSoup constructor. Those keyword\n  arguments will be passed along into the TreeBuilder constructor.\n\n  The main reason to do this right now is to change how which\n  attributes are treated as multi-valued attributes (the way 'class'\n  is treated by default). You can do this with the\n  'multi_valued_attributes' argument. [bug=1832978]\n\n* The role of Formatter objects has been greatly expanded. The Formatter\n  class now controls the following:\n\n  - The function to call to perform entity substitution. (This was\n    previously Formatter's only job.)\n  - Which tags should be treated as containing CDATA and have their\n    contents exempt from entity substitution.\n  - The order in which a tag's attributes are output. [bug=1812422]\n  - Whether or not to put a '/' inside a void element, e.g. '<br/>' vs '<br>'\n\n  All preexisting code should work as before.\n\n* Added a new method to the API, Tag.smooth(), which consolidates\n  multiple adjacent NavigableString elements. [bug=1697296]\n\n* &apos; (which is valid in XML, XHTML, and HTML 5, but not HTML 4) is always\n  recognized as a named entity and converted to a single quote. [bug=1818721]\n\n= 4.7.1 (20190106)\n\n* Fixed a significant performance problem introduced in 4.7.0. [bug=1810617]\n\n* Fixed an incorrectly raised exception when inserting a tag before or\n  after an identical tag. [bug=1810692]\n\n* Beautiful Soup will no longer try to keep track of namespaces that\n  are not defined with a prefix; this can confuse soupselect. [bug=1810680]\n\n* Tried even harder to avoid the deprecation warning originally fixed in\n   4.6.1. [bug=1778909]\n\n= 4.7.0 (20181231)\n\n* Beautiful Soup's CSS Selector implementation has been replaced by a\n  dependency on Isaac Muse's SoupSieve project (the soupsieve package\n  on PyPI). The good news is that SoupSieve has a much more robust and\n  complete implementation of CSS selectors, resolving a large number\n  of longstanding issues. The bad news is that from this point onward,\n  SoupSieve must be installed if you want to use the select() method.\n\n  You don't have to change anything lf you installed Beautiful Soup\n  through pip (SoupSieve will be automatically installed when you\n  upgrade Beautiful Soup) or if you don't use CSS selectors from\n  within Beautiful Soup.\n\n  SoupSieve documentation: https://facelessuser.github.io/soupsieve/\n\n* Added the PageElement.extend() method, which works like list.append().\n   [bug=1514970]\n\n* PageElement.insert_before() and insert_after() now take a variable\n   number of arguments. [bug=1514970]\n\n* Fix a number of problems with the tree builder that caused\n  trees that were superficially okay, but which fell apart when bits\n  were extracted. Patch by Isaac Muse. [bug=1782928,1809910]\n\n* Fixed a problem with the tree builder in which elements that\n  contained no content (such as empty comments and all-whitespace\n  elements) were not being treated as part of the tree. Patch by Isaac\n  Muse. [bug=1798699]\n\n* Fixed a problem with multi-valued attributes where the value\n  contained whitespace. Thanks to Jens Svalgaard for the\n  fix. [bug=1787453]\n\n* Clarified ambiguous license statements in the source code. Beautiful\n  Soup is released under the MIT license, and has been since 4.4.0.\n\n* This file has been renamed from NEWS.txt to CHANGELOG.\n\n= 4.6.3 (20180812)\n\n* Exactly the same as 4.6.2. Re-released to make the README file\n  render properly on PyPI.\n\n= 4.6.2 (20180812)\n\n* Fix an exception when a custom formatter was asked to format a void\n  element. [bug=1784408]\n\n= 4.6.1 (20180728)\n\n* Stop data loss when encountering an empty numeric entity, and\n  possibly in other cases.  Thanks to tos.kamiya for the fix. [bug=1698503]\n\n* Preserve XML namespaces introduced inside an XML document, not just\n   the ones introduced at the top level. [bug=1718787]\n\n* Added a new formatter, \"html5\", which represents void elements\n   as \"<element>\" rather than \"<element/>\".  [bug=1716272]\n\n* Fixed a problem where the html.parser tree builder interpreted\n  a string like \"&foo \" as the character entity \"&foo;\"  [bug=1728706]\n\n* Correctly handle invalid HTML numeric character entities like &#147;\n  which reference code points that are not Unicode code points. Note\n  that this is only fixed when Beautiful Soup is used with the\n  html.parser parser -- html5lib already worked and I couldn't fix it\n  with lxml.  [bug=1782933]\n\n* Improved the warning given when no parser is specified. [bug=1780571]\n\n* When markup contains duplicate elements, a select() call that\n  includes multiple match clauses will match all relevant\n  elements. [bug=1770596]\n\n* Fixed code that was causing deprecation warnings in recent Python 3\n  versions. Includes a patch from Ville Skytt\u00e4. [bug=1778909] [bug=1689496]\n\n* Fixed a Windows crash in diagnose() when checking whether a long\n  markup string is a filename. [bug=1737121]\n\n* Stopped HTMLParser from raising an exception in very rare cases of\n  bad markup. [bug=1708831]\n\n* Fixed a bug where find_all() was not working when asked to find a\n  tag with a namespaced name in an XML document that was parsed as\n  HTML. [bug=1723783]\n\n* You can get finer control over formatting by subclassing\n  bs4.element.Formatter and passing a Formatter instance into (e.g.)\n  encode(). [bug=1716272]\n\n* You can pass a dictionary of `attrs` into\n  BeautifulSoup.new_tag. This makes it possible to create a tag with\n  an attribute like 'name' that would otherwise be masked by another\n  argument of new_tag. [bug=1779276]\n\n* Clarified the deprecation warning when accessing tag.fooTag, to cover\n  the possibility that you might really have been looking for a tag\n  called 'fooTag'.\n\n= 4.6.0 (20170507) =\n\n* Added the `Tag.get_attribute_list` method, which acts like `Tag.get` for\n  getting the value of an attribute, but which always returns a list,\n  whether or not the attribute is a multi-value attribute. [bug=1678589]\n\n* It's now possible to use a tag's namespace prefix when searching,\n  e.g. soup.find('namespace:tag') [bug=1655332]\n\n* Improved the handling of empty-element tags like <br> when using the\n  html.parser parser. [bug=1676935]\n\n* HTML parsers treat all HTML4 and HTML5 empty element tags (aka void\n  element tags) correctly. [bug=1656909]\n\n* Namespace prefix is preserved when an XML tag is copied. Thanks\n  to Vikas for a patch and test. [bug=1685172]\n\n= 4.5.3 (20170102) =\n\n* Fixed foster parenting when html5lib is the tree builder. Thanks to\n  Geoffrey Sneddon for a patch and test.\n  \n* Fixed yet another problem that caused the html5lib tree builder to\n  create a disconnected parse tree. [bug=1629825]\n\n= 4.5.2 (20170102) =\n\n* Apart from the version number, this release is identical to\n  4.5.3. Due to user error, it could not be completely uploaded to\n  PyPI. Use 4.5.3 instead.\n\n= 4.5.1 (20160802) =\n\n* Fixed a crash when passing Unicode markup that contained a\n  processing instruction into the lxml HTML parser on Python\n  3. [bug=1608048]\n\n= 4.5.0 (20160719) =\n\n* Beautiful Soup is no longer compatible with Python 2.6. This\n  actually happened a few releases ago, but it's now official.\n\n* Beautiful Soup will now work with versions of html5lib greater than\n  0.99999999. [bug=1603299]\n\n* If a search against each individual value of a multi-valued\n  attribute fails, the search will be run one final time against the\n  complete attribute value considered as a single string. That is, if\n  a tag has class=\"foo bar\" and neither \"foo\" nor \"bar\" matches, but\n  \"foo bar\" does, the tag is now considered a match.\n\n  This happened in previous versions, but only when the value being\n  searched for was a string. Now it also works when that value is\n  a regular expression, a list of strings, etc. [bug=1476868]\n\n* Fixed a bug that deranged the tree when a whitespace element was\n  reparented into a tag that contained an identical whitespace\n  element. [bug=1505351]\n\n* Added support for CSS selector values that contain quoted spaces,\n  such as tag[style=\"display: foo\"]. [bug=1540588]\n\n* Corrected handling of XML processing instructions. [bug=1504393]\n\n* Corrected an encoding error that happened when a BeautifulSoup\n  object was copied. [bug=1554439]\n\n* The contents of <textarea> tags will no longer be modified when the\n  tree is prettified. [bug=1555829]\n\n* When a BeautifulSoup object is pickled but its tree builder cannot\n  be pickled, its .builder attribute is set to None instead of being\n  destroyed. This avoids a performance problem once the object is\n  unpickled. [bug=1523629]\n\n* Specify the file and line number when warning about a\n  BeautifulSoup object being instantiated without a parser being\n  specified. [bug=1574647]\n\n* The `limit` argument to `select()` now works correctly, though it's\n  not implemented very efficiently. [bug=1520530]\n\n* Fixed a Python 3 ByteWarning when a URL was passed in as though it\n  were markup. Thanks to James Salter for a patch and\n  test. [bug=1533762]\n\n* We don't run the check for a filename passed in as markup if the\n  'filename' contains a less-than character; the less-than character\n  indicates it's most likely a very small document. [bug=1577864]\n\n= 4.4.1 (20150928) =\n\n* Fixed a bug that deranged the tree when part of it was\n  removed. Thanks to Eric Weiser for the patch and John Wiseman for a\n  test. [bug=1481520]\n\n* Fixed a parse bug with the html5lib tree-builder. Thanks to Roel\n  Kramer for the patch. [bug=1483781]\n\n* Improved the implementation of CSS selector grouping. Thanks to\n  Orangain for the patch. [bug=1484543]\n\n* Fixed the test_detect_utf8 test so that it works when chardet is\n  installed. [bug=1471359]\n\n* Corrected the output of Declaration objects. [bug=1477847]\n\n\n= 4.4.0 (20150703) =\n\nEspecially important changes:\n\n* Added a warning when you instantiate a BeautifulSoup object without\n  explicitly naming a parser. [bug=1398866]\n\n* __repr__ now returns an ASCII bytestring in Python 2, and a Unicode\n  string in Python 3, instead of a UTF8-encoded bytestring in both\n  versions. In Python 3, __str__ now returns a Unicode string instead\n  of a bytestring. [bug=1420131]\n\n* The `text` argument to the find_* methods is now called `string`,\n  which is more accurate. `text` still works, but `string` is the\n  argument described in the documentation. `text` may eventually\n  change its meaning, but not for a very long time. [bug=1366856]\n\n* Changed the way soup objects work under copy.copy(). Copying a\n  NavigableString or a Tag will give you a new NavigableString that's\n  equal to the old one but not connected to the parse tree. Patch by\n  Martijn Peters. [bug=1307490]\n\n* Started using a standard MIT license. [bug=1294662]\n\n* Added a Chinese translation of the documentation by Delong .w.\n\nNew features:\n\n* Introduced the select_one() method, which uses a CSS selector but\n  only returns the first match, instead of a list of\n  matches. [bug=1349367]\n\n* You can now create a Tag object without specifying a\n  TreeBuilder. Patch by Martijn Pieters. [bug=1307471]\n\n* You can now create a NavigableString or a subclass just by invoking\n  the constructor. [bug=1294315]\n\n* Added an `exclude_encodings` argument to UnicodeDammit and to the\n  Beautiful Soup constructor, which lets you prohibit the detection of\n  an encoding that you know is wrong. [bug=1469408]\n\n* The select() method now supports selector grouping. Patch by\n  Francisco Canas [bug=1191917]\n\nBug fixes:\n\n* Fixed yet another problem that caused the html5lib tree builder to\n  create a disconnected parse tree. [bug=1237763]\n\n* Force object_was_parsed() to keep the tree intact even when an element\n  from later in the document is moved into place. [bug=1430633]\n\n* Fixed yet another bug that caused a disconnected tree when html5lib\n  copied an element from one part of the tree to another. [bug=1270611]\n\n* Fixed a bug where Element.extract() could create an infinite loop in\n  the remaining tree.\n\n* The select() method can now find tags whose names contain\n  dashes. Patch by Francisco Canas. [bug=1276211]\n\n* The select() method can now find tags with attributes whose names\n  contain dashes. Patch by Marek Kapolka. [bug=1304007]\n\n* Improved the lxml tree builder's handling of processing\n  instructions. [bug=1294645]\n\n* Restored the helpful syntax error that happens when you try to\n  import the Python 2 edition of Beautiful Soup under Python\n  3. [bug=1213387]\n\n* In Python 3.4 and above, set the new convert_charrefs argument to\n  the html.parser constructor to avoid a warning and future\n  failures. Patch by Stefano Revera. [bug=1375721]\n\n* The warning when you pass in a filename or URL as markup will now be\n  displayed correctly even if the filename or URL is a Unicode\n  string. [bug=1268888]\n\n* If the initial <html> tag contains a CDATA list attribute such as\n  'class', the html5lib tree builder will now turn its value into a\n  list, as it would with any other tag. [bug=1296481]\n\n* Fixed an import error in Python 3.5 caused by the removal of the\n  HTMLParseError class. [bug=1420063]\n\n* Improved docstring for encode_contents() and\n  decode_contents(). [bug=1441543]\n\n* Fixed a crash in Unicode, Dammit's encoding detector when the name\n  of the encoding itself contained invalid bytes. [bug=1360913]\n\n* Improved the exception raised when you call .unwrap() or\n  .replace_with() on an element that's not attached to a tree.\n\n* Raise a NotImplementedError whenever an unsupported CSS pseudoclass\n  is used in select(). Previously some cases did not result in a\n  NotImplementedError.\n\n* It's now possible to pickle a BeautifulSoup object no matter which\n  tree builder was used to create it. However, the only tree builder\n  that survives the pickling process is the HTMLParserTreeBuilder\n  ('html.parser'). If you unpickle a BeautifulSoup object created with\n  some other tree builder, soup.builder will be None. [bug=1231545]\n\n= 4.3.2 (20131002) =\n\n* Fixed a bug in which short Unicode input was improperly encoded to\n  ASCII when checking whether or not it was the name of a file on\n  disk. [bug=1227016]\n\n* Fixed a crash when a short input contains data not valid in\n  filenames. [bug=1232604]\n\n* Fixed a bug that caused Unicode data put into UnicodeDammit to\n  return None instead of the original data. [bug=1214983]\n\n* Combined two tests to stop a spurious test failure when tests are\n  run by nosetests. [bug=1212445]\n\n= 4.3.1 (20130815) =\n\n* Fixed yet another problem with the html5lib tree builder, caused by\n  html5lib's tendency to rearrange the tree during\n  parsing. [bug=1189267]\n\n* Fixed a bug that caused the optimized version of find_all() to\n  return nothing. [bug=1212655]\n\n= 4.3.0 (20130812) =\n\n* Instead of converting incoming data to Unicode and feeding it to the\n  lxml tree builder in chunks, Beautiful Soup now makes successive\n  guesses at the encoding of the incoming data, and tells lxml to\n  parse the data as that encoding. Giving lxml more control over the\n  parsing process improves performance and avoids a number of bugs and\n  issues with the lxml parser which had previously required elaborate\n  workarounds:\n\n  - An issue in which lxml refuses to parse Unicode strings on some\n    systems. [bug=1180527]\n\n  - A returning bug that truncated documents longer than a (very\n    small) size. [bug=963880]\n\n  - A returning bug in which extra spaces were added to a document if\n    the document defined a charset other than UTF-8. [bug=972466]\n\n  This required a major overhaul of the tree builder architecture. If\n  you wrote your own tree builder and didn't tell me, you'll need to\n  modify your prepare_markup() method.\n\n* The UnicodeDammit code that makes guesses at encodings has been\n  split into its own class, EncodingDetector. A lot of apparently\n  redundant code has been removed from Unicode, Dammit, and some\n  undocumented features have also been removed.\n\n* Beautiful Soup will issue a warning if instead of markup you pass it\n  a URL or the name of a file on disk (a common beginner's mistake).\n\n* A number of optimizations improve the performance of the lxml tree\n  builder by about 33%, the html.parser tree builder by about 20%, and\n  the html5lib tree builder by about 15%.\n\n* All find_all calls should now return a ResultSet object. Patch by\n  Aaron DeVore. [bug=1194034]\n\n= 4.2.1 (20130531) =\n\n* The default XML formatter will now replace ampersands even if they\n  appear to be part of entities. That is, \"&lt;\" will become\n  \"&amp;lt;\". The old code was left over from Beautiful Soup 3, which\n  didn't always turn entities into Unicode characters.\n\n  If you really want the old behavior (maybe because you add new\n  strings to the tree, those strings include entities, and you want\n  the formatter to leave them alone on output), it can be found in\n  EntitySubstitution.substitute_xml_containing_entities(). [bug=1182183]\n\n* Gave new_string() the ability to create subclasses of\n  NavigableString. [bug=1181986]\n\n* Fixed another bug by which the html5lib tree builder could create a\n  disconnected tree. [bug=1182089]\n\n* The .previous_element of a BeautifulSoup object is now always None,\n  not the last element to be parsed. [bug=1182089]\n\n* Fixed test failures when lxml is not installed. [bug=1181589]\n\n* html5lib now supports Python 3. Fixed some Python 2-specific\n  code in the html5lib test suite. [bug=1181624]\n\n* The html.parser treebuilder can now handle numeric attributes in\n  text when the hexidecimal name of the attribute starts with a\n  capital X. Patch by Tim Shirley. [bug=1186242]\n\n= 4.2.0 (20130514) =\n\n* The Tag.select() method now supports a much wider variety of CSS\n  selectors.\n\n - Added support for the adjacent sibling combinator (+) and the\n   general sibling combinator (~). Tests by \"liquider\". [bug=1082144]\n\n - The combinators (>, +, and ~) can now combine with any supported\n   selector, not just one that selects based on tag name.\n\n - Added limited support for the \"nth-of-type\" pseudo-class. Code\n   by Sven Slootweg. [bug=1109952]\n\n* The BeautifulSoup class is now aliased to \"_s\" and \"_soup\", making\n  it quicker to type the import statement in an interactive session:\n\n  from bs4 import _s\n   or\n  from bs4 import _soup\n\n  The alias may change in the future, so don't use this in code you're\n  going to run more than once.\n\n* Added the 'diagnose' submodule, which includes several useful\n  functions for reporting problems and doing tech support.\n\n  - diagnose(data) tries the given markup on every installed parser,\n    reporting exceptions and displaying successes. If a parser is not\n    installed, diagnose() mentions this fact.\n\n  - lxml_trace(data, html=True) runs the given markup through lxml's\n    XML parser or HTML parser, and prints out the parser events as\n    they happen. This helps you quickly determine whether a given\n    problem occurs in lxml code or Beautiful Soup code.\n\n  - htmlparser_trace(data) is the same thing, but for Python's\n    built-in HTMLParser class.\n\n* In an HTML document, the contents of a <script> or <style> tag will\n  no longer undergo entity substitution by default. XML documents work\n  the same way they did before. [bug=1085953]\n\n* Methods like get_text() and properties like .strings now only give\n  you strings that are visible in the document--no comments or\n  processing commands. [bug=1050164]\n\n* The prettify() method now leaves the contents of <pre> tags\n  alone. [bug=1095654]\n\n* Fix a bug in the html5lib treebuilder which sometimes created\n  disconnected trees. [bug=1039527]\n\n* Fix a bug in the lxml treebuilder which crashed when a tag included\n  an attribute from the predefined \"xml:\" namespace. [bug=1065617]\n\n* Fix a bug by which keyword arguments to find_parent() were not\n  being passed on. [bug=1126734]\n\n* Stop a crash when unwisely messing with a tag that's been\n  decomposed. [bug=1097699]\n\n* Now that lxml's segfault on invalid doctype has been fixed, fixed a\n  corresponding problem on the Beautiful Soup end that was previously\n  invisible. [bug=984936]\n\n* Fixed an exception when an overspecified CSS selector didn't match\n  anything. Code by Stefaan Lippens. [bug=1168167]\n\n= 4.1.3 (20120820) =\n\n* Skipped a test under Python 2.6 and Python 3.1 to avoid a spurious\n  test failure caused by the lousy HTMLParser in those\n  versions. [bug=1038503]\n\n* Raise a more specific error (FeatureNotFound) when a requested\n  parser or parser feature is not installed. Raise NotImplementedError\n  instead of ValueError when the user calls insert_before() or\n  insert_after() on the BeautifulSoup object itself. Patch by Aaron\n  Devore. [bug=1038301]\n\n= 4.1.2 (20120817) =\n\n* As per PEP-8, allow searching by CSS class using the 'class_'\n  keyword argument. [bug=1037624]\n\n* Display namespace prefixes for namespaced attribute names, instead of\n  the fully-qualified names given by the lxml parser. [bug=1037597]\n\n* Fixed a crash on encoding when an attribute name contained\n  non-ASCII characters.\n\n* When sniffing encodings, if the cchardet library is installed,\n  Beautiful Soup uses it instead of chardet. cchardet is much\n  faster. [bug=1020748]\n\n* Use logging.warning() instead of warning.warn() to notify the user\n  that characters were replaced with REPLACEMENT\n  CHARACTER. [bug=1013862]\n\n= 4.1.1 (20120703) =\n\n* Fixed an html5lib tree builder crash which happened when html5lib\n  moved a tag with a multivalued attribute from one part of the tree\n  to another. [bug=1019603]\n\n* Correctly display closing tags with an XML namespace declared. Patch\n  by Andreas Kostyrka. [bug=1019635]\n\n* Fixed a typo that made parsing significantly slower than it should\n  have been, and also waited too long to close tags with XML\n  namespaces. [bug=1020268]\n\n* get_text() now returns an empty Unicode string if there is no text,\n  rather than an empty bytestring. [bug=1020387]\n\n= 4.1.0 (20120529) =\n\n* Added experimental support for fixing Windows-1252 characters\n  embedded in UTF-8 documents. (UnicodeDammit.detwingle())\n\n* Fixed the handling of &quot; with the built-in parser. [bug=993871]\n\n* Comments, processing instructions, document type declarations, and\n  markup declarations are now treated as preformatted strings, the way\n  CData blocks are. [bug=1001025]\n\n* Fixed a bug with the lxml treebuilder that prevented the user from\n  adding attributes to a tag that didn't originally have\n  attributes. [bug=1002378] Thanks to Oliver Beattie for the patch.\n\n* Fixed some edge-case bugs having to do with inserting an element\n  into a tag it's already inside, and replacing one of a tag's\n  children with another. [bug=997529]\n\n* Added the ability to search for attribute values specified in UTF-8. [bug=1003974]\n\n  This caused a major refactoring of the search code. All the tests\n  pass, but it's possible that some searches will behave differently.\n\n= 4.0.5 (20120427) =\n\n* Added a new method, wrap(), which wraps an element in a tag.\n\n* Renamed replace_with_children() to unwrap(), which is easier to\n  understand and also the jQuery name of the function.\n\n* Made encoding substitution in <meta> tags completely transparent (no\n  more %SOUP-ENCODING%).\n\n* Fixed a bug in decoding data that contained a byte-order mark, such\n  as data encoded in UTF-16LE. [bug=988980]\n\n* Fixed a bug that made the HTMLParser treebuilder generate XML\n  definitions ending with two question marks instead of\n  one. [bug=984258]\n\n* Upon document generation, CData objects are no longer run through\n  the formatter. [bug=988905]\n\n* The test suite now passes when lxml is not installed, whether or not\n  html5lib is installed. [bug=987004]\n\n* Print a warning on HTMLParseErrors to let people know they should\n  install a better parser library.\n\n= 4.0.4 (20120416) =\n\n* Fixed a bug that sometimes created disconnected trees.\n\n* Fixed a bug with the string setter that moved a string around the\n  tree instead of copying it. [bug=983050]\n\n* Attribute values are now run through the provided output formatter.\n  Previously they were always run through the 'minimal' formatter. In\n  the future I may make it possible to specify different formatters\n  for attribute values and strings, but for now, consistent behavior\n  is better than inconsistent behavior. [bug=980237]\n\n* Added the missing renderContents method from Beautiful Soup 3. Also\n  added an encode_contents() method to go along with decode_contents().\n\n* Give a more useful error when the user tries to run the Python 2\n  version of BS under Python 3.\n\n* UnicodeDammit can now convert Microsoft smart quotes to ASCII with\n  UnicodeDammit(markup, smart_quotes_to=\"ascii\").\n\n= 4.0.3 (20120403) =\n\n* Fixed a typo that caused some versions of Python 3 to convert the\n  Beautiful Soup codebase incorrectly.\n\n* Got rid of the 4.0.2 workaround for HTML documents--it was\n  unnecessary and the workaround was triggering a (possibly different,\n  but related) bug in lxml. [bug=972466]\n\n= 4.0.2 (20120326) =\n\n* Worked around a possible bug in lxml that prevents non-tiny XML\n  documents from being parsed. [bug=963880, bug=963936]\n\n* Fixed a bug where specifying `text` while also searching for a tag\n  only worked if `text` wanted an exact string match. [bug=955942]\n\n= 4.0.1 (20120314) =\n\n* This is the first official release of Beautiful Soup 4. There is no\n  4.0.0 release, to eliminate any possibility that packaging software\n  might treat \"4.0.0\" as being an earlier version than \"4.0.0b10\".\n\n* Brought BS up to date with the latest release of soupselect, adding\n  CSS selector support for direct descendant matches and multiple CSS\n  class matches.\n\n= 4.0.0b10 (20120302) =\n\n* Added support for simple CSS selectors, taken from the soupselect project.\n\n* Fixed a crash when using html5lib. [bug=943246]\n\n* In HTML5-style <meta charset=\"foo\"> tags, the value of the \"charset\"\n  attribute is now replaced with the appropriate encoding on\n  output. [bug=942714]\n\n* Fixed a bug that caused calling a tag to sometimes call find_all()\n  with the wrong arguments. [bug=944426]\n\n* For backwards compatibility, brought back the BeautifulStoneSoup\n  class as a deprecated wrapper around BeautifulSoup.\n\n= 4.0.0b9 (20120228) =\n\n* Fixed the string representation of DOCTYPEs that have both a public\n  ID and a system ID.\n\n* Fixed the generated XML declaration.\n\n* Renamed Tag.nsprefix to Tag.prefix, for consistency with\n  NamespacedAttribute.\n\n* Fixed a test failure that occurred on Python 3.x when chardet was\n  installed.\n\n* Made prettify() return Unicode by default, so it will look nice on\n  Python 3 when passed into print().\n\n= 4.0.0b8 (20120224) =\n\n* All tree builders now preserve namespace information in the\n  documents they parse. If you use the html5lib parser or lxml's XML\n  parser, you can access the namespace URL for a tag as tag.namespace.\n\n  However, there is no special support for namespace-oriented\n  searching or tree manipulation. When you search the tree, you need\n  to use namespace prefixes exactly as they're used in the original\n  document.\n\n* The string representation of a DOCTYPE always ends in a newline.\n\n* Issue a warning if the user tries to use a SoupStrainer in\n  conjunction with the html5lib tree builder, which doesn't support\n  them.\n\n= 4.0.0b7 (20120223) =\n\n* Upon decoding to string, any characters that can't be represented in\n  your chosen encoding will be converted into numeric XML entity\n  references.\n\n* Issue a warning if characters were replaced with REPLACEMENT\n  CHARACTER during Unicode conversion.\n\n* Restored compatibility with Python 2.6.\n\n* The install process no longer installs docs or auxiliary text files.\n\n* It's now possible to deepcopy a BeautifulSoup object created with\n  Python's built-in HTML parser.\n\n* About 100 unit tests that \"test\" the behavior of various parsers on\n  invalid markup have been removed. Legitimate changes to those\n  parsers caused these tests to fail, indicating that perhaps\n  Beautiful Soup should not test the behavior of foreign\n  libraries.\n\n  The problematic unit tests have been reformulated as informational\n  comparisons generated by the script\n  scripts/demonstrate_parser_differences.py.\n\n  This makes Beautiful Soup compatible with html5lib version 0.95 and\n  future versions of HTMLParser.\n\n= 4.0.0b6 (20120216) =\n\n* Multi-valued attributes like \"class\" always have a list of values,\n  even if there's only one value in the list.\n\n* Added a number of multi-valued attributes defined in HTML5.\n\n* Stopped generating a space before the slash that closes an\n  empty-element tag. This may come back if I add a special XHTML mode\n  (http://www.w3.org/TR/xhtml1/#C_2), but right now it's pretty\n  useless.\n\n* Passing text along with tag-specific arguments to a find* method:\n\n   find(\"a\", text=\"Click here\")\n\n  will find tags that contain the given text as their\n  .string. Previously, the tag-specific arguments were ignored and\n  only strings were searched.\n\n* Fixed a bug that caused the html5lib tree builder to build a\n  partially disconnected tree. Generally cleaned up the html5lib tree\n  builder.\n\n* If you restrict a multi-valued attribute like \"class\" to a string\n  that contains spaces, Beautiful Soup will only consider it a match\n  if the values correspond to that specific string.\n\n= 4.0.0b5 (20120209) =\n\n* Rationalized Beautiful Soup's treatment of CSS class. A tag\n  belonging to multiple CSS classes is treated as having a list of\n  values for the 'class' attribute. Searching for a CSS class will\n  match *any* of the CSS classes.\n\n  This actually affects all attributes that the HTML standard defines\n  as taking multiple values (class, rel, rev, archive, accept-charset,\n  and headers), but 'class' is by far the most common. [bug=41034]\n\n* If you pass anything other than a dictionary as the second argument\n  to one of the find* methods, it'll assume you want to use that\n  object to search against a tag's CSS classes. Previously this only\n  worked if you passed in a string.\n\n* Fixed a bug that caused a crash when you passed a dictionary as an\n  attribute value (possibly because you mistyped \"attrs\"). [bug=842419]\n\n* Unicode, Dammit now detects the encoding in HTML 5-style <meta> tags\n  like <meta charset=\"utf-8\" />. [bug=837268]\n\n* If Unicode, Dammit can't figure out a consistent encoding for a\n  page, it will try each of its guesses again, with errors=\"replace\"\n  instead of errors=\"strict\". This may mean that some data gets\n  replaced with REPLACEMENT CHARACTER, but at least most of it will\n  get turned into Unicode. [bug=754903]\n\n* Patched over a bug in html5lib (?) that was crashing Beautiful Soup\n  on certain kinds of markup. [bug=838800]\n\n* Fixed a bug that wrecked the tree if you replaced an element with an\n  empty string. [bug=728697]\n\n* Improved Unicode, Dammit's behavior when you give it Unicode to\n  begin with.\n\n= 4.0.0b4 (20120208) =\n\n* Added BeautifulSoup.new_string() to go along with BeautifulSoup.new_tag()\n\n* BeautifulSoup.new_tag() will follow the rules of whatever\n  tree-builder was used to create the original BeautifulSoup object. A\n  new <p> tag will look like \"<p />\" if the soup object was created to\n  parse XML, but it will look like \"<p></p>\" if the soup object was\n  created to parse HTML.\n\n* We pass in strict=False to html.parser on Python 3, greatly\n  improving html.parser's ability to handle bad HTML.\n\n* We also monkeypatch a serious bug in html.parser that made\n  strict=False disastrous on Python 3.2.2.\n\n* Replaced the \"substitute_html_entities\" argument with the\n  more general \"formatter\" argument.\n\n* Bare ampersands and angle brackets are always converted to XML\n  entities unless the user prevents it.\n\n* Added PageElement.insert_before() and PageElement.insert_after(),\n  which let you put an element into the parse tree with respect to\n  some other element.\n\n* Raise an exception when the user tries to do something nonsensical\n  like insert a tag into itself.\n\n\n= 4.0.0b3 (20120203) =\n\nBeautiful Soup 4 is a nearly-complete rewrite that removes Beautiful\nSoup's custom HTML parser in favor of a system that lets you write a\nlittle glue code and plug in any HTML or XML parser you want.\n\nBeautiful Soup 4.0 comes with glue code for four parsers:\n\n * Python's standard HTMLParser (html.parser in Python 3)\n * lxml's HTML and XML parsers\n * html5lib's HTML parser\n\nHTMLParser is the default, but I recommend you install lxml if you\ncan.\n\nFor complete documentation, see the Sphinx documentation in\nbs4/doc/source/. What follows is a summary of the changes from\nBeautiful Soup 3.\n\n=== The module name has changed ===\n\nPreviously you imported the BeautifulSoup class from a module also\ncalled BeautifulSoup. To save keystrokes and make it clear which\nversion of the API is in use, the module is now called 'bs4':\n\n    >>> from bs4 import BeautifulSoup\n\n=== It works with Python 3 ===\n\nBeautiful Soup 3.1.0 worked with Python 3, but the parser it used was\nso bad that it barely worked at all. Beautiful Soup 4 works with\nPython 3, and since its parser is pluggable, you don't sacrifice\nquality.\n\nSpecial thanks to Thomas Kluyver and Ezio Melotti for getting Python 3\nsupport to the finish line. Ezio Melotti is also to thank for greatly\nimproving the HTML parser that comes with Python 3.2.\n\n=== CDATA sections are normal text, if they're understood at all. ===\n\nCurrently, the lxml and html5lib HTML parsers ignore CDATA sections in\nmarkup:\n\n <p><![CDATA[foo]]></p> => <p></p>\n\nA future version of html5lib will turn CDATA sections into text nodes,\nbut only within tags like <svg> and <math>:\n\n <svg><![CDATA[foo]]></svg> => <p>foo</p>\n\nThe default XML parser (which uses lxml behind the scenes) turns CDATA\nsections into ordinary text elements:\n\n <p><![CDATA[foo]]></p> => <p>foo</p>\n\nIn theory it's possible to preserve the CDATA sections when using the\nXML parser, but I don't see how to get it to work in practice.\n\n=== Miscellaneous other stuff ===\n\nIf the BeautifulSoup instance has .is_xml set to True, an appropriate\nXML declaration will be emitted when the tree is transformed into a\nstring:\n\n    <?xml version=\"1.0\" encoding=\"utf-8\">\n    <markup>\n     ...\n    </markup>\n\nThe ['lxml', 'xml'] tree builder sets .is_xml to True; the other tree\nbuilders set it to False. If you want to parse XHTML with an HTML\nparser, you can set it manually.\n\n\n= 3.2.0 =\n\nThe 3.1 series wasn't very useful, so I renamed the 3.0 series to 3.2\nto make it obvious which one you should use.\n\n= 3.1.0 =\n\nA hybrid version that supports 2.4 and can be automatically converted\nto run under Python 3.0. There are three backwards-incompatible\nchanges you should be aware of, but no new features or deliberate\nbehavior changes.\n\n1. str() may no longer do what you want. This is because the meaning\nof str() inverts between Python 2 and 3; in Python 2 it gives you a\nbyte string, in Python 3 it gives you a Unicode string.\n\nThe effect of this is that you can't pass an encoding to .__str__\nanymore. Use encode() to get a string and decode() to get Unicode, and\nyou'll be ready (well, readier) for Python 3.\n\n2. Beautiful Soup is now based on HTMLParser rather than SGMLParser,\nwhich is gone in Python 3. There's some bad HTML that SGMLParser\nhandled but HTMLParser doesn't, usually to do with attribute values\nthat aren't closed or have brackets inside them:\n\n  <a href=\"foo</a>, </a><a href=\"bar\">baz</a>\n  <a b=\"<a>\">', '<a b=\"&lt;a&gt;\"></a><a>\"></a>\n\nA later version of Beautiful Soup will allow you to plug in different\nparsers to make tradeoffs between speed and the ability to handle bad\nHTML.\n\n3. In Python 3 (but not Python 2), HTMLParser converts entities within\nattributes to the corresponding Unicode characters. In Python 2 it's\npossible to parse this string and leave the &eacute; intact.\n\n <a href=\"http://crummy.com?sacr&eacute;&bleu\">\n\nIn Python 3, the &eacute; is always converted to \\xe9 during\nparsing.\n\n\n= 3.0.7a =\n\nAdded an import that makes BS work in Python 2.3.\n\n\n= 3.0.7 =\n\nFixed a UnicodeDecodeError when unpickling documents that contain\nnon-ASCII characters.\n\nFixed a TypeError that occurred in some circumstances when a tag\ncontained no text.\n\nJump through hoops to avoid the use of chardet, which can be extremely\nslow in some circumstances. UTF-8 documents should never trigger the\nuse of chardet.\n\nWhitespace is preserved inside <pre> and <textarea> tags that contain\nnothing but whitespace.\n\nBeautiful Soup can now parse a doctype that's scoped to an XML namespace.\n\n\n= 3.0.6 =\n\nGot rid of a very old debug line that prevented chardet from working.\n\nAdded a Tag.decompose() method that completely disconnects a tree or a\nsubset of a tree, breaking it up into bite-sized pieces that are\neasy for the garbage collecter to collect.\n\nTag.extract() now returns the tag that was extracted.\n\nTag.findNext() now does something with the keyword arguments you pass\nit instead of dropping them on the floor.\n\nFixed a Unicode conversion bug.\n\nFixed a bug that garbled some <meta> tags when rewriting them.\n\n\n= 3.0.5 =\n\nSoup objects can now be pickled, and copied with copy.deepcopy.\n\nTag.append now works properly on existing BS objects. (It wasn't\noriginally intended for outside use, but it can be now.) (Giles\nRadford)\n\nPassing in a nonexistent encoding will no longer crash the parser on\nPython 2.4 (John Nagle).\n\nFixed an underlying bug in SGMLParser that thinks ASCII has 255\ncharacters instead of 127 (John Nagle).\n\nEntities are converted more consistently to Unicode characters.\n\nEntity references in attribute values are now converted to Unicode\ncharacters when appropriate. Numeric entities are always converted,\nbecause SGMLParser always converts them outside of attribute values.\n\nALL_ENTITIES happens to just be the XHTML entities, so I renamed it to\nXHTML_ENTITIES.\n\nThe regular expression for bare ampersands was too loose. In some\ncases ampersands were not being escaped. (Sam Ruby?)\n\nNon-breaking spaces and other special Unicode space characters are no\nlonger folded to ASCII spaces. (Robert Leftwich)\n\nInformation inside a TEXTAREA tag is now parsed literally, not as HTML\ntags. TEXTAREA now works exactly the same way as SCRIPT. (Zephyr Fang)\n\n= 3.0.4 =\n\nFixed a bug that crashed Unicode conversion in some cases.\n\nFixed a bug that prevented UnicodeDammit from being used as a\ngeneral-purpose data scrubber.\n\nFixed some unit test failures when running against Python 2.5.\n\nWhen considering whether to convert smart quotes, UnicodeDammit now\nlooks at the original encoding in a case-insensitive way.\n\n= 3.0.3 (20060606) =\n\nBeautiful Soup is now usable as a way to clean up invalid XML/HTML (be\nsure to pass in an appropriate value for convertEntities, or XML/HTML\nentities might stick around that aren't valid in HTML/XML). The result\nmay not validate, but it should be good enough to not choke a\nreal-world XML parser. Specifically, the output of a properly\nconstructed soup object should always be valid as part of an XML\ndocument, but parts may be missing if they were missing in the\noriginal. As always, if the input is valid XML, the output will also\nbe valid.\n\n= 3.0.2 (20060602) =\n\nPreviously, Beautiful Soup correctly handled attribute values that\ncontained embedded quotes (sometimes by escaping), but not other kinds\nof XML character. Now, it correctly handles or escapes all special XML\ncharacters in attribute values.\n\nI aliased methods to the 2.x names (fetch, find, findText, etc.) for\nbackwards compatibility purposes. Those names are deprecated and if I\never do a 4.0 I will remove them. I will, I tell you!\n\nFixed a bug where the findAll method wasn't passing along any keyword\narguments.\n\nWhen run from the command line, Beautiful Soup now acts as an HTML\npretty-printer, not an XML pretty-printer.\n\n= 3.0.1 (20060530) =\n\nReintroduced the \"fetch by CSS class\" shortcut. I thought keyword\narguments would replace it, but they don't. You can't call soup('a',\nclass='foo') because class is a Python keyword.\n\nIf Beautiful Soup encounters a meta tag that declares the encoding,\nbut a SoupStrainer tells it not to parse that tag, Beautiful Soup will\nno longer try to rewrite the meta tag to mention the new\nencoding. Basically, this makes SoupStrainers work in real-world\napplications instead of crashing the parser.\n\n= 3.0.0 \"Who would not give all else for two p\" (20060528) =\n\nThis release is not backward-compatible with previous releases. If\nyou've got code written with a previous version of the library, go\nahead and keep using it, unless one of the features mentioned here\nreally makes your life easier. Since the library is self-contained,\nyou can include an old copy of the library in your old applications,\nand use the new version for everything else.\n\nThe documentation has been rewritten and greatly expanded with many\nmore examples.\n\nBeautiful Soup autodetects the encoding of a document (or uses the one\nyou specify), and converts it from its native encoding to\nUnicode. Internally, it only deals with Unicode strings. When you\nprint out the document, it converts to UTF-8 (or another encoding you\nspecify). [Doc reference]\n\nIt's now easy to make large-scale changes to the parse tree without\nscrewing up the navigation members. The methods are extract,\nreplaceWith, and insert. [Doc reference. See also Improving Memory\nUsage with extract]\n\nPassing True in as an attribute value gives you tags that have any\nvalue for that attribute. You don't have to create a regular\nexpression. Passing None for an attribute value gives you tags that\ndon't have that attribute at all.\n\nTag objects now know whether or not they're self-closing. This avoids\nthe problem where Beautiful Soup thought that tags like <BR /> were\nself-closing even in XML documents. You can customize the self-closing\ntags for a parser object by passing them in as a list of\nselfClosingTags: you don't have to subclass anymore.\n\nThere's a new built-in parser, MinimalSoup, which has most of\nBeautifulSoup's HTML-specific rules, but no tag nesting rules. [Doc\nreference]\n\nYou can use a SoupStrainer to tell Beautiful Soup to parse only part\nof a document. This saves time and memory, often making Beautiful Soup\nabout as fast as a custom-built SGMLParser subclass. [Doc reference,\nSoupStrainer reference]\n\nYou can (usually) use keyword arguments instead of passing a\ndictionary of attributes to a search method. That is, you can replace\nsoup(args={\"id\" : \"5\"}) with soup(id=\"5\"). You can still use args if\n(for instance) you need to find an attribute whose name clashes with\nthe name of an argument to findAll. [Doc reference: **kwargs attrs]\n\nThe method names have changed to the better method names used in\nRubyful Soup. Instead of find methods and fetch methods, there are\nonly find methods. Instead of a scheme where you can't remember which\nmethod finds one element and which one finds them all, we have find\nand findAll. In general, if the method name mentions All or a plural\nnoun (eg. findNextSiblings), then it finds many elements\nmethod. Otherwise, it only finds one element. [Doc reference]\n\nSome of the argument names have been renamed for clarity. For instance\navoidParserProblems is now parserMassage.\n\nBeautiful Soup no longer implements a feed method. You need to pass a\nstring or a filehandle into the soup constructor, not with feed after\nthe soup has been created. There is still a feed method, but it's the\nfeed method implemented by SGMLParser and calling it will bypass\nBeautiful Soup and cause problems.\n\nThe NavigableText class has been renamed to NavigableString. There is\nno NavigableUnicodeString anymore, because every string inside a\nBeautiful Soup parse tree is a Unicode string.\n\nfindText and fetchText are gone. Just pass a text argument into find\nor findAll.\n\nNull was more trouble than it was worth, so I got rid of it. Anything\nthat used to return Null now returns None.\n\nSpecial XML constructs like comments and CDATA now have their own\nNavigableString subclasses, instead of being treated as oddly-formed\ndata. If you parse a document that contains CDATA and write it back\nout, the CDATA will still be there.\n\nWhen you're parsing a document, you can get Beautiful Soup to convert\nXML or HTML entities into the corresponding Unicode characters. [Doc\nreference]\n\n= 2.1.1 (20050918) =\n\nFixed a serious performance bug in BeautifulStoneSoup which was\ncausing parsing to be incredibly slow.\n\nCorrected several entities that were previously being incorrectly\ntranslated from Microsoft smart-quote-like characters.\n\nFixed a bug that was breaking text fetch.\n\nFixed a bug that crashed the parser when text chunks that look like\nHTML tag names showed up within a SCRIPT tag.\n\nTHEAD, TBODY, and TFOOT tags are now nestable within TABLE\ntags. Nested tables should parse more sensibly now.\n\nBASE is now considered a self-closing tag.\n\n= 2.1.0 \"Game, or any other dish?\" (20050504) =\n\nAdded a wide variety of new search methods which, given a starting\npoint inside the tree, follow a particular navigation member (like\nnextSibling) over and over again, looking for Tag and NavigableText\nobjects that match certain criteria. The new methods are findNext,\nfetchNext, findPrevious, fetchPrevious, findNextSibling,\nfetchNextSiblings, findPreviousSibling, fetchPreviousSiblings,\nfindParent, and fetchParents. All of these use the same basic code\nused by first and fetch, so you can pass your weird ways of matching\nthings into these methods.\n\nThe fetch method and its derivatives now accept a limit argument.\n\nYou can now pass keyword arguments when calling a Tag object as though\nit were a method.\n\nFixed a bug that caused all hand-created tags to share a single set of\nattributes.\n\n= 2.0.3 (20050501) =\n\nFixed Python 2.2 support for iterators.\n\nFixed a bug that gave the wrong representation to tags within quote\ntags like <script>.\n\nTook some code from Mark Pilgrim that treats CDATA declarations as\ndata instead of ignoring them.\n\nBeautiful Soup's setup.py will now do an install even if the unit\ntests fail. It won't build a source distribution if the unit tests\nfail, so I can't release a new version unless they pass.\n\n= 2.0.2 (20050416) =\n\nAdded the unit tests in a separate module, and packaged it with\ndistutils.\n\nFixed a bug that sometimes caused renderContents() to return a Unicode\nstring even if there was no Unicode in the original string.\n\nAdded the done() method, which closes all of the parser's open\ntags. It gets called automatically when you pass in some text to the\nconstructor of a parser class; otherwise you must call it yourself.\n\nReinstated some backwards compatibility with 1.x versions: referencing\nthe string member of a NavigableText object returns the NavigableText\nobject instead of throwing an error.\n\n= 2.0.1 (20050412) =\n\nFixed a bug that caused bad results when you tried to reference a tag\nname shorter than 3 characters as a member of a Tag, eg. tag.table.td.\n\nMade sure all Tags have the 'hidden' attribute so that an attempt to\naccess tag.hidden doesn't spawn an attempt to find a tag named\n'hidden'.\n\nFixed a bug in the comparison operator.\n\n= 2.0.0 \"Who cares for fish?\" (20050410)\n\nBeautiful Soup version 1 was very useful but also pretty stupid. I\noriginally wrote it without noticing any of the problems inherent in\ntrying to build a parse tree out of ambiguous HTML tags. This version\nsolves all of those problems to my satisfaction. It also adds many new\nclever things to make up for the removal of the stupid things.\n\n== Parsing ==\n\nThe parser logic has been greatly improved, and the BeautifulSoup\nclass should much more reliably yield a parse tree that looks like\nwhat the page author intended. For a particular class of odd edge\ncases that now causes problems, there is a new class,\nICantBelieveItsBeautifulSoup.\n\nBy default, Beautiful Soup now performs some cleanup operations on\ntext before parsing it. This is to avoid common problems with bad\ndefinitions and self-closing tags that crash SGMLParser. You can\nprovide your own set of cleanup operations, or turn it off\naltogether. The cleanup operations include fixing self-closing tags\nthat don't close, and replacing Microsoft smart quotes and similar\ncharacters with their HTML entity equivalents.\n\nYou can now get a pretty-print version of parsed HTML to get a visual\npicture of how Beautiful Soup parses it, with the Tag.prettify()\nmethod.\n\n== Strings and Unicode ==\n\nThere are separate NavigableText subclasses for ASCII and Unicode\nstrings. These classes directly subclass the corresponding base data\ntypes. This means you can treat NavigableText objects as strings\ninstead of having to call methods on them to get the strings.\n\nstr() on a Tag always returns a string, and unicode() always returns\nUnicode. Previously it was inconsistent.\n\n== Tree traversal ==\n\nIn a first() or fetch() call, the tag name or the desired value of an\nattribute can now be any of the following:\n\n * A string (matches that specific tag or that specific attribute value)\n * A list of strings (matches any tag or attribute value in the list)\n * A compiled regular expression object (matches any tag or attribute\n   value that matches the regular expression)\n * A callable object that takes the Tag object or attribute value as a\n   string. It returns None/false/empty string if the given string\n   doesn't match, and any other value if it does.\n\nThis is much easier to use than SQL-style wildcards (see, regular\nexpressions are good for something). Because of this, I took out\nSQL-style wildcards. I'll put them back if someone complains, but\ntheir removal simplifies the code a lot.\n\nYou can use fetch() and first() to search for text in the parse tree,\nnot just tags. There are new alias methods fetchText() and firstText()\ndesigned for this purpose. As with searching for tags, you can pass in\na string, a regular expression object, or a method to match your text.\n\nIf you pass in something besides a map to the attrs argument of\nfetch() or first(), Beautiful Soup will assume you want to match that\nthing against the \"class\" attribute. When you're scraping\nwell-structured HTML, this makes your code a lot cleaner.\n\n1.x and 2.x both let you call a Tag object as a shorthand for\nfetch(). For instance, foo(\"bar\") is a shorthand for\nfoo.fetch(\"bar\"). In 2.x, you can also access a specially-named member\nof a Tag object as a shorthand for first(). For instance, foo.barTag\nis a shorthand for foo.first(\"bar\"). By chaining these shortcuts you\ntraverse a tree in very little code: for header in\nsoup.bodyTag.pTag.tableTag('th'):\n\nIf an element relationship (like parent or next) doesn't apply to a\ntag, it'll now show up Null instead of None. first() will also return\nNull if you ask it for a nonexistent tag. Null is an object that's\njust like None, except you can do whatever you want to it and it'll\ngive you Null instead of throwing an error.\n\nThis lets you do tree traversals like soup.htmlTag.headTag.titleTag\nwithout having to worry if the intermediate stages are actually\nthere. Previously, if there was no 'head' tag in the document, headTag\nin that instance would have been None, and accessing its 'titleTag'\nmember would have thrown an AttributeError. Now, you can get what you\nwant when it exists, and get Null when it doesn't, without having to\ndo a lot of conditionals checking to see if every stage is None.\n\nThere are two new relations between page elements: previousSibling and\nnextSibling. They reference the previous and next element at the same\nlevel of the parse tree. For instance, if you have HTML like this:\n\n  <p><ul><li>Foo<br /><li>Bar</ul>\n\nThe first 'li' tag has a previousSibling of Null and its nextSibling\nis the second 'li' tag. The second 'li' tag has a nextSibling of Null\nand its previousSibling is the first 'li' tag. The previousSibling of\nthe 'ul' tag is the first 'p' tag. The nextSibling of 'Foo' is the\n'br' tag.\n\nI took out the ability to use fetch() to find tags that have a\nspecific list of contents. See, I can't even explain it well. It was\nreally difficult to use, I never used it, and I don't think anyone\nelse ever used it. To the extent anyone did, they can probably use\nfetchText() instead. If it turns out someone needs it I'll think of\nanother solution.\n\n== Tree manipulation ==\n\nYou can add new attributes to a tag, and delete attributes from a\ntag. In 1.x you could only change a tag's existing attributes.\n\n== Porting Considerations ==\n\nThere are three changes in 2.0 that break old code:\n\nIn the post-1.2 release you could pass in a function into fetch(). The\nfunction took a string, the tag name. In 2.0, the function takes the\nactual Tag object.\n\nIt's no longer to pass in SQL-style wildcards to fetch(). Use a\nregular expression instead.\n\nThe different parsing algorithm means the parse tree may not be shaped\nlike you expect. This will only actually affect you if your code uses\none of the affected parts. I haven't run into this problem yet while\nporting my code.\n\n= Between 1.2 and 2.0 =\n\nThis is the release to get if you want Python 1.5 compatibility.\n\nThe desired value of an attribute can now be any of the following:\n\n * A string\n * A string with SQL-style wildcards\n * A compiled RE object\n * A callable that returns None/false/empty string if the given value\n   doesn't match, and any other value otherwise.\n\nThis is much easier to use than SQL-style wildcards (see, regular\nexpressions are good for something). Because of this, I no longer\nrecommend you use SQL-style wildcards. They may go away in a future\nrelease to clean up the code.\n\nMade Beautiful Soup handle processing instructions as text instead of\nignoring them.\n\nApplied patch from Richie Hindle (richie at entrian dot com) that\nmakes tag.string a shorthand for tag.contents[0].string when the tag\nhas only one string-owning child.\n\nAdded still more nestable tags. The nestable tags thing won't work in\na lot of cases and needs to be rethought.\n\nFixed an edge case where searching for \"%foo\" would match any string\nshorter than \"foo\".\n\n= 1.2 \"Who for such dainties would not stoop?\" (20040708) =\n\nApplied patch from Ben Last (ben at benlast dot com) that made\nTag.renderContents() correctly handle Unicode.\n\nMade BeautifulStoneSoup even dumber by making it not implicitly close\na tag when another tag of the same type is encountered; only when an\nactual closing tag is encountered. This change courtesy of Fuzzy (mike\nat pcblokes dot com). BeautifulSoup still works as before.\n\n= 1.1 \"Swimming in a hot tureen\" =\n\nAdded more 'nestable' tags. Changed popping semantics so that when a\nnestable tag is encountered, tags are popped up to the previously\nencountered nestable tag (of whatever kind). I will revert this if\nenough people complain, but it should make more people's lives easier\nthan harder. This enhancement was suggested by Anthony Baxter (anthony\nat interlink dot com dot au).\n\n= 1.0 \"So rich and green\" (20040420) =\n\nInitial release.\n"}, "headers": {"Date": ["Sun, 01 Nov 2020 01:14:04 GMT"], "Server": ["gunicorn/19.8.1"], "Content-Type": ["application/octet-stream"], "Content-Length": ["59403"], "Content-Disposition": ["attachment; filename*=utf-8''CHANGELOG"], "X-Launchpad-Revision": ["96ff31b88b65a0d0ea73b89333fe7c4a2669d8fb"], "Keep-Alive": ["timeout=5, max=100"], "Connection": ["Keep-Alive"]}, "status": {"code": 200, "message": "OK"}, "url": "https://bazaar.launchpad.net/~leonardr/beautifulsoup/bs4/download/head:/CHANGELOG"}, "recorded_at": "2020-11-01T01:14:06"}], "recorded_with": "betamax/0.8.1"}