{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/bst_pygasus_core/json"}, "response": {"body": {"encoding": null, "string": ""}, "headers": {"Server": ["nginx/1.10.3"], "Location": ["/pypi/bst.pygasus.core/json"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["e24d1b3ef619cfb230d76b1f939b5afbe986d16994493bd8631031ab7ef4bf2e"], "Content-Length": ["0"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:47:53 GMT"], "Age": ["0"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2140-IAD, cache-hhn1535-HHN"], "X-Cache": ["MISS, MISS"], "X-Cache-Hits": ["0, 0"], "X-Timer": ["S1494344873.340432,VS0,VE128"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/bst_pygasus_core/json"}, "recorded_at": "2017-05-09T15:47:53"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/bst.pygasus.core/json"}, "response": {"body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"pygasus web framework extjs\", \n        \"package_url\": \"http://pypi.python.org/pypi/bst.pygasus.core\", \n        \"author\": \"codeix\", \n        \"author_email\": \"samuel.riolo@biel-bienne.ch\", \n        \"download_url\": \"UNKNOWN\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"1.0.1\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \".. role:: python(code)\\n   :language: python\\n\\n\\n\\n.. image:: https://travis-ci.org/bielbienne/bst.pygasus.demo.svg?branch=master\\n    :target: https://travis-ci.org/bielbienne/bst.pygasus.demo\\n\\n.. contents::\\n\\nIntroduction\\n============\\n\\nPygasus is a new Python 3 framework to build web applications with\\n`Sencha ExtJS <https://www.sencha.com/products/extjs/#overview>`_. Pygasus is designed to be full\\ncustomizable for your project. \\n\\nbst.pygasus and all corresponding submodules are licensed under the ZPL 2.1, see LICENSE.txt for details.\\n\\nArchitecture\\n------------\\n\\n.. figure:: docs/architecture.png\\n   :alt: Architecture\\n\\n   yellow modules are planned to be developed in the near future\\n\\nThe various packages are:\\n\\nbst.extjs.core\\n    The core package of the framework that assembles all required packages together.\\n\\nbst.extjs.datamanager\\n    The datamanager manages data coming from the client and data sent to the client's browser.\\n\\nbst.extjs.i18n\\n    This package handles the translation for multilingual sites and applications.\\n\\nbst.extjs.scaffolding\\n    Scaffolding is a package to generate standard models, stores, views and grids for ExtJS. \\n\\nbst.extjs.security\\n    This package provide a default login mask and a pluggable authentication. In the future we also plan to\\n    implement a role based permission model.\\n\\nbst.extjs.session\\n    This package creates a cookie on client browsers and provides a server side session store.\\n\\nbst.extjs.wsgi\\n    The layer needed to let the application work as a WSGI server.\\n\\nbst.extjs.resources\\n    This package is responsible to share all needed static resources with the client.\\n\\n\\nGetting started\\n===============\\n\\nRecommendation\\n--------------\\n\\nThe ZCA (Zope component Architectur) is a main element in this framework. If you are not familiar with it, we recommend you first learn its basics. You can follow the links at the bottom of this page. Also other external libraries are already well documented, which is why we didn't want to do that twice.\\n\\nBuildout\\n--------\\n\\nWe recommend to setup up a buildout for your project. First it will install all required dependencies and the scripts needed to run a server. The boostrap file can be downloaded at https://bootstrap.pypa.io/bootstrap-buildout.py.\\n\\nFile structure:\\n\\n.. code::\\n\\n    buildout\\n    \\u251c\\u2500\\u2500 bootstrap.py\\n    \\u251c\\u2500\\u2500 buildout.cfg\\n    \\u251c\\u2500\\u2500 etc\\n    \\u2502   \\u251c\\u2500\\u2500 deploy.ini.in\\n    \\u2502   \\u2514\\u2500\\u2500 site.zcml.in\\n    \\u2514\\u2500\\u2500 dev\\n        \\u2514\\u2500\\u2500 myproject\\n\\nbuildout.cfg\\n\\n.. code:: ini\\n\\n    [buildout]\\n    \\n    extends = \\n        https://raw.githubusercontent.com/bielbienne/bst.pygasus.demo/master/sources.cfg\\n        https://raw.githubusercontent.com/bielbienne/bst.pygasus.demo/master/versions.cfg\\n    \\n    develop = dev/myproject  \\n    parts =\\n        app\\n        zcml\\n        lingua\\n    \\n    extensions = mr.developer\\n    auto-checkout =\\n        js.extjs\\n        bst.pygasus.core\\n        bst.pygasus.wsgi\\n        bst.pygasus.scaffolding\\n        bst.pygasus.datamanager\\n        bst.pygasus.resources\\n        bst.pygasus.security\\n        bst.pygasus.session\\n        bst.pygasus.i18n\\n        bst.pygasus.demo\\n    \\n    [debug_ini]\\n    recipe = collective.recipe.template\\n    input = etc/deploy.ini.in\\n    output = ${buildout:parts-directory}/etc/${:outfile}\\n    outfile = debug.ini\\n    \\n    [zcml]\\n    recipe = collective.recipe.template\\n    input = etc/site.zcml.in\\n    output = ${buildout:parts-directory}/etc/${:outfile}\\n    outfile = site.zcml\\n    \\n    [app]\\n    recipe = zc.recipe.egg:script\\n    arguments=\\\"${debug_ini:output}\\\"\\n    eggs =\\n        bst.pygasus.wsgi\\n        myproject\\n\\n    [lingua]\\n    unzip = true\\n    recipe = zc.recipe.egg\\n    eggs =\\n        lingua\\n        bst.pygasus.i18n\\n\\netc/deploy.ini.in\\n\\n.. code:: ini\\n\\n    [zcml]\\n    path = ${zcml:output}\\n\\n    [app:main]\\n    use = egg:bst.pygasus.wsgi#main\\n\\n    [server:debug]\\n    use = egg:waitress#http\\n    host = 127.0.0.1\\n    port = 5000\\n    threadpool_workers = 1\\n    threadpool_spawn_if_under = 1\\n    threadpool_max_requests = 0\\n\\netc/site.zcml.in\\n\\n.. code:: xml\\n\\n    <configure xmlns=\\\"http://namespaces.zope.org/zope\\\">\\n        <include package=\\\"myproject\\\" />\\n    </configure>\\n\\nRun your buildout. (You must first create your own project as shown in next part)\\n\\n.. code:: bash\\n\\n    $ cd buildout\\n    $ python3 boostrap.py\\n    $ ./bin/buildout\\n\\n\\nCreate an application\\n---------------------\\n\\nProposed File Structure\\n~~~~~~~~~~~~~~~~~~~~~~~\\n\\nWe propose the following file structure inside your python egg:\\n\\n.. code::\\n\\n    \\u251c\\u2500\\u2500 app\\n    \\u2502   \\u251c\\u2500\\u2500 application.js\\n    \\u2502   \\u251c\\u2500\\u2500 controller\\n    \\u2502   \\u2502   \\u251c\\u2500\\u2500 Card.js\\n    \\u2502   \\u2502   \\u2514\\u2500\\u2500 Main.js\\n    \\u2502   \\u251c\\u2500\\u2500 resources\\n    \\u2502   \\u2502   \\u2514\\u2500\\u2500 css\\n    \\u2502   \\u2502       \\u2514\\u2500\\u2500 styles.css\\n    \\u2502   \\u2514\\u2500\\u2500 view\\n    \\u2502       \\u251c\\u2500\\u2500 CardView.js\\n    \\u2502       \\u2514\\u2500\\u2500 MainView.js\\n    \\u251c\\u2500\\u2500 configure.zcml\\n    \\u251c\\u2500\\u2500 extjs.py\\n    \\u251c\\u2500\\u2500 handler.py\\n    \\u251c\\u2500\\u2500 __init__.py\\n    \\u251c\\u2500\\u2500 locales\\n    \\u2502   \\u251c\\u2500\\u2500 bb.extjs.demo.pot\\n    \\u2502   \\u2514\\u2500\\u2500 fr\\n    \\u2502       \\u2514\\u2500\\u2500 LC_MESSAGES\\n    \\u2502           \\u251c\\u2500\\u2500 bst.pygasus.demo.mo\\n    \\u2502           \\u2514\\u2500\\u2500 bst.pygasus.demo.po\\n    \\u251c\\u2500\\u2500 model.py\\n    \\u2514\\u2500\\u2500 schema.py\\n\\n\\nsetup configure.zcml\\n~~~~~~~~~~~~~~~~~~~~\\n\\n.. code:: xml\\n\\n    <configure xmlns=\\\"http://namespaces.zope.org/zope\\\"\\n               xmlns:grok=\\\"http://namespaces.zope.org/grok\\\"\\n               xmlns:i18n=\\\"http://namespaces.zope.org/i18n\\\"\\n               i18n_domain=\\\"myproject\\\">\\n    \\n        <include package=\\\"bst.pygasus.core\\\" />\\n    \\n        <grok:grok package=\\\".\\\" />\\n    \\n        <i18n:registerTranslations directory=\\\"locales\\\" />\\n    \\n    </configure>\\n\\n\\nCreate an application context (extjs.py)\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n.. code:: python\\n\\n    from fanstatic import Library\\n    from fanstatic import Resource\\n    from bst.pygasus.core import ext\\n        \\n    library = Library('demo', 'app')\\n\\n    class DemoContext(ext.ApplicationContext):\\n    \\n        title = 'Demo'\\n        application = 'bst.pygasus.demo.Application'\\n        namespace = 'bst.pygasus.demo'\\n        resources = Resource(library, 'application.js',\\n                             depends=[ext.extjs_resources])\\n\\n\\nRegister additional ExtJS paths (extjs.py)\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\nExtJS needs to know where additional ExtJS-Classes can be loaded. This is why each namespace used in ExtJS needs to be registred. In this example we regstister two namespaces for 'bst.pygasus.demo.view' and 'bst.pygasus.demo.controller'. The path usually begins with 'fanstatic', followed by your library name (e.g. \\\"demo\\\") ( :python:`Library('demo', 'app')` ) and then, at the end, a subdirectory.\\n\\n.. code:: python\\n\\n    class ViewClassPathMapping(ext.ClassPathMapping):\\n        namespace = 'bst.pygasus.demo.view'\\n        path = 'fanstatic/demo/view'\\n\\n    class ViewClassPathMapping(ext.ClassPathMapping):\\n        namespace = 'bst.pygasus.demo.contoller'\\n        path = 'fanstatic/demo/controller'\\n\\n\\nDefine a schema (schema.py)\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\nWith this schema different ExtJS-Classes like form, store or model, are auto generated on the fly. Look at the package bst.pygasus.scaffolding for the supported types and class generation. Feel free to extend this with your own generators of ExtJS classes for your project. This schema will also be used to transform json to a python model or vice versa.\\n\\n.. code:: python\\n\\n    from bst.pygasus.core import ext\\n        \\n    from zope import schema\\n    from zope.interface import Interface\\n    \\n    @ext.scaffolding('Card', 'Magic the Gathering')\\n    class ICard(Interface):\\n        id = schema.Id(title='ID', required=False)\\n    \\n        name = schema.TextLine(title='Name', required=True)\\n\\n        costs = schema.Int(title='Costs', required=False)\\n\\n        publication = schema.Date(title='Publication', required=True)\\n\\n\\nCreate a Model (model.py)\\n~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\nThe model is used to transfer data from the server to client and back.\\n\\n.. code:: python\\n\\n    from bst.pygasus.core import ext\\n    from bst.pygasus.demo import schema\\n    from zope.schema.fieldproperty import FieldProperty\\n\\n    class Card(ext.Model):\\n        ext.schema(schema.ICard)\\n        \\n        id = FieldProperty(ICard['id'])\\n        name = FieldProperty(ICard['name'])\\n        costs = FieldProperty(ICard['costs'])\\n        publication = FieldProperty(ICard['publication'])\\n\\n\\nCreate a handler for CRUD requests (handler.py)\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\nThe handler for an definded model provides the CRUD operations. Now it is up to you to implement whatever you need in these methods.\\n\\n.. code:: python\\n\\n    class CardHandler(ext.AbstractModelHandler):\\n        ext.adapts(model.Card, IRequest)\\n    \\n        def get(self, model, batch):\\n            start, limit = self.slice()\\n            property, direction = self.sort()\\n    \\n            return cardIndexer.search_index(start, limit, property, direction)\\n    \\n        def create(self, model, batch):\\n            model.id = cardIndexer.get_next_id()\\n            cardIndexer.extend_index(model)\\n    \\n            return [model], 1\\n    \\n        def update(self, model, batch):\\n            cardIndexer.update_index(model)\\n    \\n            return [model], 1\\n    \\n        def delete(self, model, batch):\\n            cardIndexer.reduce_index(model)\\n    \\n            return [model], 1\\n\\n\\n\\ni18n (Internationalization)\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\nUsually you define a domain name for each package. In order to do that you create an instance of MessageFactory in the __init__.py file:\\n\\n.. code:: python\\n\\n    from zope.i18nmessageid import MessageFactory\\n\\n    _ = MessageFactory('bst.pygasus.demo')\\n\\nNow you can use translation messages anywhere you want to translate a string to multiple languages:\\n\\n.. code:: python\\n\\n    publication = schema.Date(title=_('publication_title', default='Publication'), required=True)\\n\\n\\nIf you want use translations in ExtJS, it works similar to translations in python. Simply write a variable at the top of the file and pass the domain name in the MessageFactory:\\n\\n.. code:: javascript\\n\\n    var _ = i18n('bst.pygasus.demo');\\n\\n    Ext.define('bst.pygasus.demo.view.MainView', {\\n        extend: 'Ext.container.Viewport',\\n    \\n        ....\\n\\nNow you can translate messages with the variable defined anywhere in the class:\\n\\n.. code:: javascript\\n\\n    items: [{\\n        xtype: 'button',\\n        action: 'save',\\n        text: _('tr_save', 'Save'),\\n    },\\n\\n\\nYou can use the lingua package to crawl translation from python and ExtJS files and generate a .pot file with it. This application is already installed by  buildout. After generating a .pot file you can use different kinds of gettext tools to merge and build the final .po and .mo files for each language:\\n\\n.. code:: bash\\n\\n    ./bin/pot-create \\u2013d <domain> -o <filename>.pot <source>\\n\\n\\nUsing Scaffolding\\n~~~~~~~~~~~~~~~~~\\n\\nScaffolding provides default ExtJS-classes that can be directly used. Use the the \\\"required\\\" attribute to load a scaffolding class. In follow example we have defined the xtype to \\\"DisplayCard\\\". This will generate a read only view with all fields from the schema ICard.\\n\\n.. code:: javascript\\n\\n    Ext.define('bst.pygasus.demo.view.CardView', {\\n        extend: 'Ext.window.Window',\\n    \\n        requires: [\\n            'scaffolding.display.Card'\\n        ],\\n    \\n        itemId: 'cardView',\\n        layout: 'vbox',\\n    \\n        initComponent: function() {\\n            var me = this;\\n            \\n            me.items = [{\\n                xtype: 'DisplayCard',\\n                itemId: 'displayCard',\\n                title: '',\\n                maxWidth: '500'\\n            },\\n            {\\n                xtype: 'button',\\n                text: 'Delete',\\n                action: 'delete'\\n            }];\\n    \\n            me.bodyPadding = '5 5 5 5';\\n    \\n            me.callParent(arguments);\\n        }\\n    \\n    });\\n\\nAs an another example we use buffered store from scaffolding:\\n\\n.. code:: javascript\\n\\n    Ext.define('bst.pygasus.demo.controller.Main', {\\n        extend: 'Ext.app.Controller',\\n        \\n        requires: [\\n            'scaffolding.bufferedstore.Card'\\n        ],\\n        \\n        ....\\n\\n\\n\\nDemo application\\n----------------\\nWe have a demo application that you can easily install with a buildout file. If you are interested, please follow the instruction at `bst.pygasus.demo <https://github.com/bielbienne/bst.pygasus.demo>`_.\\n\\n\\nExternal References\\n===================\\n\\n* http://zopeinterface.readthedocs.org/en/latest/\\n* http://zopecomponent.readthedocs.org/en/latest/\\n* https://www.python.org/dev/peps/pep-0333/\\n* https://pypi.python.org/pypi/martian\\n* https://pypi.python.org/pypi/zc.buildout/2.4.0\\n* http://grok.zope.org/documentation/tutorial/grok-poller-tutorial/adapters\\n* http://www.fanstatic.org/en/latest/\\n\\n\\nAbout us\\n========\\nWe are the IT Services of Biel/Bienne, Switzerland.\\nhttp://foss.biel-bienne.ch/blog/\\n\\nChangelog\\n=========\\n\\n1.0.1 (2015-08-19)\\n------------------\\n\\n- Use complete MANIFEST.in\\n\\n\\n1.0 (2015-08-03)\\n----------------\\n\\n- Initial public release [codeix]\", \n        \"release_url\": \"http://pypi.python.org/pypi/bst.pygasus.core/1.0.1\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 1, \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"License :: OSI Approved :: Zope Public License\", \n            \"Natural Language :: English\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python :: 3\"\n        ], \n        \"name\": \"bst.pygasus.core\", \n        \"bugtrack_url\": null, \n        \"license\": \"ZPL 2.1\", \n        \"summary\": \"Pygasus web framework working with ExtJs\", \n        \"home_page\": \"https://github.com/bielbienne/bst.pygasus.core\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-08-03T17:09:41\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a7/23/5b2a1101a34d471d980096dda6705d6d5df8fa759678bc2c88381eb8f353/bst.pygasus.core-1.0.tar.gz\", \n                \"md5_digest\": \"b085f2e1063eb7ef81e3c30c1ecc8349\", \n                \"downloads\": 1670, \n                \"filename\": \"bst.pygasus.core-1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a7/23/5b2a1101a34d471d980096dda6705d6d5df8fa759678bc2c88381eb8f353/bst.pygasus.core-1.0.tar.gz\", \n                \"size\": 13800\n            }\n        ], \n        \"1.0.1\": [\n            {\n                \"has_sig\": true, \n                \"upload_time\": \"2015-08-19T13:43:41\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d2/6a/0932efa5cc40d0d2ad3ff6e80e60c480cda748ea819e22b706ce0a0bd2ca/bst.pygasus.core-1.0.1.tar.gz\", \n                \"md5_digest\": \"dbdf4e49df65722b78cc953da5fe6244\", \n                \"downloads\": 832, \n                \"filename\": \"bst.pygasus.core-1.0.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d2/6a/0932efa5cc40d0d2ad3ff6e80e60c480cda748ea819e22b706ce0a0bd2ca/bst.pygasus.core-1.0.1.tar.gz\", \n                \"size\": 77475\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": true, \n            \"upload_time\": \"2015-08-19T13:43:41\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/d2/6a/0932efa5cc40d0d2ad3ff6e80e60c480cda748ea819e22b706ce0a0bd2ca/bst.pygasus.core-1.0.1.tar.gz\", \n            \"md5_digest\": \"dbdf4e49df65722b78cc953da5fe6244\", \n            \"downloads\": 832, \n            \"filename\": \"bst.pygasus.core-1.0.1.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"d2/6a/0932efa5cc40d0d2ad3ff6e80e60c480cda748ea819e22b706ce0a0bd2ca/bst.pygasus.core-1.0.1.tar.gz\", \n            \"size\": 77475\n        }\n    ]\n}"}, "headers": {"Server": ["nginx/1.10.3"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Disposition": ["inline"], "X-PYPI-LAST-SERIAL": ["2860625"], "Cache-Control": ["max-age=600, public"], "Access-Control-Allow-Origin": ["*"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["e6627d6dceb441e057f050b19df99340d4380b56387458aa695ecd388cd7fa99"], "Content-Length": ["17523"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:47:53 GMT"], "Age": ["45051"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2144-IAD, cache-hhn1535-HHN"], "X-Cache": ["HIT, MISS"], "X-Cache-Hits": ["1, 0"], "X-Timer": ["S1494344873.495153,VS0,VE90"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/bst.pygasus.core/json"}, "recorded_at": "2017-05-09T15:47:53"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://github.com/bielbienne/bst.pygasus.core"}, "response": {"body": {"encoding": "utf-8", "string": "<html><body>You are being <a href=\"https://github.com/codeix/bst.pygasus.core\">redirected</a>.</body></html>"}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:47:54 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["301 Moved Permanently"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "Location": ["https://github.com/codeix/bst.pygasus.core"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYifQ%3D%3D--7fe69035ebc404483fedea262de12ae3bf6177fa; path=/; secure; HttpOnly"], "X-Request-Id": ["d34fd757004097f9e5b09b9a2dff116b"], "X-Runtime": ["0.035139"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["33cb64b6845aaab9c9912480e87d4fb8"], "X-GitHub-Request-Id": ["D5E4:35A7:6B461AA:9F41E61:5911E4A9"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://github.com/bielbienne/bst.pygasus.core"}, "recorded_at": "2017-05-09T15:47:54"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYifQ%3D%3D--7fe69035ebc404483fedea262de12ae3bf6177fa"]}, "method": "GET", "uri": "https://github.com/codeix/bst.pygasus.core"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:47:55 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Sat, 09 May 2037 15:47:55 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYiLCJzcHlfcmVwbyI6ImNvZGVpeC9ic3QucHlnYXN1cy5jb3JlIiwic3B5X3JlcG9fYXQiOjE0OTQzNDQ4NzQsIl9jc3JmX3Rva2VuIjoibENwVHA4MTQzcEd3RnZVTzFDL2ZJejRFM2lqZWZNc2ZPaXBYRElOampwcz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--29de6bc9d2f0f0409390570097b5488ee618a41b; path=/; secure; HttpOnly"], "X-Request-Id": ["029ba20a8ace0029b419c3fddfce660f"], "X-Runtime": ["0.953156"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["bc4c952d089501afbfc8f7ff525da31c"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["D5E4:35A7:6B461C6:9F41E94:5911E4AA"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/codeix/bst.pygasus.core"}, "recorded_at": "2017-05-09T15:47:55"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYiLCJzcHlfcmVwbyI6ImNvZGVpeC9ic3QucHlnYXN1cy5jb3JlIiwic3B5X3JlcG9fYXQiOjE0OTQzNDQ4NzQsIl9jc3JmX3Rva2VuIjoibENwVHA4MTQzcEd3RnZVTzFDL2ZJejRFM2lqZWZNc2ZPaXBYRElOampwcz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--29de6bc9d2f0f0409390570097b5488ee618a41b"]}, "method": "GET", "uri": "https://github.com/bielbienne/bst.pygasus.demo"}, "response": {"body": {"encoding": "utf-8", "string": "<html><body>You are being <a href=\"https://github.com/codeix/bst.pygasus.demo\">redirected</a>.</body></html>"}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:47:55 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["301 Moved Permanently"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "Location": ["https://github.com/codeix/bst.pygasus.demo"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYiLCJfY3NyZl90b2tlbiI6ImxDcFRwODE0M3BHd0Z2VU8xQy9mSXo0RTNpamVmTXNmT2lwWERJTmpqcHM9In0%3D--3a9f20f4fed47348e85f02fa0e7609e92a6baa0d; path=/; secure; HttpOnly"], "X-Request-Id": ["e1ed8e83e3b4047c781fa649da1e9dee"], "X-Runtime": ["0.032373"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["e878d09eac725c89f5f15204c1326660"], "X-GitHub-Request-Id": ["D5E4:35A7:6B462EE:9F4202E:5911E4AB"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://github.com/bielbienne/bst.pygasus.demo"}, "recorded_at": "2017-05-09T15:47:55"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYiLCJfY3NyZl90b2tlbiI6ImxDcFRwODE0M3BHd0Z2VU8xQy9mSXo0RTNpamVmTXNmT2lwWERJTmpqcHM9In0%3D--3a9f20f4fed47348e85f02fa0e7609e92a6baa0d"]}, "method": "GET", "uri": "https://github.com/codeix/bst.pygasus.demo"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:47:56 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiODMyOTdjZDE4MTk3ZjAyZTE0MTQ0MDYzN2U3ZDJkNTYiLCJfY3NyZl90b2tlbiI6ImxDcFRwODE0M3BHd0Z2VU8xQy9mSXo0RTNpamVmTXNmT2lwWERJTmpqcHM9Iiwic3B5X3JlcG8iOiJjb2RlaXgvYnN0LnB5Z2FzdXMuZGVtbyIsInNweV9yZXBvX2F0IjoxNDk0MzQ0ODc1LCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--e4c68d72ce17a6331397c2a50431d37cfaa200be; path=/; secure; HttpOnly"], "X-Request-Id": ["28167f441505163440b285ed718b99e9"], "X-Runtime": ["0.574079"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["73ab9dfb66867a4ebbe0dc0967441cd8"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["D5E4:35A7:6B46317:9F42096:5911E4AB"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/codeix/bst.pygasus.demo"}, "recorded_at": "2017-05-09T15:47:56"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://raw.githubusercontent.com/codeix/bst.pygasus.core/master/CHANGES.rst"}, "response": {"body": {"encoding": "utf-8", "base64_string": "H4sIAAAAAAAAA3POSMxLT83JT+eyhQEuLkM9QwWN0ryi1JzUxOLUFE0uXTTAxaWr4JdfkpGZl66QDDYhRaEytUSPC6TXAKTbyMDQVNfAQtfQElM3RH9ocapCcn5uQU5qSaqCr6Ofp5trcIheZh7EDIQJBsbY7ffMyyzJTMxRKChNyslMVoA6ViE6OT8lNbMilgsAAppVENoAAAA="}, "headers": {"Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Strict-Transport-Security": ["max-age=31536000"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "ETag": ["\"91ac94d7d0de422ecadd17cac3d5575e5c945ee8\""], "Content-Type": ["text/plain; charset=utf-8"], "Cache-Control": ["max-age=300"], "X-Geo-Block-List": [""], "X-GitHub-Request-Id": ["698E:4018:21810AB:22D9DAB:5911E4AC"], "Content-Encoding": ["gzip"], "Content-Length": ["155"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:47:56 GMT"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-Served-By": ["cache-hhn1548-HHN"], "X-Cache": ["MISS"], "X-Cache-Hits": ["0"], "X-Timer": ["S1494344877.606275,VS0,VE132"], "Vary": ["Authorization,Accept-Encoding"], "Access-Control-Allow-Origin": ["*"], "X-Fastly-Request-ID": ["3c8e6901977b0d8cc5c075b581c11dc4db44c914"], "Expires": ["Tue, 09 May 2017 15:52:56 GMT"], "Source-Age": ["0"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/codeix/bst.pygasus.core/master/CHANGES.rst"}, "recorded_at": "2017-05-09T15:47:56"}], "recorded_with": "betamax/0.8.0"}