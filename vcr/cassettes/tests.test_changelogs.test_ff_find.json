{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/ff-find/json"}, "response": {"body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": null, \n        \"docs_url\": null, \n        \"requires_python\": null, \n        \"maintainer_email\": null, \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"search,find,filesystem,files,directories\", \n        \"package_url\": \"http://pypi.python.org/pypi/ff-find\", \n        \"author\": \"Marcin Sztolcman\", \n        \"author_email\": \"marcin@urzenia.net\", \n        \"download_url\": null, \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"1.0.5\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"ff\\n==\\n\\nEasily search and process files.\\n\\nIf you need to search files by their contents, *or* search for their\\ncontents, please look at `ack <https://github.com/petdance/ack2>`__ or\\n`pss <https://github.com/eliben/pss>`__. These are better suited for\\nthis kind of task.\\n\\nCurrent stable version\\n----------------------\\n\\n1.0.5\\n\\nWhy ``ff`` and not ``find``?\\n----------------------------\\n\\nJust because I find that most of my searches was:\\n\\n::\\n\\n    find . -iname '*name*'\\n\\nAnd it's easier to me to enter:\\n\\n::\\n\\n    ff name\\n\\nAlso, my ``find`` have sometimes problems with non ascii names:\\n\\n::\\n\\n    % find /tmp -name '*G\\u00d6S*'\\n    % \\n\\nAnd with ``ff``:\\n\\n::\\n\\n    % ff '*G\\u00d6S*' /tmp\\n    /tmp/eee_G\\u00d6S_fr\\u00e5n_f\\u00f6rst\\u00e5r_pas\\n    /tmp/eee_G\\u00d6S_fr\\u00e5n_pas_f\\u00f6rst\\u00e5r_qq\\n    /tmp/pas_G\\u00d6S_fr\\u00e5n_f\\u00f6rst\\u00e5r\\n    %\\n\\nit just works! :)\\n\\nBasic usage\\n-----------\\n\\n::\\n\\n    ff passwd\\n\\nSearch for all files and directories in current directory and below,\\nwhich is match to pattern: ``*passwd*``.\\n\\n::\\n\\n    ff -B passwd\\n\\nSearch for all files and directories in current directory and below,\\nwhich is match to pattern: ``*passwd``.\\n\\n::\\n\\n    ff -E passwd\\n\\nSearch for all files and directories in current directory and below,\\nwhich is match to pattern: ``passwd*``.\\n\\n::\\n\\n    ff -EB passwd\\n\\nAdvanced usage\\n--------------\\n\\n::\\n\\n    ff -p pa -s /tmp --shell-exec -x '[ -f \\\"{path}\\\" ] && mkdir -p /tmp{dirname}; cp -r \\\"{path}\\\" \\\"/tmp{path}\\\"'\\n\\nFind all files and directories in /tmp that match expression: ``*pa*``,\\nand copy them (with original directories hierarchy!) to /tmp.\\n\\nSo powerful!\\n\\nMagic pattern\\n-------------\\n\\nIt's form of pattern known good for Perl or AWK lovers :)\\n\\nIf patterns is in general form:\\n\\n::\\n\\n    mode/pattern/modifier\\n\\n(decribed more in full usage below), then it is parsed and used in a\\nlittle other manner.\\n\\nInstead of arguments ``--regexp`` or ``--fuzzy``, you can pass it in\\n``mode`` part of pattern. Next there is delimiter, which usually is\\n``/`` (backslash), but there can be more characters, described in Usage\\nsection.\\n\\nAfter that is a pattern, next delimiter again, and then modifiers\\n(again, modifiers are described in Usage section).\\n\\nSome examples:\\n\\nSearch for all files and directories in current directory and below,\\nwhich is match to pattern: ``passwd``.\\n\\n::\\n\\n    ff f/pwd/\\n\\nSearch for all files and directories in current directory and below,\\nwhich name contains letters 'p', 'w', 'd', with any other characters\\nbetween them.\\n\\n::\\n\\n    ff g/^(chk)?passwd/\\n\\nSearch for all files and directories in current directory and below,\\nwhich name starts from 'chkpasswd' or 'passwd'.\\n\\nConfiguration file\\n------------------\\n\\n``ff`` recognizes 2 configuration files: user-wide and project-wide.\\nBoth can specify the same things and have identical syntax (ini files).\\nUser-wide one is located in ``$HOME/.ff.rc``, and project-wide is\\nlocated in current directory (ie. projects root). Example file is\\nlocated at (github)[https://github.com/mysz/ff/blob/master/ff.rc].\\n\\nPlugins\\n-------\\n\\nPlugins are the way to easily extend capabilities of ``ff``. Currently\\nthere is only support for plugins allowing to extend tests made on files\\nlist. In future, there is plan to add support for plugins allowing to\\nmake some actions on found files (currently is *built-in plugin*:\\n``--shell``), for example modifying, copying or anything else).\\n\\n``ff`` search for plugins in user's home directory, but there is\\nposibility to tell him about the other.. By default, ``ff`` search for\\nplugins in:\\n\\n-  ``~/.ff/plugins``\\n\\nAnd using switch ``--plugins-path`` you can tell ``ff`` about other\\nplugins location.\\n\\nYou can also pass argument to plugins. For example, in ``size`` plugin\\n(bundled with ``ff``), You must to tell the plugin what size of file You\\nexpect:\\n\\n::\\n\\n    `ff pas --test size:=5k`\\n\\nAbove example will find every file with *pas* part in its name, and its\\nsize is *exactly* 5\\n`kibibytes <http://en.wikipedia.org/wiki/Binary_prefix#IEC_standard_prefixes>`__.\\nMore about ``size`` plugin in `projects\\nwiki <https://github.com/mysz/ff/wiki/>`__.\\n\\nWriting plugins\\n---------------\\n\\nPlugins are written in `Python <http://python.org>`__, and are simple\\nPython modules with at least ``plugin_action`` callable specified.\\nPlugins are imported, and ``plugin_action`` must return ``True`` or\\n``False`` to tell ``ff`` that given found object meets expectations, and\\nshould be returned.\\n\\n``ff`` recognize and use only 3 objects in plugin:\\n\\n-  ``plugin_action`` - (REQUIRED) [callable] must return ``True`` od\\n   ``False``. Must recognize 3 arguments:\\n\\n   -  ``name`` - name of plugin\\n   -  ``argument`` - argument passed by user\\n   -  ``path`` - absolute path to tested object\\n\\n-  ``PLUGIN_DESCR`` - (OPTIONAL) [string or callable] short descr of\\n   plugin, printed when ``ff`` is called with switch\\n   ``--help-test-plugins``\\n-  ``PLUGIN_HELP`` - (OPTIONAL) [string or callable] full help for\\n   plugin, printed when ``ff`` is called with switch\\n   ``--help-test-plugins TEST_NAME``\\n\\nPlugin file also must have special name, and be placed in directory\\nrecognized by ``ff`` (see: [plugins][plugins]). Name of file is built\\nwith three parts, connected with underscore: \\\\* ``ffplugin`` - fixed\\nprefix \\\\* ``test`` - type of plugin (currently only ``test`` plugins are\\nrecignized) \\\\* ``NAME`` - name of plugin\\n\\nAnd as Python module, must and with ``.py`` extension :)\\n\\nPlugin must validate input data (``argument``), and raise\\n``FFPluginError`` exception with approbiate message on any error. Plugin\\nshouldn't raise any other exceptions. There is one caveat with this:\\n``FFPluginError`` exception is declared *inside* ``ff``! When given\\nplugin is imported, it is *monkeypatched* and ``FFPluginError``\\nexception is injected into it.\\n\\nThere is an example plugin, which allow us to search for files in\\nspecified size. Is in `project\\nrepository <https://github.com/mysz/ff/tree/master/ff_plugins>`__ in\\ndirectory plugins. You can use it as a base for your own plugins :)\\n\\nInstallation\\n------------\\n\\n``ff`` should work on any platform where `Python <http://python.org>`__\\nis available, it means Linux, Windows, MacOS X etc. There is no\\ndependencies, plain Python power :)\\n\\nTo install, you can use ``pip``:\\n\\n::\\n\\n    pip install ff\\n\\nVoila!\\n\\nUsage\\n-----\\n\\n::\\n\\n    usage: ff [-h] [--print0] [--ignorecase] [--source source] [--pattern PATTERN]\\n              [--regexp] [--fuzzy] [--depth DEPTH] [--path-search]\\n              [--regex-multiline] [--regex-dotall] [--begin] [--end]\\n              [--invert-match] [--mode MODE] [--exec COMMAND] [--prefix]\\n              [--prefix-dirs PREFIX_DIRS] [--prefix-files PREFIX_FILES]\\n              [--no-display] [--no-colorize] [--verbose-exec] [--interactive-exec]\\n              [--shell-exec] [--vcs] [--exclude-path EXCLUDED_PATH] [--test TESTS]\\n              [--plugins-path PLUGINS_PATH] [--version]\\n              [--help-test-plugins [TEST_NAME[,TEST2_NAME]]]\\n              [--show-plugins-paths]\\n              [pattern] [source [source ...]]\\n\\n    Easily search and process files.\\n\\n    positional arguments:\\n      pattern               pattern to search\\n      source                optional source (if missing, use current directory)\\n\\n    optional arguments:\\n      -h, --help            show this help message and exit\\n      --print0, -0          split results by binary zero instead of new line\\n                            (useful to work with xargs)\\n      --ignorecase, -i, --ignore-case\\n                            ignore case when match pattern to paths\\n      --source source, -s source\\n                            optional, see: source above\\n      --pattern PATTERN, -p PATTERN\\n                            optional, see: pattern above\\n      --regexp, -g          treat pattern as regular expression (uses Python\\n                            regexp engine)\\n      --fuzzy, -f           pattern defines only set and order of characters used\\n                            in filename\\n      --depth DEPTH, -D DEPTH\\n                            how deep we should search (default: -1, means\\n                            infinite)\\n      --path-search, -q     search in full path, instead of bare name of item\\n      --regex-multiline, -l\\n                            modify meta characters: \\\"^\\\" and \\\"$\\\" behaviour when\\n                            pattern is regular expression. See:\\n                            http://docs.python.org/2/library/re.html#re.MULTILINE\\n      --regex-dotall, -d    modify meta character: \\\".\\\" behaviour when pattern is\\n                            regular expression. See:\\n                            http://docs.python.org/2/library/re.html#re.DOTALL\\n      --begin, -B           match pattern to begin of item name (ignored in regexp\\n                            mode)\\n      --end, -E             match pattern to end of item name (ignored in regexp\\n                            mode)\\n      --invert-match, -v, -r\\n                            find objects that do *not* match pattern\\n      --mode MODE, -m MODE  allow to choose to search for \\\"files\\\" only, \\\"dirs\\\", or\\n                            \\\"all\\\"\\n      --exec COMMAND, -x COMMAND\\n                            execute some command on every found item. In command,\\n                            placeholders: {path}, {dirname}, {basename} are\\n                            replaced with correct value\\n      --prefix              add prefix \\\"dr: \\\" (directory) or \\\"fl: \\\" (file) to\\n                            every found item\\n      --prefix-dirs PREFIX_DIRS\\n                            prefix for matched directories\\n      --prefix-files PREFIX_FILES\\n                            prefix for matched files\\n      --no-display          don't display element (useful with --exec argument)\\n      --no-colorize         Colorize output\\n      --verbose-exec        show command before execute it\\n      --interactive-exec    ask before execute command on every item\\n      --shell-exec          execute command from --exec argument in shell (with\\n                            shell expansion etc)\\n      --vcs                 do not skip VCS directories (.git, .svn etc)\\n      --exclude-path EXCLUDED_PATH, -c EXCLUDED_PATH\\n                            skip given paths from scanning\\n      --test TESTS, -t TESTS\\n                            additional tests, available by plugins (see\\n                            annotations below or --help-test-plugins)\\n      --plugins-path PLUGINS_PATH\\n                            additional path where to search plugins (see\\n                            annotations below)\\n      --version             show program's version number and exit\\n      --help-test-plugins [TEST_NAME[,TEST2_NAME]]\\n                            display help for installed test plugins\\n      --show-plugins-paths  Show recognized plugins paths and exit\\n\\n    Pattern, provided as positional argument (not with --pattern) can be provided\\n    in special form (called: magic pattern). It allows to more \\\"nerdish\\\"\\n    (or \\\"perlish\\\" :) ) way to control `ff` behavior.\\n\\n    The general pattern for magic pattern is:\\n\\n        mode/pattern/modifier\\n\\n    where:\\n        mode - is one of 'p' (--pattern), 'g' - (--regexp) or 'f' (--fuzzy)\\n        / - is delimiter:\\n            * one of: '/', '!', '@', '#', '%', '|', and then start and end\\n                delimiter must be the same\\n            * one of: '{', '[', '(', '<', and the end delimiter must be the\\n                closing one (ex. '}' if start is '{')\\n        pattern - any pattern, processed in a way specified with 'mode'\\n        modifier - one of: 'i' (--ignore-case), 'm' (--regex-multiline),\\n            's' (--regex-dotall), 'v' (not used currently), 'r' (--invert-match)\\n\\n    There is also ability to extend capabilities of `ff` by plugins. Plugins are\\n    run with switch --test and then plugin name with optional plugin argument:\\n\\n        --test plugin_name:plugin_arg\\n\\n    There can be used more then one plugin at once.\\n\\n    Authors:\\n        Marcin Sztolcman <marcin@urzenia.net> // http://urzenia.net\\n\\n    HomePage:\\n        http://mysz.github.io/ff/\\n\\nAuthors\\n-------\\n\\nMarcin Sztolcman marcin@urzenia.net\\n\\nContact\\n-------\\n\\nIf you like or dislike this software, please do not hesitate to tell me\\nabout this me via email (marcin@urzenia.net).\\n\\nIf you find bug or have an idea to enhance this tool, please use\\nGitHub's `issues <https://github.com/mysz/ff/issues>`__.\\n\\nLicense\\n-------\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2013 Marcin Sztolcman\\n\\nPermission is hereby granted, free of charge, to any person obtaining a\\ncopy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\nChangeLog\\n---------\\n\\nv1.0.5\\n~~~~~~\\n\\n-  use README.rst for Pypi\\n\\nv1.0.4\\n~~~~~~\\n\\n-  fixes for Pypi\\n\\nv1.0.3\\n~~~~~~\\n\\n-  fixes for Pypi\\n\\nv1.0.2\\n~~~~~~\\n\\n-  fixes for Pypi\\n\\nv1.0.1\\n~~~~~~\\n\\n-  fixes for Pypi\\n\\nv1.0.0\\n~~~~~~\\n\\n-  backward incompatible: magic pattern doesn't recognize 'q' flag for\\n   'path-search' mode, flag --path-search must be passed explicitly\\n-  new option: --depth - limit searching to this depth\\n-  new option: --colorize\\n-  new: parse and recognize configuration files\\n-  new: added ability to install via pip\\n-  changed versioning format: use `SemVer <http://semver.org/>`__\\n-  code cleanups and many refactorizations/rewrites\\n-  paths are now normalized before comparisons of excluded paths\\n-  parse regexps with UNICODE flag\\n-  '?' and '+' are now valid delimiters in magic pattern\\n-  ignore case of --mode option\\n-  documentation improvements\\n-  more tests\\n-  improved fuzzy search\\n-  better validation of arguments\\n-  improved error messages\\n-  improved help\\n-  better interoperability: do not hardcode new line characters or path\\n   delimiters\\n-  do not allow for duplicating modifiers\\n-  FIX: do not crash on unknown characters, just replace them\\n-  FIX: do not crash on printing unknown characters\\n-  added simple Makefile\\n-  improved config for pylint\\n-  added config for `versionner <http://mysz.github.io/versionner>`__\\n\\nv0.5\\n~~~~\\n\\n-  ability to run plugins for tests (with first plugin: size)\\n-  many improvements to proper handling UTF-8\\n-  many improvements for work in Python3\\n-  improved PEP8 compatibility\\n-  refactored code\\n-  added --version switch\\n-  removed expanding shell variables when execute external command if no\\n   --shell-exec is given\\n\\nv.0.4\\n~~~~~\\n\\n-  added changelog\\n-  added fuzzy-search mode\\n-  added 'magic pattern' mode\\n-  -r argument is now an alias to -v\\n-  better handling unicode characters in paths\\n-  handling CTRL-C\\n-  added modifier: --path-search\\n\\nv0.3\\n~~~~\\n\\n-  use argparse instead of getopt to parse options\\n-  allow to exclude path from search\\n-  improved help and documentation\\n\\nv0.2\\n~~~~\\n\\n-  added option 'shell-exec' - allow to exec programs with shell\\n   expansion\\n-  exec: add shell variables expansion\\n-  by default, skip VCS directories\\n-  added option 'print0' - delimit entries with binary 0, as for xargs\\n-  added options 'interactive-exec' - ask before every exec\\n-  much more powerfull exec engine\\n-  added option 'no-display' - do not display results (useful with\\n   --exec)\\n-  added option 'verbose-exec' - show executed command\\n-  added option 'invert-match' - like in grep\\n-  improved help and documentation\\n-  cleanups in code\\n\\nv0.1\\n~~~~\\n\\n-  initial version\", \n        \"release_url\": \"http://pypi.python.org/pypi/ff-find/1.0.5\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 4, \n        \"requires_dist\": [\n            \"argparse\", \n            \"tmcolors (==0.1.1)\"\n        ], \n        \"classifiers\": [\n            \"Development Status :: 5 - Production/Stable\", \n            \"Environment :: Console\", \n            \"Intended Audience :: Developers\", \n            \"Intended Audience :: System Administrators\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Topic :: Software Development\", \n            \"Topic :: System\", \n            \"Topic :: Utilities\"\n        ], \n        \"name\": \"ff-find\", \n        \"bugtrack_url\": null, \n        \"license\": \"MIT\", \n        \"summary\": \"Easily search and process files by names.\", \n        \"home_page\": \"http://mysz.github.io/ff/\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"1.0.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:28:35\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/1a/2f/e75fa2eb6f8e4be9a443a10144a8b8ecd31fed31e3763bcb2cf47db1355a/ff-find-1.0.4.tar.gz\", \n                \"md5_digest\": \"916e33d614c743ee5b3f9d8e9239f207\", \n                \"downloads\": 2630, \n                \"filename\": \"ff-find-1.0.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"1a/2f/e75fa2eb6f8e4be9a443a10144a8b8ecd31fed31e3763bcb2cf47db1355a/ff-find-1.0.4.tar.gz\", \n                \"size\": 31517\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:28:32\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/6d/bb/875cf5c5d7e1f88a218d0887d3464d6e0d48f2c9b07aa400f38750c545c0/ff_find-1.0.4-py2.py3-none-any.whl\", \n                \"md5_digest\": \"03c151e8a8588fc0f6257fc22d96bb57\", \n                \"downloads\": 880, \n                \"filename\": \"ff_find-1.0.4-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6d/bb/875cf5c5d7e1f88a218d0887d3464d6e0d48f2c9b07aa400f38750c545c0/ff_find-1.0.4-py2.py3-none-any.whl\", \n                \"size\": 30422\n            }\n        ], \n        \"1.0.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:31:43\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/6d/d2/0d7b4f4c407ccd2f2070d3fb150082e56cb0a4240513e5e9cd485beb91f7/ff-find-1.0.5.tar.gz\", \n                \"md5_digest\": \"67c40a96595c089df3bf661e07e0a6ab\", \n                \"downloads\": 1030, \n                \"filename\": \"ff-find-1.0.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"6d/d2/0d7b4f4c407ccd2f2070d3fb150082e56cb0a4240513e5e9cd485beb91f7/ff-find-1.0.5.tar.gz\", \n                \"size\": 31253\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:31:39\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/f9/e6/3fcb4e900fb8be7cfe56d5fd38e0f35822029897b426b18aaf5acecc731b/ff_find-1.0.5-py2.py3-none-any.whl\", \n                \"md5_digest\": \"35ddcd900378c66822e4575d683bd652\", \n                \"downloads\": 935, \n                \"filename\": \"ff_find-1.0.5-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"f9/e6/3fcb4e900fb8be7cfe56d5fd38e0f35822029897b426b18aaf5acecc731b/ff_find-1.0.5-py2.py3-none-any.whl\", \n                \"size\": 30680\n            }\n        ], \n        \"0.5.1\": [], \n        \"1.0.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:21:01\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/b8/93/7e3cc2940fef99795b377591a6f662ee58eca72e493fcf4a65439379a007/ff-find-1.0.2.tar.gz\", \n                \"md5_digest\": \"2f340ea2857f97b93d535bbd7fccecd4\", \n                \"downloads\": 880, \n                \"filename\": \"ff-find-1.0.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"b8/93/7e3cc2940fef99795b377591a6f662ee58eca72e493fcf4a65439379a007/ff-find-1.0.2.tar.gz\", \n                \"size\": 37066\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:20:57\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/30/10/243d7e00f372648e2c8930bb631a01c966f4858856d83a35a13617a149ae/ff_find-1.0.2-py2.py3-none-any.whl\", \n                \"md5_digest\": \"5e1664b98fe929bb9d90fa8731aa50b0\", \n                \"downloads\": 880, \n                \"filename\": \"ff_find-1.0.2-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"30/10/243d7e00f372648e2c8930bb631a01c966f4858856d83a35a13617a149ae/ff_find-1.0.2-py2.py3-none-any.whl\", \n                \"size\": 32013\n            }\n        ], \n        \"1.0.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:25:43\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/28/e4/fdac2e45d9c3a2536ac6f353ccafd9aa3f3c79cff091f96de0d14cdcfd52/ff-find-1.0.3.tar.gz\", \n                \"md5_digest\": \"920ebfd82fa7008a9aaa0d580a52de86\", \n                \"downloads\": 886, \n                \"filename\": \"ff-find-1.0.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"28/e4/fdac2e45d9c3a2536ac6f353ccafd9aa3f3c79cff091f96de0d14cdcfd52/ff-find-1.0.3.tar.gz\", \n                \"size\": 31560\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-06-03T22:25:39\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/f3/82/8a7836b5880453a5171997401c633af328956c00988cdbc6ea9313be327f/ff_find-1.0.3-py2.py3-none-any.whl\", \n                \"md5_digest\": \"a2cfe1a73fe2304f8732a2b4f5c90cac\", \n                \"downloads\": 857, \n                \"filename\": \"ff_find-1.0.3-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"f3/82/8a7836b5880453a5171997401c633af328956c00988cdbc6ea9313be327f/ff_find-1.0.3-py2.py3-none-any.whl\", \n                \"size\": 31542\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2015-06-03T22:31:43\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/6d/d2/0d7b4f4c407ccd2f2070d3fb150082e56cb0a4240513e5e9cd485beb91f7/ff-find-1.0.5.tar.gz\", \n            \"md5_digest\": \"67c40a96595c089df3bf661e07e0a6ab\", \n            \"downloads\": 1030, \n            \"filename\": \"ff-find-1.0.5.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"6d/d2/0d7b4f4c407ccd2f2070d3fb150082e56cb0a4240513e5e9cd485beb91f7/ff-find-1.0.5.tar.gz\", \n            \"size\": 31253\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2015-06-03T22:31:39\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2.py3\", \n            \"url\": \"https://pypi.python.org/packages/f9/e6/3fcb4e900fb8be7cfe56d5fd38e0f35822029897b426b18aaf5acecc731b/ff_find-1.0.5-py2.py3-none-any.whl\", \n            \"md5_digest\": \"35ddcd900378c66822e4575d683bd652\", \n            \"downloads\": 935, \n            \"filename\": \"ff_find-1.0.5-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"f9/e6/3fcb4e900fb8be7cfe56d5fd38e0f35822029897b426b18aaf5acecc731b/ff_find-1.0.5-py2.py3-none-any.whl\", \n            \"size\": 30680\n        }\n    ]\n}"}, "headers": {"Server": ["nginx/1.10.3"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Disposition": ["inline"], "X-PYPI-LAST-SERIAL": ["2863127"], "Cache-Control": ["max-age=600, public"], "Access-Control-Allow-Origin": ["*"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["4929655841f928c49f21e0274a1f830ba563e052df3df318356e95a94f0ab5f7"], "Content-Length": ["25785"], "Accept-Ranges": ["bytes"], "Date": ["Wed, 10 May 2017 07:08:11 GMT"], "Age": ["23943"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2135-IAD, cache-hhn1524-HHN"], "X-Cache": ["HIT, MISS"], "X-Cache-Hits": ["1, 0"], "X-Timer": ["S1494400092.766482,VS0,VE89"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/ff-find/json"}, "recorded_at": "2017-05-10T07:08:11"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://github.com/mysz/ff"}, "response": {"body": {"encoding": "utf-8", "string": "<html><body>You are being <a href=\"https://github.com/msztolcman/ff\">redirected</a>.</body></html>"}, "headers": {"Server": ["GitHub.com"], "Date": ["Wed, 10 May 2017 07:08:12 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["301 Moved Permanently"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "Location": ["https://github.com/msztolcman/ff"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEifQ%3D%3D--6612eea06ffc283dcb22f731ab4d08fe9b6d242b; path=/; secure; HttpOnly"], "X-Request-Id": ["9a287a67388a71d3c38f65ef9908ee5c"], "X-Runtime": ["0.012163"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["76f8aa18dab86a06db6e70a0421dc28c"], "X-GitHub-Request-Id": ["C2D0:1C715:643407D:9472F7F:5912BC5C"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://github.com/mysz/ff"}, "recorded_at": "2017-05-10T07:08:12"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEifQ%3D%3D--6612eea06ffc283dcb22f731ab4d08fe9b6d242b"]}, "method": "GET", "uri": "https://github.com/msztolcman/ff"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Wed, 10 May 2017 07:08:12 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Sun, 10 May 2037 07:08:12 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEiLCJzcHlfcmVwbyI6Im1zenRvbGNtYW4vZmYiLCJzcHlfcmVwb19hdCI6MTQ5NDQwMDA5MiwiX2NzcmZfdG9rZW4iOiJSZkpyNDIxK2R5MExwNWJYVVF6QUFRVFpUSWMrUitSL21IbGhCTlkxQnRvPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--3215a799e186792255e4202ea5cdadce8dc6c487; path=/; secure; HttpOnly"], "X-Request-Id": ["db43e2874e2bb17d9157ff3138aad7da"], "X-Runtime": ["0.141986"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["ea1e1d06ad877450adf08d122b863cf0"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["C2D0:1C715:6434095:9472FA7:5912BC5C"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/msztolcman/ff"}, "recorded_at": "2017-05-10T07:08:12"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEiLCJzcHlfcmVwbyI6Im1zenRvbGNtYW4vZmYiLCJzcHlfcmVwb19hdCI6MTQ5NDQwMDA5MiwiX2NzcmZfdG9rZW4iOiJSZkpyNDIxK2R5MExwNWJYVVF6QUFRVFpUSWMrUitSL21IbGhCTlkxQnRvPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--3215a799e186792255e4202ea5cdadce8dc6c487"]}, "method": "GET", "uri": "https://github.com/eliben/pss"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Wed, 10 May 2017 07:08:13 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEiLCJzcHlfcmVwbyI6ImVsaWJlbi9wc3MiLCJzcHlfcmVwb19hdCI6MTQ5NDQwMDA5MiwiX2NzcmZfdG9rZW4iOiJSZkpyNDIxK2R5MExwNWJYVVF6QUFRVFpUSWMrUitSL21IbGhCTlkxQnRvPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--bddb05888ce7f92093c71036fd16e381fe0cbc66; path=/; secure; HttpOnly"], "X-Request-Id": ["53d723eb4b8b7107cbbfbb5cbc20ec2d"], "X-Runtime": ["0.169707"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["C2D0:1C715:64340E5:9472FEA:5912BC5C"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/eliben/pss"}, "recorded_at": "2017-05-10T07:08:13"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEiLCJzcHlfcmVwbyI6ImVsaWJlbi9wc3MiLCJzcHlfcmVwb19hdCI6MTQ5NDQwMDA5MiwiX2NzcmZfdG9rZW4iOiJSZkpyNDIxK2R5MExwNWJYVVF6QUFRVFpUSWMrUitSL21IbGhCTlkxQnRvPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--bddb05888ce7f92093c71036fd16e381fe0cbc66"]}, "method": "GET", "uri": "https://github.com/petdance/ack2"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Wed, 10 May 2017 07:08:13 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiZDE3MWUxOTExZDhlZWNkZmYzMjhiZjJlOTk1Mzk1NjEiLCJzcHlfcmVwbyI6InBldGRhbmNlL2FjazIiLCJzcHlfcmVwb19hdCI6MTQ5NDQwMDA5MywiX2NzcmZfdG9rZW4iOiJSZkpyNDIxK2R5MExwNWJYVVF6QUFRVFpUSWMrUitSL21IbGhCTlkxQnRvPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--9823893d8f51bcd21a69419980485c5d20739bd6; path=/; secure; HttpOnly"], "X-Request-Id": ["6ead93c72516bdb8cfcef2b8530fd5d0"], "X-Runtime": ["0.185540"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["b26767d88b31b8e1e88f61422786ec5e"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["C2D0:1C715:6434117:947304E:5912BC5D"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/petdance/ack2"}, "recorded_at": "2017-05-10T07:08:13"}], "recorded_with": "betamax/0.8.0"}