{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/kinto_http/json"}, "response": {"body": {"encoding": null, "string": ""}, "headers": {"Server": ["nginx/1.10.3"], "Location": ["/pypi/kinto-http/json"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["250b5d40743ef3e620775ffc937541783e22e4f8c0fae8b10411c3846e3fb2f2"], "Content-Length": ["0"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:50:09 GMT"], "Age": ["0"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2130-IAD, cache-hhn1529-HHN"], "X-Cache": ["MISS, MISS"], "X-Cache-Hits": ["0, 0"], "X-Timer": ["S1494345010.507322,VS0,VE108"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/kinto_http/json"}, "recorded_at": "2017-05-09T15:50:09"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/kinto-http/json"}, "response": {"body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"web services\", \n        \"package_url\": \"http://pypi.python.org/pypi/kinto-http\", \n        \"author\": \"Mozilla Services\", \n        \"author_email\": \"storage@mozilla.com\", \n        \"download_url\": \"\", \n        \"platform\": \"\", \n        \"version\": \"7.2.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"Kinto python client\\n###################\\n\\n.. image:: https://img.shields.io/travis/Kinto/kinto-http.py.svg\\n        :target: https://travis-ci.org/Kinto/kinto-http.py\\n\\n.. image:: https://img.shields.io/pypi/v/kinto-http.svg\\n        :target: https://pypi.python.org/pypi/kinto-http\\n\\n.. image:: https://coveralls.io/repos/Kinto/kinto-http.py/badge.svg?branch=master\\n        :target: https://coveralls.io/r/Kinto/kinto-http.py\\n\\n\\nKinto is a service that allows users to store and synchronize arbitrary data,\\nattached to a user account. Its primary interface is HTTP.\\n\\n*kinto-http* is a Python library that eases the interactions with\\na *Kinto* server instance. `A project with related goals is\\nalso available for JavaScript <https://github.com/kinto/kinto-http.js>`_.\\n\\n\\nInstallation\\n============\\n\\nUse pip::\\n\\n  $ pip install kinto-http\\n\\n\\nUsage\\n=====\\n\\n.. note::\\n\\n    Operations are always performed directly on the server, and no\\n    synchronisation features have been implemented yet.\\n\\n- The first version of this API doesn't cache any access nor provides any\\n  refresh mechanism. If you want to be sure you have the latest data available,\\n  issue another call.\\n\\nHere is an overview of what the API provides:\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n\\n    client = Client(server_url=\\\"http://localhost:8888/v1\\\",\\n                    auth=('alexis', 'p4ssw0rd'))\\n\\n    records = client.get_records(bucket='default', collection='todos')\\n    for i, record in enumerate(records):\\n        record['title'] = 'Todo #%d' %i\\n\\n    for record in records:\\n        client.update_record(record)\\n\\nCreating a client\\n-----------------\\n\\nThe passed `auth` parameter is a `requests <http://docs.python-requests.org>`_\\nauthentication policy, allowing authenticating using whatever scheme fits you\\nbest.\\n\\nBy default, Kinto supports\\n`Firefox Accounts <https://wiki.mozilla.org/Identity/Firefox_Accounts>`_ and\\nBasic authentication policies.\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n    credentials = ('alexis', 'p4ssw0rd')\\n\\n    client = Client(server_url='http://localhost:8888/v1',\\n                    auth=credentials)\\n\\nIt is also possible to pass the bucket and the collection to the client\\nat creation time, so that this value will be used by default.\\n\\n.. code-block:: python\\n\\n    auth = (\\\"token\\\", \\\"secret\\\")\\n    client = Client(bucket=\\\"payments\\\", collection=\\\"receipts\\\", auth=auth)\\n\\nAfter creating a client, you can also replicate an existing one and overwrite\\nsome key arguments.\\n\\n.. code-block:: python\\n\\n    client2 = client.clone(collection=\\\"orders\\\")\\n\\nUsing FxA from a script with the email/password\\n-----------------------------------------------\\n\\n.. code-block:: python\\n\\n    from fxa.plugins.requests import FxABearerTokenAuth\\n\\n    auth = FxABearerTokenAuth(\\n        email, passwd,\\n        scopes=['kinto'],\\n        client_id=\\\"<FXA-CLIENT-ID>\\\",\\n        account_server_url='https://api.accounts.firefox.com/v1',\\n        oauth_server_url='https://oauth.accounts.firefox.com/v1',\\n    )\\n    client = Client(bucket=\\\"payments\\\", collection=\\\"receipts\\\", auth=auth)\\n\\n\\nGetting server information\\n--------------------------\\n\\nYou can use the ``server_info`` method to get the server information:\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n\\n    client = Client(server_url='http://localhost:8888/v1')\\n    info = client.server_info()\\n    assert 'schema' in info['capabilities'], \\\"Server doesn't support schema validation.\\\"\\n\\n\\nHandling buckets\\n----------------\\n\\nAll operations are rooted in a bucket. It makes little sense for\\none application to handle multiple buckets at once (but it is possible).\\nIf no specific bucket name is provided, the \\\"default\\\" bucket is used.\\n\\n.. code-block:: python\\n\\n    from kinto_http import Client\\n    credentials = ('alexis', 'p4ssw0rd')\\n\\n    client = Client(server_url='http://localhost:8888/v1',\\n                    auth=credentials)\\n\\n    # To create a bucket.\\n    client.create_bucket('payments')\\n\\n    # To get an existing bucket \\n    bucket = client.get_bucket('payments')\\n\\n    # Or retrieve all readable buckets.\\n    buckets = client.get_buckets()\\n\\n    # To create or replace an existing bucket.\\n    client.update_bucket('payments', data={'description': 'My payments data.'})\\n\\n    # Or modify some fields in an existing bucket.\\n    client.patch_bucket('payments', data={'status': 'updated'})\\n\\n    # It is also possible to manipulate bucket permissions (see later)\\n    client.patch_bucket('payments', permissions={})\\n\\n    # Or delete a bucket and everything under.\\n    client.delete_bucket('payment')\\n\\n    # Or even every writable buckets.\\n    client.delete_buckets()\\n\\n\\nGroups\\n------\\n\\nA group associates a name to a list of principals. It is useful in order to handle permissions. \\n\\n.. code-block:: python\\n\\n    # To create a group.\\n    client.create_group('receipts', bucket='payments', data={'members': ['blah', 'foo']})\\n\\n    # Or get an existing one.\\n    group = client.get_group('receipts', bucket='payments')\\n\\n    # Or retrieve all groups in the bucket.\\n    groups = client.get_groups(bucket='payments')\\n\\n    # To create or replace an existing bucket.\\n    client.update_group('receipts', bucket='payments', data={'members': ['foo']})\\n\\n    # Or modify some fields in an existing group.\\n    client.patch_group('receipts', bucket='payments', data={'description': 'my group'})\\n\\n    # To delete an existing group.\\n    client.delete_group('receipts', bucket='payments')\\n\\n    # Or all groups in a bucket.\\n    client.delete_groups(bucket='payments')\\n\\n\\nCollections\\n-----------\\n\\nA collection is where records are stored.\\n\\n.. code-block:: python\\n\\n    # To create a collection.\\n    client.create_collection('receipts', bucket='payments')\\n\\n    # Or get an existing one.\\n    collection = client.get_collection('receipts', bucket='payments')\\n\\n    # Or retrieve all of them inside a bucket.\\n    collections = client.get_collections(bucket='payments')\\n\\n    # To create or replace an exiting collection.\\n    client.update_collection(bucket='payments', data={'description':'bleeh'})\\n\\n    # Or modify some fields of an existing collection.\\n    client.patch_collection(bucket='payments', data={'status':'updated'})\\n\\n    # To delete an existing collection.\\n    client.delete_collection('receipts', bucket='payments')\\n\\n    # Or every collections in a bucket.\\n    client.delete_collections(bucket='payments')\\n\\n\\nRecords\\n-------\\n\\nRecords can be retrieved from and saved to collections.\\n\\nA record is a dict with the \\\"permissions\\\" and \\\"data\\\" keys.\\n\\n.. code-block:: python\\n\\n    # You can pass a python dictionary to create the record.\\n    client.create_record(data={'status': 'done', title: 'Todo #1'},\\n                         collection='todos', bucket='default')\\n\\n    # You can use id to specify the record id when creating it.\\n    client.create_record(id='todo2', data={'status': 'doing', 'title': 'Todo #2'},\\n                         collection='todos', bucket='default')\\n\\n    # Or get an existing one by its id.\\n    record = client.get_record('todo2', collection='todos', bucket='default')\\n\\n    # Or retrieve all records.\\n    records = client.get_records(collection='todos', bucket='default')\\n\\n    # Or retrieve records timestamp.\\n    records_timestamp = client.get_records_timestamp(collection='todos', bucket='default')\\n\\n    # To replace a record using a previously fetched record\\n    client.update_record(record, collection='todos', bucket='default')\\n\\n    # Or create or replace it by its id.\\n    client.update_record({'status': 'unknown'}, id='todo2', collection='todos', bucket='default')\\n\\n    # Or modify some fields in an existing record.\\n    client.patch_record({'assignee': 'bob'}, id='todo2', collection='todos', bucket='default')\\n\\n    # Or update multiple records at once.\\n    client.update_records(records, collection='todos')\\n\\n    # To delete an existing record.\\n    client.delete_record(id='89881454-e4e9-4ef0-99a9-404d95900352',\\n                         collection='todos')\\n\\n    # Or every records of a collection.\\n    client.delete_records(collection='todos')\\n\\n\\nPermissions\\n-----------\\n\\n By default, authors will get read and write access to the manipulated objects.\\n It is possible to change this behavior by passing a dict to the `permissions`\\n parameter.\\n\\n .. code-block:: python\\n\\n    client.create_record(\\n        data={'foo': 'bar'},\\n        permissions={'read': ['group:groupid']},\\n        collection='todos')\\n\\n.. note::\\n\\n    Every creation or modification operation on a distant object can be given\\n    a `permissions` parameter.\\n\\nBuckets, collections and records have permissions which can be edited.\\nFor instance to give access to \\\"leplatrem\\\" to a specific record, you would do:\\n\\n.. code-block:: python\\n\\n  record = client.get_record(1234, collection='todos', bucket='alexis')\\n  record['permissions']['write'].append('leplatrem')\\n  client.update_record(record)\\n\\n  # During creation, it is possible to pass the permissions dict.\\n  client.create_record(data={'foo': 'bar'}, permissions={})\\n\\nGet or create\\n-------------\\n\\nIn some cases, you might want to create a bucket, collection, group or record only if\\nit doesn't exist already. To do so, you can pass the ``if_not_exists=True``\\nto the ``create_*`` methods::\\n\\n  client.create_bucket('bucket', if_not_exists=True)\\n\\nDelete\\n------\\n\\nIn some cases, you might want to delete a bucket, collection, group or record only if\\nit exists already. To do so, you can pass the ``if_exists=True``\\nto the ``delete_*`` methods::\\n\\n  client.delete_bucket('bucket', if_exists=True)\\n\\nOverwriting existing objects\\n----------------------------\\n\\nMost of the methods take a ``safe`` argument, which defaults to ``True``. If set\\nto ``True`` and a ``last_modified`` field is present in the passed ``data``,\\nor if the ``if_match`` parameter is specified then a\\ncheck will be added to the requests to ensure the record wasn't modified on\\nthe server side in the meantime.\\n\\nBatching operations\\n-------------------\\n\\nRather than issuing a request for each and every operation, it is possible to\\nbatch the requests. The client will then issue as little requests as possible.\\n\\nCurrently, batching operations only supports write operations, so it is not\\npossible to do the retrieval of information inside a batch.\\n\\nIt is possible to do batch requests using a Python context manager (``with``):\\n\\n.. code-block:: python\\n\\n  with client.batch() as batch:\\n      for idx in range(0,100):\\n          batch.update_record(data={'id': idx})\\n\\nA batch object shares the same methods as another client.\\n\\nRetry on error\\n--------------\\n\\nWhen the server is throttled (under heavy load or maintenance) it can\\nreturn error responses.\\n\\nThe client can hence retry to send the same request until it succeeds.\\nTo enable this, specify the number of retries on the client:\\n\\n.. code-block:: python\\n\\n  client = Client(server_url='http://localhost:8888/v1',\\n                  auth=credentials,\\n                  retry=10)\\n\\nThe Kinto protocol lets the server `define the duration in seconds between retries\\n<https://kinto.readthedocs.io/en/latest/api/1.x/backoff.html>`_.\\nIt is possible (but not recommended) to force this value in the clients:\\n\\n.. code-block:: python\\n\\n  client = Client(server_url='http://localhost:8888/v1',\\n                  auth=credentials,\\n                  retry=10,\\n                  retry_after=5)\\n\\n\\nGenerating endpoint paths\\n-------------------------\\n\\nYou may want to generate some endpoint paths, you can use the\\nget_endpoint utility to do so:\\n\\n.. code-block:: python\\n\\n    client = Client(server_url='http://localhost:8888/v1',\\n                    auth=('token', 'your-token'),\\n                    bucket=\\\"payments\\\",\\n                    collection=\\\"receipts\\\")\\n    print(client.get_endpoint(\\\"record\\\",\\n                              id=\\\"c6894b2c-1856-11e6-9415-3c970ede22b0\\\"))\\n\\n    # '/buckets/payments/collections/receipts/records/c6894b2c-1856-11e6-9415-3c970ede22b0'\\n\\n\\nCommand-line scripts\\n--------------------\\n\\nIn order to have common arguments and options for scripts, some utilities are provided\\nto ease configuration and initialization of client from command-line arguments.\\n\\n.. code-block:: python\\n\\n  import argparse\\n  import logging\\n\\n  from kinto_http import cli_utils\\n\\n  logger = logging.getLogger(__name__)\\n\\n  if __name__ == \\\"__main__\\\":\\n      parser = argparse.ArgumentParser(description=\\\"Download records\\\")\\n      cli_utils.set_parser_server_options(parser)\\n\\n      args = parser.parse_args()\\n\\n      cli_utils.setup_logger(logger, args)\\n\\n      logger.debug(\\\"Instantiate Kinto client.\\\")\\n      client = cli_utils.create_client_from_args(args)\\n\\n      logger.info(\\\"Fetch records.\\\")\\n      records = client.get_records()\\n      logger.warn(\\\"%s records.\\\" % len(records))\\n\\nThe script now accepts basic options:\\n\\n::\\n\\n  $ python example.py --help\\n\\n  usage: example.py [-h] [-s SERVER] [-a AUTH] [-b BUCKET] [-c COLLECTION] [-v]\\n                    [-q] [-D]\\n\\n  Download records\\n\\n  optional arguments:\\n    -h, --help            show this help message and exit\\n    -s SERVER, --server SERVER\\n                          The location of the remote server (with prefix)\\n    -a AUTH, --auth AUTH  BasicAuth token:my-secret\\n    -b BUCKET, --bucket BUCKET\\n                          Bucket name.\\n    -c COLLECTION, --collection COLLECTION\\n                          Collection name.\\n    -v, --verbose         Show all messages.\\n    -q, --quiet           Show only critical errors.\\n    -D, --debug           Show all messages, including debug messages.\\n\\n\\nRun tests\\n=========\\n\\nIn one terminal, run a Kinto server:\\n\\n::\\n\\n    $ make runkinto\\n\\nIn another, run the tests against it:\\n\\n::\\n\\n    $ make tests\", \n        \"release_url\": \"http://pypi.python.org/pypi/kinto-http/7.2.0\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 5, \n        \"classifiers\": [\n            \"License :: OSI Approved :: Apache Software License\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Programming Language :: Python :: Implementation :: CPython\", \n            \"Topic :: Internet :: WWW/HTTP\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"kinto-http\", \n        \"license\": \"Apache License (2.0)\", \n        \"summary\": \"Kinto client\", \n        \"home_page\": \"https://github.com/Kinto/kinto-http.py/\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"6.2.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-08T09:58:30\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ed/cf/ffec089f266c2097da833b0afa5a99b71e54fdf36f587ed4bbb0d389633d/kinto-http-6.2.1.tar.gz\", \n                \"md5_digest\": \"2bccd8e2afe937eeee13c2da0bd32936\", \n                \"downloads\": 320, \n                \"filename\": \"kinto-http-6.2.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ed/cf/ffec089f266c2097da833b0afa5a99b71e54fdf36f587ed4bbb0d389633d/kinto-http-6.2.1.tar.gz\", \n                \"size\": 30393\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-08T09:58:28\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/6f/69/278b324c7fa57fc2c91df54d539936f7a8809e4b79a31c7ac05362127165/kinto_http-6.2.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"3b5f83d18015c3d4289ebc8d95273d01\", \n                \"downloads\": 251, \n                \"filename\": \"kinto_http-6.2.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6f/69/278b324c7fa57fc2c91df54d539936f7a8809e4b79a31c7ac05362127165/kinto_http-6.2.1-py2.py3-none-any.whl\", \n                \"size\": 33511\n            }\n        ], \n        \"7.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-30T12:12:11\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/30/90/32e15fc2587a3b71359b4da00fbb323ccd00d96d034cbedd4918e613bc6d/kinto-http-7.0.0.tar.gz\", \n                \"md5_digest\": \"240367c4b9214855790f413e4bc947c3\", \n                \"downloads\": 96, \n                \"filename\": \"kinto-http-7.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"30/90/32e15fc2587a3b71359b4da00fbb323ccd00d96d034cbedd4918e613bc6d/kinto-http-7.0.0.tar.gz\", \n                \"size\": 28317\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-30T12:12:08\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/ed/46/c6d13b6cf3ab7f98b2b169d7a63591a5ee85adcb3a24488e9df3f350d049/kinto_http-7.0.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"06d04e1edcded0a7a129409aff8db30f\", \n                \"downloads\": 753, \n                \"filename\": \"kinto_http-7.0.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"ed/46/c6d13b6cf3ab7f98b2b169d7a63591a5ee85adcb3a24488e9df3f350d049/kinto_http-7.0.0-py2.py3-none-any.whl\", \n                \"size\": 34421\n            }\n        ], \n        \"6.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-10T10:33:59\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/59/62/5fed0741ac447cf7c878cd9222b68e4d53d2ef343bca07f934132ab7d0b2/kinto-http-6.0.0.tar.gz\", \n                \"md5_digest\": \"5187cc8f6cfd0dd934d4263aee5bee0b\", \n                \"downloads\": 345, \n                \"filename\": \"kinto-http-6.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"59/62/5fed0741ac447cf7c878cd9222b68e4d53d2ef343bca07f934132ab7d0b2/kinto-http-6.0.0.tar.gz\", \n                \"size\": 29126\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-06-10T10:33:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/4f/26/3a272ef4c5cacc758ef133c0c5929a685633529bd722f969347bad9e8559/kinto_http-6.0.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"466928d0261c0ac05cc1daf5128efe7d\", \n                \"downloads\": 151, \n                \"filename\": \"kinto_http-6.0.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"4f/26/3a272ef4c5cacc758ef133c0c5929a685633529bd722f969347bad9e8559/kinto_http-6.0.0-py2.py3-none-any.whl\", \n                \"size\": 32394\n            }\n        ], \n        \"6.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-04T14:50:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/3e/3b/23fc30fae4065b5963856d65d71adb93ad9eefb3dceabb9315e7e59ee8d7/kinto-http-6.1.0.tar.gz\", \n                \"md5_digest\": \"4b80324dc7fc4abaef35e065b21a6681\", \n                \"downloads\": 293, \n                \"filename\": \"kinto-http-6.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"3e/3b/23fc30fae4065b5963856d65d71adb93ad9eefb3dceabb9315e7e59ee8d7/kinto-http-6.1.0.tar.gz\", \n                \"size\": 29346\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-08-04T14:50:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/4e/1e/42e4c5775e6613cb5b579a1494cd7a032ed7977ef1beb74a0d8e56daa891/kinto_http-6.1.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"eac19d8d72409badb0f27af353acf10b\", \n                \"downloads\": 544, \n                \"filename\": \"kinto_http-6.1.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"4e/1e/42e4c5775e6613cb5b579a1494cd7a032ed7977ef1beb74a0d8e56daa891/kinto_http-6.1.0-py2.py3-none-any.whl\", \n                \"size\": 32691\n            }\n        ], \n        \"7.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-03-16T16:13:57\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/4b/16/7cbcebcaff62ff6b19abf81038828a4b230b4fe0845526afce46d023f244/kinto-http-7.1.0.tar.gz\", \n                \"md5_digest\": \"d3b674e7fe08a0bfb3d400c1f86ade4b\", \n                \"downloads\": 51, \n                \"filename\": \"kinto-http-7.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"4b/16/7cbcebcaff62ff6b19abf81038828a4b230b4fe0845526afce46d023f244/kinto-http-7.1.0.tar.gz\", \n                \"size\": 34274\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-03-16T16:13:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/47/28/e0ee28cdfeeb8509abc2b1aca0a074137bdc60b9d09f9d96e408c353dfef/kinto_http-7.1.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"2357f4585f208671e144b515830369ea\", \n                \"downloads\": 49, \n                \"filename\": \"kinto_http-7.1.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"47/28/e0ee28cdfeeb8509abc2b1aca0a074137bdc60b9d09f9d96e408c353dfef/kinto_http-7.1.0-py2.py3-none-any.whl\", \n                \"size\": 36687\n            }\n        ], \n        \"7.2.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-03-17T21:07:50\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ea/40/2e55d06c2434267043634c20dbd4e6e1cd2730c4154f6fcb2101d0c43f4c/kinto-http-7.2.0.tar.gz\", \n                \"md5_digest\": \"0b67d5b9b1768eeca6ce1c167ed0fe2b\", \n                \"downloads\": 166, \n                \"filename\": \"kinto-http-7.2.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ea/40/2e55d06c2434267043634c20dbd4e6e1cd2730c4154f6fcb2101d0c43f4c/kinto-http-7.2.0.tar.gz\", \n                \"size\": 34312\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-03-17T21:07:51\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/5d/b5/f985142dacf7c6c22756888fa30dddbcd4ae40bbdb3da27c4a86b65e04fb/kinto_http-7.2.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"baba0f231f1b5f6642f2b09f896da65a\", \n                \"downloads\": 188, \n                \"filename\": \"kinto_http-7.2.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"5d/b5/f985142dacf7c6c22756888fa30dddbcd4ae40bbdb3da27c4a86b65e04fb/kinto_http-7.2.0-py2.py3-none-any.whl\", \n                \"size\": 36669\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2017-03-17T21:07:50\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/ea/40/2e55d06c2434267043634c20dbd4e6e1cd2730c4154f6fcb2101d0c43f4c/kinto-http-7.2.0.tar.gz\", \n            \"md5_digest\": \"0b67d5b9b1768eeca6ce1c167ed0fe2b\", \n            \"downloads\": 166, \n            \"filename\": \"kinto-http-7.2.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"ea/40/2e55d06c2434267043634c20dbd4e6e1cd2730c4154f6fcb2101d0c43f4c/kinto-http-7.2.0.tar.gz\", \n            \"size\": 34312\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2017-03-17T21:07:51\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2.py3\", \n            \"url\": \"https://pypi.python.org/packages/5d/b5/f985142dacf7c6c22756888fa30dddbcd4ae40bbdb3da27c4a86b65e04fb/kinto_http-7.2.0-py2.py3-none-any.whl\", \n            \"md5_digest\": \"baba0f231f1b5f6642f2b09f896da65a\", \n            \"downloads\": 188, \n            \"filename\": \"kinto_http-7.2.0-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"5d/b5/f985142dacf7c6c22756888fa30dddbcd4ae40bbdb3da27c4a86b65e04fb/kinto_http-7.2.0-py2.py3-none-any.whl\", \n            \"size\": 36669\n        }\n    ]\n}"}, "headers": {"Server": ["nginx/1.10.3"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Disposition": ["inline"], "X-PYPI-LAST-SERIAL": ["2859912"], "Cache-Control": ["max-age=600, public"], "Access-Control-Allow-Origin": ["*"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["66916434a31d3ea0e06059ff8cd0807f6acb02033666e3c12021cba3e0460e1d"], "Content-Length": ["25785"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:50:09 GMT"], "Age": ["73375"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2129-IAD, cache-hhn1529-HHN"], "X-Cache": ["HIT, HIT"], "X-Cache-Hits": ["1, 1"], "X-Timer": ["S1494345010.642013,VS0,VE1"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/kinto-http/json"}, "recorded_at": "2017-05-09T15:50:09"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://github.com/kinto/kinto-http.js"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:50:10 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Sat, 09 May 2037 15:50:10 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZDYxZGYxM2Y4YmM0MzU4NmU2NTczYzJiN2YzZjRmNTEiLCJzcHlfcmVwbyI6IktpbnRvL2tpbnRvLWh0dHAuanMiLCJzcHlfcmVwb19hdCI6MTQ5NDM0NTAxMCwiX2NzcmZfdG9rZW4iOiIzYkV3S2JQMVJuR1hYVmhTaU1hT3ZUeklRWk94ZXNCT09lSmx0VXh5VXAwPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--360e95c92ccb4fcdb34e664adfb49a20b4fe9175; path=/; secure; HttpOnly"], "X-Request-Id": ["b0a96f8e7e749911b22cac5764e87b54"], "X-Runtime": ["0.203180"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["D8DC:35A6:78217DB:B258F33:5911E531"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/kinto/kinto-http.js"}, "recorded_at": "2017-05-09T15:50:10"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiZDYxZGYxM2Y4YmM0MzU4NmU2NTczYzJiN2YzZjRmNTEiLCJzcHlfcmVwbyI6IktpbnRvL2tpbnRvLWh0dHAuanMiLCJzcHlfcmVwb19hdCI6MTQ5NDM0NTAxMCwiX2NzcmZfdG9rZW4iOiIzYkV3S2JQMVJuR1hYVmhTaU1hT3ZUeklRWk94ZXNCT09lSmx0VXh5VXAwPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--360e95c92ccb4fcdb34e664adfb49a20b4fe9175"]}, "method": "GET", "uri": "https://github.com/Kinto/kinto-http.py"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:50:10 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiZDYxZGYxM2Y4YmM0MzU4NmU2NTczYzJiN2YzZjRmNTEiLCJzcHlfcmVwbyI6IktpbnRvL2tpbnRvLWh0dHAucHkiLCJzcHlfcmVwb19hdCI6MTQ5NDM0NTAxMCwiX2NzcmZfdG9rZW4iOiIzYkV3S2JQMVJuR1hYVmhTaU1hT3ZUeklRWk94ZXNCT09lSmx0VXh5VXAwPSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--01bbc832710baea0b8910a53c1b28d40000077fe; path=/; secure; HttpOnly"], "X-Request-Id": ["1960c15410e6136e75d6c229f2b2ec4e"], "X-Runtime": ["0.203049"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["7e098eac53c3666b4eb57cec18d7fb7f"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["D8DC:35A6:782183D:B258FA3:5911E532"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/Kinto/kinto-http.py"}, "recorded_at": "2017-05-09T15:50:10"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://raw.githubusercontent.com/Kinto/kinto-http.py/master/CHANGELOG.rst"}, "response": {"body": {"encoding": "utf-8", "base64_string": "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"}, "headers": {"Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Strict-Transport-Security": ["max-age=31536000"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "ETag": ["\"3a5ed1d61d7c116dfa277c639ebf4e55311367d8\""], "Content-Type": ["text/plain; charset=utf-8"], "Cache-Control": ["max-age=300"], "X-Geo-Block-List": [""], "X-GitHub-Request-Id": ["D0A4:34B4:2828A3A:29AC458:5911E532"], "Content-Encoding": ["gzip"], "Content-Length": ["1974"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:50:11 GMT"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-Served-By": ["cache-hhn1537-HHN"], "X-Cache": ["MISS"], "X-Cache-Hits": ["0"], "X-Timer": ["S1494345011.037564,VS0,VE123"], "Vary": ["Authorization,Accept-Encoding"], "Access-Control-Allow-Origin": ["*"], "X-Fastly-Request-ID": ["2d823d61868726ddb315a9265a78741501ddb1b7"], "Expires": ["Tue, 09 May 2017 15:55:11 GMT"], "Source-Age": ["0"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/Kinto/kinto-http.py/master/CHANGELOG.rst"}, "recorded_at": "2017-05-09T15:50:11"}], "recorded_with": "betamax/0.8.0"}