{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/tilecloud_chain/json"}, "response": {"body": {"encoding": null, "string": ""}, "headers": {"Server": ["nginx/1.10.3"], "Location": ["/pypi/tilecloud-chain/json"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["53f58bf5a5ac7e7b17b24aa275c2d9d46d2fa962be31cc0b8224afdf2e14ff63"], "Content-Length": ["0"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:53:54 GMT"], "Age": ["0"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2124-IAD, cache-hhn1536-HHN"], "X-Cache": ["MISS, MISS"], "X-Cache-Hits": ["0, 0"], "X-Timer": ["S1494345234.257499,VS0,VE110"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "https://pypi.python.org/pypi/tilecloud_chain/json"}, "recorded_at": "2017-05-09T15:53:54"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/tilecloud-chain/json"}, "response": {"body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"gis tilecloud chain\", \n        \"package_url\": \"http://pypi.python.org/pypi/tilecloud-chain\", \n        \"author\": \"St\\u00e9phane Brunner\", \n        \"author_email\": \"stephane.brunner@camptocamp.com\", \n        \"download_url\": \"\", \n        \"platform\": \"UNKNOWN\", \n        \"version\": \"1.3.0\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"TileCloud Chain\\n===============\\n\\n.. image:: https://secure.travis-ci.org/camptocamp/tilecloud-chain.svg?branch=master\\n.. image:: https://coveralls.io/repos/camptocamp/tilecloud-chain/badge.png?branch=master\\n\\nThe goal of TileCloud Chain is to provide tools around tile generation on a chain like:\\n\\nSource: WMS, Mapnik.\\n\\nOptionally using an SQS queue, AWS host, SNS topic.\\n\\nDestination in WMTS layout, on S3, on Berkley DB (``bsddb``), on MBTiles, or on local filesystem.\\n\\nFeatures:\\n\\n- Generate tiles.\\n- Drop empty tiles.\\n- Drop tiles outside a geometry or a bbox.\\n- Use MetaTiles.\\n- Generate the legend images.\\n- Generate GetCapabilities.\\n- Generate OpenLayers example page.\\n- Generate the Apache configuration.\\n- Obtain the hash of an empty tile.\\n- In future, measure tile generation speed.\\n- Calculate cost and generation time.\\n- In future, manage the AWS hosts that generate tiles.\\n- Delete empty tiles.\\n- Copy files between caches.\\n- Be able to use an SQS queue to dispatch the generation.\\n- Post processing the generated tiles.\\n- ...\\n\\n\\n.. contents:: Table of contents\\n\\n\\n------\\nGet it\\n------\\n\\nWith Docker\\n-----------\\n\\n.. code:: bash\\n\\n   # Login to docker hub\\n   docker login\\n   docker pull camptocamp/tilecloud-chain\\n\\n   # Initialyse the project\\n   docker run -ti \\\\\\n        --volume .:/project \\\\\\n        pcreate -s tilecloud_chain .\\n\\n   # Run the commands\\n   DOCKER_ADRS=`ifconfig docker0 | head -n 2 | tail -n 1 | awk -F : '{print $2}' | awk '{print $1}'`\\n   docker run -ti \\\\\\n        --volume .:/project \\\\\\n        --add-host=db:${DOCKER_ADRS} \\\\\\n        --add-host=mapserver:${DOCKER_ADRS} \\\\\\n        --env=USER_NAME=`whoami` \\\\\\n        --env=USER_ID=`id -u` \\\\\\n        --env=GROUP_ID=`id -g` \\\\\\n        --env=UMASK=`umask` \\\\\\n        camptocamp/tilecloud-chain \\\\\\n        run <a command>\\n\\nTo share the home folder you should add the arguments:\\n\\n.. code:: bash\\n\\n    --volume=${HOME}:${HOME} \\\\\\n    --env=HOME=${HOME} \\\\\\n\\nThe image also contains some tools needed to render OSM data like: ``fonts-dejavu``, ``node-carto`` and ``osm2pgsql``.\\n\\nWith pip\\n--------\\n\\nRequirements::\\n\\n    pg_config and a build environment.\\n\\nInstall::\\n\\n    pip install tilecloud-chain\\n    pcreate -s tilecloud_chain .\\n\\nEdit your layers configuration in ``./tilegeneration/config.yaml``.\\n\\n`Default configuration file <https://github.com/camptocamp/tilecloud-chain/blob/master/tilecloud_chain/scaffolds/create/tilegeneration/config.yaml.mako_tmpl>`_.\\n\\n---------\\nConfigure\\n---------\\n\\nConfigure grids\\n---------------\\n\\nThe ``grid`` describes how the tiles are arranged.\\n\\nEspecially on ``s3`` be careful to choose every of the grid settings before generating the tiles.\\nIf you change one of them you must regenerate all the tiles.\\n\\nThe ``resolutions`` in [px/m] describes all the resolutions available for this layer.\\nFor a raster layer, have a look to the maximum resolution of the source files. It is not needed\\nto generate tiles at smaller resolutions than the sources, it is preferable to use the OpenLayers client zoom.\\nNote that you can add a resolution in the end without regenerating all the tiles.\\n\\nThe ``bbox`` should match the resolution of the extent. **CAREFUL: you will have big issue if you\\nuse this parameter to generate the tile on a restricted area**: use the ``bbox`` on the layer instead.\\n\\nThe ``srs`` specifies the code of the projection.\\n\\nThe ``unit`` is the unit used by the projection.\\n\\nThe ``tile_size`` is the tile size in [px], defaults to 256.\\n\\nThe ``matrix_identifier`` is ``zoom`` by default and can also be set to ``resolution``. It specifies how the z index is build to store\\nthe tiles, for example, for the resolutions ``[2, 1, 0.5]`` the used values are ``[0, 1, 2]`` based on the zoom\\nand ``[2, 1, 0_5]`` based on the resolution. The second has the advantage of allowing to add a new\\nresolution without regenerating all the tiles, but it does not work with MapCache.\\n\\n\\nConfigure caches\\n----------------\\n\\nThe available tile caches are: ``s3``, ``bsddb``, ``mbtile`` and ``filesystem``.\\n\\nThe best solution to store the tiles, ``s3``, ``mbtiles`` and ``bsddb``, have the advantage of using only one file per\\nlayer - style  dimensions. To serve the ``mbtile`` and the ``bsddb`` see `Distribute the tiles`_.\\n\\n``s3`` needs a ``bucket`` and a ``folder`` (defaults to '').\\n\\n``mbtiles``, ``bsddb`` and ``filesystem`` just need a ``folder``.\\n\\nOn all the caches we can add some information to generate the URL where the tiles are available.\\nThis is needed to generate the capabilities. We can specify:\\n\\n* ``http_url`` direct url to the tiles root.\\n* ``http_urls`` (array) urls to the tiles root.\\n* ``http_url`` and ``hosts`` (array), where each value of ``hosts`` is used to replace ``%(host)s`` in ``http_url``.\\n\\nIn all case ``http_url`` or ``http_urls`` can include all attributes of this cache as ``%(attribute)s``.\\n\\nMBTiles vs Berkley DB (``bsddb``)\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n* Read performance: similar, eventually the MBTiles is 10% faster.\\n* Write performance: The Berkley DB is largely faster, about 10 times.\\n* List the tiles: the MBTiles is largely faster but we usually don't need it.\\n\\n\\nConfigure layers\\n----------------\\n\\nFirst of all, all the attributes in ``layer_default`` are copied in all the layers to define the default values.\\n\\nWe have two ``type`` of layer: ``wms`` or ``mapnik``.\\n\\nTo start the common attributes are:\\n\\n``min_resolution_seed`` the minimum resolution that is seeded, other resolutions are served by MapCache.\\n\\n``bbox`` used to limit the tiles generation.\\n\\n``px_buffer`` a buffer in px around the object area (geoms or extent).\\n\\n\\nWMTS layout\\n~~~~~~~~~~~\\n\\nTo generate the file paths and the WMTS capabilities we need additional information:\\n\\nThe ``mime_type`` of the tiles, it's also used by the WMS GetMap and to upload the tiles.\\n\\nThe ``wmts_style`` defaults to 'default'.\\n\\nThe ``extension`` is used to end the filename.\\n\\nThe ``dimensions`` (defaults to  []) is an array of objects that have a ``name``,\\na ``default`` value specified in the capabilities,\\na ``value`` to generate the tiles (it can be overwritten by an argument),\\nand an array of ``values`` that contains all the possible values available in the capabilities.\\n\\nFor example if you generate the tiles and capabilities with the following configuration:\\n\\n.. code:: yaml\\n\\n    dimensions:\\n        -   name: DATE\\n            default: 2012\\n            value: 2012\\n            values: [2012]\\n\\nthen with the following configuration:\\n\\n.. code:: yaml\\n\\n    dimensions:\\n        -   name: DATE\\n            default: 2012\\n            value: 2013\\n            values: [2012, 2013]\\n\\nWe will have two set of tiles ``2012`` and ``2013``, both accessible by the capabilities, and by default we will see the first set of tiles.\\n\\n\\nMetatiles\\n~~~~~~~~~\\n\\nThe metatiles are activated by setting ``meta`` to ``on`` (by default it's ``off``).\\n\\nThe metatiles are used for two things: first to generate multiple tiles with only one WMS query.\\nBy setting ``meta_size`` to 8 we will generate a square of 8 by 8 tiles in one shot.\\n\\nThe second usage of metatiles is prevent cut label names: this is solved by getting a bigger image\\nand cutting the borders. The ``meta_buffer`` should be set to a bigger value than half the size of the longest label.\\n\\n\\nConfigure hash\\n~~~~~~~~~~~~~~\\n\\nWe can filter tiles and metatiles by using an hash.\\n\\nThe configuration of this hash is in the layer like this:\\n\\n.. code:: yaml\\n\\n    empty_metatile_detection:\\n        size: 740\\n        hash: 3237839c217b51b8a9644d596982f342f8041546\\n    empty_tile_detection:\\n        size: 921\\n        hash: 1e3da153be87a493c4c71198366485f290cad43c\\n\\nTo easily generate this configuration we can use the following command::\\n\\n    generate_tiles --get-hash <z/x/y> -l <layer_name>\\n\\nWhere ``<z/x/y>`` should refer to an empty tile/metatile. Generally it's a good\\nidea to use z as the maximum zoom, x and y as 0.\\n\\n\\nConfigure geom/sql\\n~~~~~~~~~~~~~~~~~~\\n\\nWe can generate the tiles only on some geometries stored in PostGis.\\n\\nThe configuration is in the layer like this:\\n\\n.. code:: yaml\\n\\n    geoms:\\n    -   connection: user=www-data password=www-data dbname=<db> host=localhost\\n        sql: <column> AS geom FROM <table>\\n        min_resolution: <resolution> # included, optional, last win\\n        max_resolution: <resolution> # included, optional, last win\\n\\nExample:\\n\\n.. code:: yaml\\n\\n    geoms:\\n    -   connection: user=postgres password=postgres dbname=tests host=localhost\\n        sql: the_geom AS geom FROM tests.polygon\\n    -   connection: user=postgres password=postgres dbname=tests host=localhost\\n        sql: the_geom AS geom FROM tests.point\\n        min_resolution: 10\\n        max_resolution: 20\\n\\nIt's preferable to use simple geometries, too complex geometries can slow down the generation.\\n\\nLegends\\n~~~~~~~\\n\\nTo be able to generate legends with ``generate_controller --generate-legend-images``\\nyou should have ``legend_mime`` and ``legend_extention`` in the layer configuration.\\n\\nfor example:\\n\\n.. code:: yaml\\n\\n   legend_mime: image/png\\n   legend_extention: png\\n\\nThen it will create a legend image per layer and per zoom level named\\n``.../1.0.0/{{layer}}/{{wmts_style}}/legend{{zoom}}.{{legend_extention}}``\\nonly if she is different than the previous zoom level. If we have only one legend image\\nit still stores in the file named ``legend0.{{legend_extention}}``.\\n\\nWhen we do ``generate_controller --generate-wmts-capabilities`` we will at first\\nparse the legend images to generate a layer configuration like this:\\n\\n.. code:: yaml\\n\\n    legends:\\n    -   mime_type: image/png\\n        href: http://host/tiles/layer/style/legend0.png\\n        min_resolution: 500 # optional, [m/px]\\n        max_resolution: 2000 # optional, [m/px]\\n        min_scale: # if define overwrite the min_resolution [m/m]\\n        max_scale: # if define overwrite the max_resolution [m/m]\\n\\nIf you define a legends array in the layer configuration it is directly used to generate the capabilities.\\n\\n\\nWMS layers\\n~~~~~~~~~~\\n\\nThe additional value needed by the WMS is the URL of the server and the ``layers``.\\n\\nThe previously defined ``mime_type`` is also used in the WMS requests.\\n\\nTo customise the request you also have the attributes ``params``, ``headers``\\nand ``generate_salt``.\\nIn ``params`` you can specify additional parameter of the WMS request,\\nin ``headers`` you can modify the request headers. See the\\n`Proxy/cache issue`_ for additional informations.\\n\\n\\nMapnik layers\\n~~~~~~~~~~~~~\\n\\nWe need to specify the ``mapfile`` path.\\n\\nWith Mapnik we have the possibility to specify a ``data_buffer`` then we should set the unneeded ``meta_buffer`` to 0.\\n\\nAnd the ``output_format`` used for the Mapnik renderer, can be ``png``, ``png256``, ``jpeg``, ``grid`` (grid_renderer).\\n\\n\\n~~~~~~~~~~~~~~~~~~\\nMapnik grid layers\\n~~~~~~~~~~~~~~~~~~\\n\\nWith Mapnik we can generate UTFGrid tiles (JSON format that describes the tiles present on a corresponding tile)\\nby using the ``output_format`` 'grid', see also: https://github.com/mapnik/mapnik/wiki/MapnikRenderers#grid_renderer.\\n\\nSpecific configuration:\\n\\nWe have a specific way to ``drop_empty_utfgrid`` by using the ``on`` value.\\n\\nWe should specify the pseudo pixel size [px] with the ``resolution``.\\n\\nAnd the ``layers_fields`` that we want to get the attributes.\\nObject with the layer name as key and the values in an array as value.\\n\\nIn fact the Mapnik documentation says that's working only for one layer.\\n\\nAnd don't forget to change the ``extension`` to ``json``, and the ``mime_type`` to ``application/utfgrid``\\nand the ``meta`` to ``off`` (not supported).\\n\\nConfiguration example:\\n\\n.. code:: yaml\\n\\n    grid:\\n        type: mapnik\\n        mapfile: style.mapnik\\n        output_format: grid\\n        extension: json\\n        mime_type: application/utfgrid\\n        drop_empty_utfgrid: on\\n        resolution: 4\\n        meta: off\\n        data_buffer: 128\\n        layers_fields:\\n            buildings: [name, street]\\n\\n\\nProcess\\n-------\\n\\nWe can configure some tile commands to process the tiles.\\nThey can be automatically be called in the tile generation it we set the property\\n``post_process`` or ``pre_hash_post_process`` in the layer configuration.\\n\\nThe process is a set of names processes, and each one has a list of commands declared like this:\\n\\n.. code:: yaml\\n\\n    process:  # root process config\\n        optipng:  # the process command\\n        -   cmd: optipng %(args)s -q -zc9 -zm8 -zs3 -f5 -o %(out)s %(in)s  # the command line\\n            need_out: true  # if false the command rewrite the input file, default to false\\n            arg:  # argument used with the defferant log switches, all default to ''\\n                default: '-q' # the argument used by default\\n                quiet: '-q' # the arbument used in quiet mode\\n                verbose: '-v' # the argument used in verbose mode\\n                debug: '-log /tmp/optipng.log' # the argument user in debug mode\\n\\nThe ``cmd`` can have the following optional argument:\\n\\n* ``args`` the argument configured in the `arg` section.\\n* ``in``, ``out`` the input and output files.\\n* ``x``, ``y``, ``z`` the tile coordinates.\\n\\n\\nConfigure Apache\\n----------------\\n\\nTo generate the Apache configuration we use the command::\\n\\n    generate_controller --generate-apache-config\\n\\nThe Apache configuration look like this (default values):\\n\\n.. code:: yaml\\n\\n    apache:\\n        # Generated file\\n        config_file: apache/tiles.conf\\n        # Serve tiles location, default is /tiles\\n        location: /${instanceid}/tiles\\n        # Expires header in hours\\n        expires: 8\\n\\n        # Headers added to the ressponces\\n        headers:\\n            Cache-Control: max-age=864000, public\\n\\nIf we use a proxy to access to the tiles we can specify a different URL to access\\nto the tiles by adding the parameter ``tiles_url`` in the cache.\\n\\nConfigure MapCache\\n------------------\\n\\nFor the last zoom levels we can use MapCache.\\n\\nTo select the levels we generate the tiles an witch one we serve them using MapCache\\nwe have an option 'min_resolution_seed' in the layer configuration.\\n\\nThe MapCache configuration look like this (default values):\\n\\n.. code:: yaml\\n\\n    mapcache:\\n        # The generated file\\n        config_file: apache/mapcache.xml\\n        # The memcache host\\n        memcache_host: localhost\\n        # The memcache port\\n        memcache_port: 11211\\n        # The mapcache location, default is /mapcache\\n        location: /${instanceid}/mapcache\\n\\n\\nTo generate the MapCache configuration we use the command::\\n\\n    generate_controller --generate-mapcache-config\\n\\nTiles error file\\n----------------\\n\\nIf we set a file path in configuration file:\\n\\n.. code:: yaml\\n\\n    generation:\\n        error_file: <path>\\n\\nThe tiles that in error will be append to the file, ant the tiles can be regenerated with\\n``generate_tiles --layer <layer> --tiles <path>``.\\n\\nThe ``<path>`` can be ``/tmp/error_{layer}_{datetime:%Y-%m-%d_%H:%M:%S}``\\nto have one file per layer and per run.\\n\\nThe tiles file looks like:\\n\\n.. code::\\n\\n    # [time] some comments\\n    z/x/y # [time] the error\\n    z/x/y:+m/+m # [time] the error\\n\\nThe first line is just a comment, the second, is for an error on a tile,\\nand the third is for an error on a metatile.\\n\\nProxy/cache issue\\n-----------------\\n\\nIn general we shouldn't generate tiles throw a proxy, to do that you\\nshould configure the layers as this:\\n\\n.. code:: yaml\\n\\n    layers_name:\\n        url: http://localhost/wms\\n        headers:\\n            Host: the_host_name\\n\\nThe idea is to get the WMS server on ``localhost`` and use the ``Host`` header\\nto select the right Apache VirtualHost.\\n\\nTo don't have cache we use the as default the headers:\\n\\n.. code:: yaml\\n\\n    headers:\\n        Cache-Control: no-cache, no-store\\n        Pragma: no-cache\\n\\nAnd if you steal have issue you can add a ``SALT`` random argument by setting\\nthe layer parameter ``generate_salt`` to ``true``.\\n\\n\\nAlternate mime type\\n-------------------\\n\\nBy default TileCloud support only the ``image/jpeg`` and ``image/png`` mime type.\\n\\n\\n----------------\\nAmazon services\\n----------------\\n\\nAuthentication\\n--------------\\n\\nTo be authenticated by Amazon you should set those environment variable before running a command::\\n\\n    export AWS_ACCESS_KEY_ID=...\\n    export AWS_SECRET_ACCESS_KEY=...\\n\\nConfigure S3\\n------------\\n\\nThe cache configuration is like this:\\n\\n.. code:: yaml\\n\\n    s3:\\n        type: s3\\n        # the s3 bucket name\\n        bucket: tiles\\n        # the used folder in the bucket [default to '']\\n        folder: ''\\n        # for GetCapabilities\\n        http_url: https://%(host)s/%(bucket)s/%(folder)s/\\n        hosts:\\n        - wmts0.<host>\\n\\nThe bucket should already exists. If you don't use Amazon's S3, you must specify the ``host`` and\\nthe ``tiles_url`` configuration parameter.\\n\\nConfigure SQS\\n-------------\\n\\nThe configuration in layer is like this:\\n\\n.. code:: yaml\\n\\n    sqs:\\n        # The region where the SQS queue is\\n        region: eu-west-1\\n        # The SQS queue name, it should already exists\\n        queue: the_name\\n\\nThe queue should be used only by one layer.\\n\\nTo use the SQS queue we should first fill the queue::\\n\\n    generate_tiles --role master --layer <a_layer>\\n\\nAnd then generate the tiles present in the SQS queue::\\n\\n    generate_tiles --role slave --layer <a_layer>\\n\\nConfigure SNS\\n-------------\\n\\nSNS can be used to send a message when the generation ends.\\n\\nThe configuration is like this:\\n\\n.. code:: yaml\\n\\n    sns:\\n        topic: arn:aws:sns:eu-west-1:your-account-id:tilecloud\\n        region: eu-west-1\\n\\nThe topic should already exists.\\n\\nAmazon tool\\n-----------\\n\\nAmazon has a command line tool (`homepage <http://aws.amazon.com/fr/cli/>`_).\\n\\nTo use it, add in the ``setup.py``:\\n\\n* ``awscli`` as an ``install_requires``,\\n* ``'aws = awscli.clidriver:main',`` in the ``console_scripts``.\\n\\nThan install it:\\n\\n.. code:: bash\\n\\n    pip install awscli\\n\\nAnd use it:\\n\\n.. code:: bash\\n\\n    aws help\\n\\nFor example to delete many tiles do:\\n\\n.. code:: bash\\n\\n    aws s3 rm --recursive s3://your_bucket_name/folder\\n\\n---------------------------\\nOther related configuration\\n---------------------------\\n\\nOpenlayers pink tiles\\n---------------------\\n\\nTo avoid the OpenLayers red tiles on missing empty tiles we can add the following CSS rule:\\n\\n.. code:: css\\n\\n    .olImageLoadError {\\n        display: none;\\n    }\\n\\nTo completely hide the missing tiles, useful for a transparent layer,\\nor for an opaque layer:\\n\\n.. code:: css\\n\\n    .olImageLoadError {\\n        background-color: white;\\n    }\\n\\n\\n--------------------\\nDistribute the tiles\\n--------------------\\n\\nThere two ways to serve the tiles, with Apache configuration, or with an internal server.\\n\\nThe advantage of the internal server are:\\n\\n* Can distribute Mbtiles or Berkley DB.\\n* Return ``204 No Content`` HTTP code in place of ``404 Not Found`` (or ``403 Forbidden`` for s3).\\n* Can be used in `KVP` mode.\\n* Can have zone per layer where are the tiles, otherwise it redirect on mapcache.\\n\\nTo generate the Apache configuration we use the command::\\n\\n    generate_controller --generate-apache-config\\n\\nThe server can be configure as it:\\n\\n.. code:: yaml\\n\\n    server:\\n        layers: a_layer # Restrict to serve an certain number of layers [default to all]\\n        cache: mbtiles # The used cache [default use generation/default_cache]\\n        # the URL without location to MapCache, [default to http://localhost/]\\n        mapcache_base: http://localhost/\\n        mapcache_headers: # headers, can be used to access to an other Apache vhost [default to {}]\\n            Host: localhost\\n        geoms_redirect: true # use the geoms to redirect to MapCache [defaut to false]\\n        # allowed extension in the static path (default value), not used for s3.\\n        static_allow_extension: [jpeg, png, xml, js, html, css]\\n\\nThe minimal configuration is to enable it:\\n\\n.. code:: yaml\\n\\n    server: {}\\n\\nYou should also configure the ``http_url`` of the used `cache`, to something like\\n``https://%(host)s/${instanceid}/tiles`` or like\\n``https://%(host)s/${instanceid}/wsgi/tiles`` if you use the Pyramid view.\\n\\nPyramid view\\n------------\\n\\nTo use the pyramid view use the following configuration:\\n\\n.. code:: python\\n\\n    config.get_settings().update({\\n        'tilegeneration_configfile': '<the configuration file>',\\n    })\\n    config.add_route('tiles', '/tiles/\\\\*path')\\n    config.add_view('tilecloud_chain.server:PyramidView', route_name='tiles')\\n\\n\\nInternal WSGI server\\n--------------------\\n\\nin ``production.ini``::\\n\\n    [app:tiles]\\n    use = egg:tilecloud_chain#server\\n    configfile = %(here)s/tilegeneration/config.yaml\\n\\nwith the Apache configuration::\\n\\n    WSGIDaemonProcess tiles:${instanceid} display-name=%{GROUP} user=${modwsgi_user}\\n    WSGIScriptAlias /${instanceid}/tiles ${directory}/apache/wmts.wsgi\\n    <Location /${instanceid}/tiles>\\n        WSGIProcessGroup tiles:${instanceid}\\n        WSGIApplicationGroup %{GLOBAL}\\n    </Location>\\n\\n\\n--------\\nCommands\\n--------\\n\\nAvailable commands\\n------------------\\n\\n* ``generate_controller`` generate the annexe files like capabilities, legend, OpenLayers test page, MapCache configuration, Apache configuration.\\n* ``generate_tiles`` generate the tiles.\\n* ``generate_copy`` copy the tiles from a cache to an other.\\n* ``generate_process`` process the tiles using a configured process.\\n* ``generate_cost`` estimate the cost.\\n* ``import_expiretiles`` import the osm2pgsql expire-tiles file as geoms in the database.\\n\\nEach commands have a ``--help`` option to give a full arguments help.\\n\\n\\nGenerate tiles\\n--------------\\n\\nGenerate all the tiles::\\n\\n    generate_tiles\\n\\nGenerate a specific layer::\\n\\n    generate_tiles --layer <a_layer>\\n\\nGenerate a specific zoom::\\n\\n    generate_tiles --zoom 5\\n\\nGenerate a specific zoom range::\\n\\n    generate_tiles --zoom 2-8\\n\\nGenerate a specific some zoom levels::\\n\\n    generate_tiles --zoom 2,4,7\\n\\nGenerate tiles from an (error) tiles file::\\n\\n    generate_tiles --layer <a_layer> --tiles <a_file.tiles>\\n\\nGenerate tiles on a bbox::\\n\\n    generate_tiles --bbox <MINX> <MINY> <MAXX> <MAXY>\\n\\nGenerate a tiles near a tile coordinate (useful for test)::\\n\\n    generate_tiles --near <X> <Y>\\n\\nGenerate a tiles in a different cache than the default one::\\n\\n    generate_tiles --cache <a_cache>\\n\\nAnd don't forget to generate the WMTS Capabilities::\\n\\n    generate_controller --capabilities\\n\\n\\nOpenLayers test page\\n--------------------\\n\\nTo generate a test page use::\\n\\n    generate_controller --openlayers\\n\\n\\n------------\\nExplain cost\\n------------\\n\\nConfiguration (default values):\\n\\n.. code:: yaml\\n\\n    cost:\\n        # [nb/month]\\n        request_per_layers: 10000000\\n        cloudfront:\\n            download: 0.12,\\n            get: 0.009\\n        request_per_layers: 10000000\\n        s3:\\n            download: 0.12,\\n            get: 0.01,\\n            put: 0.01,\\n            storage: 0.125\\n        sqs:\\n            request: 0.01\\n\\n\\nLayer configuration (default values):\\n\\n.. code:: yaml\\n\\n    cost:\\n        metatile_generation_time: 30.0,\\n        tile_generation_time: 30.0,\\n        tile_size: 20.0,\\n        tileonly_generation_time: 60.0\\n\\nThe following commands can be used to know the time and cost to do generation::\\n\\n    generate_controller --cost\\n\\nUseful options\\n--------------\\n\\n``--quiet`` or ``-q``: used to display only errors.\\n\\n``--verbose`` or ``-v``: used to display info messages.\\n\\n``--debug`` or ``-d``: used to display debug message, pleas use this option to report issue.\\nWith the debug mode we don't catch exceptions, and we don't log time messages.\\n\\n``--test <n>`` or ``-t <n>``: used to generate only ``<n>`` tiles, useful for test.\\n\\nThe logging format is configurable in the``config.yaml`` - ``generation/log_format``,\\n`See <http://docs.python.org/2/library/logging.html#logrecord-attributes>`_.\\n\\n\\n-----------------\\nImportant remarks\\n-----------------\\n\\nEspecially on S3 the grid name, the layer name, the dimensions, can't be changed\\n(understand if we want to change them we should regenerate all the tiles).\\n\\nBy default we also can't insert a zoom level, if you think that you need it we can\\nset the grid property ``matrix_identifier: resolution``, bit it don't work with MapCache.\\n\\nPlease use the ``--debug`` to report issue.\\n\\n\\n------------\\n>From sources\\n------------\\n\\nBuild it:\\n\\n.. code:: bash\\n\\n   git submodule update --recursive\\n   mkdir .build\\n   virtualenv venv\\n   venv/bin/pip install -e .\\n   venv/bin/pip install -r dev-requirements.txt\\n\\n\\nChangelog\\n=========\\n\\n-----------\\nRelease 0.9\\n-----------\\n\\n1. Correct some error with slash.\\n\\n2. Better error handling.\\n\\n3. Be able to have one error file per layer.\\n\\n-----------\\nRelease 0.8\\n-----------\\n\\n1. Correct some error with slash.\\n\\n2. Add ``pre_hash_post_process`` and ``post_process``.\\n\\n3. Add copy command.\\n\\n-----------\\nRelease 0.7\\n-----------\\n\\n1. Support of deferent geoms per layers, requires configuration changes, old version:\\n\\n    .. code:: yaml\\n\\n        connection: user=www-data password=www-data dbname=<db> host=localhost\\n        sql: <column> AS geom FROM <table>\\n\\n    to new version:\\n\\n    .. code:: yaml\\n\\n        connection: user=www-data password=www-data dbname=<db> host=localhost\\n        geoms:\\n        -   sql: <column> AS geom FROM <table>\\n\\n    More informations in the **Configure geom/sql** chapter.\\n\\n2. Update from ``optparse`` to ``argparse``, and some argument refactoring, use ``--help`` to see the new version.\\n\\n3. Add support of Blackbery DB (``bsddb``).\\n\\n4. The tile ``server`` is completely rewrite, now it support all cache,\\n   ``REST`` and ``KVP`` interface, ``GetFeatureInfo`` request,\\n   and it can be used as a pyramid view or as a ``WSGI`` server.\\n   More informations in the **istribute the tiles** chapter.\\n\\n5. Add three strategy to bypass the proxy/cache: Use the headers\\n   ``Cache-Control: no-cache, no-store``, ``Pragma: no-cache`` (default).\\n   Use localhost in the URL and the header ``Host: <host_name>`` (recommended).\\n   Add a ``SALT`` random argument (if the above don't work).\\n   More informations in the **Proxy/cache issue** chapter.\\n\\n6. Improve the dimensions usage by adding it ti the WMS requests,\\n   And add a ``--dimensions`` argument of ``generate_tiles`` to change the dimensions values.\\n\\n7. Extract generate_cost and generate_amazon from generate_controler.\\n\\n8. Now we can creates legends, see the **Legends** chapter.\\n\\n9. Now the tiles generation display generation statistics at the ends.\\n\\n10. The EC2 configuration is moved in a separate structure, see README for more informations.\\n\\n\\n-----------\\nRelease 0.6\\n-----------\\n\\n1. Now the apache configuration can be generated with ``.build/venv/bin/generate_controller --generate-apache-config``,\\n   it support ``filesystem`` ``cache`` and ``MapCache``.\\n\\n2. Windows fixes.\\n\\n3. Use console rewrite (\\\\r) to log generated tiles coordinates.\\n\\n4. Now if no layers is specified in ``generation:default_layers`` we generate all layers by default.\\n\\n5. Now bbox to be floats.\\n\\n6. New ``--get-bbox`` option to get the bbox of a tile.\\n\\n7. Add coveralls support (https://coveralls.io/r/camptocamp/tilecloud-chain).\\n\\n8. Add an config option ``generation:error_file`` and a command option ``--tiles``\\n   to store and regenerate errored tiles.\\n\\n\\n-----------\\nRelease 0.5\\n-----------\\n\\n1. SQS config change:\\n\\n.. code:: yaml\\n\\n    layers:\\n        layer_name:\\n            sqs:\\n                # The region where the SQS queue is\\n                region: eu-west-1\\n                # The SQS queue name, it should already exists\\n                queue: the_name\\n\\n2. Add debug option (``--debug``), please use it to report issue.\\n\\n3. Now the ``sql`` request can return a set of geometries in a column names geom\\n   but the syntax change a little bit => ``<column> AS geom FROM <table>``\", \n        \"release_url\": \"http://pypi.python.org/pypi/tilecloud-chain/1.3.0\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 24, \n        \"requires_dist\": [\n            \"tilecloud (>=0.4.0)\", \n            \"six\", \n            \"simplejson\", \n            \"requests\", \n            \"pyramid\", \n            \"pykwalify\", \n            \"psycopg2\", \n            \"boto (>=2.0)\", \n            \"Shapely\", \n            \"PyYAML\", \n            \"Jinja2\"\n        ], \n        \"classifiers\": [\n            \"Development Status :: 4 - Beta\", \n            \"Environment :: Console\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: BSD License\", \n            \"Programming Language :: Python\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Topic :: Scientific/Engineering :: GIS\"\n        ], \n        \"name\": \"tilecloud-chain\", \n        \"bugtrack_url\": \"\", \n        \"license\": \"BSD\", \n        \"summary\": \"Tools to generates tiles from WMS or Mapnik, to S3, Berkley DB, MBTiles, or local filesystem in WMTS layout using Amazon cloud services.\", \n        \"home_page\": \"http://github.com/camptocamp/tilecloud-chain\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"1.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-03-23T16:05:48\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/3c/85/defea5d4efa7c269c214cc73a3efb5bbb642d25a4c4d339f85aba2974605/tilecloud-chain-1.1.0.tar.gz\", \n                \"md5_digest\": \"051145694e4a4a0fd5f76e28db8e22e0\", \n                \"downloads\": 502, \n                \"filename\": \"tilecloud-chain-1.1.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"3c/85/defea5d4efa7c269c214cc73a3efb5bbb642d25a4c4d339f85aba2974605/tilecloud-chain-1.1.0.tar.gz\", \n                \"size\": 119699\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-03-23T16:05:59\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/5d/8b/1007a69b589fe11a9b3b54ae5af0860c51f03c644529141e2ddaa96087a0/tilecloud_chain-1.1.0-py2-none-any.whl\", \n                \"md5_digest\": \"779a4f5e75827b9d05dc01abf5e95179\", \n                \"downloads\": 597, \n                \"filename\": \"tilecloud_chain-1.1.0-py2-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"5d/8b/1007a69b589fe11a9b3b54ae5af0860c51f03c644529141e2ddaa96087a0/tilecloud_chain-1.1.0-py2-none-any.whl\", \n                \"size\": 476611\n            }\n        ], \n        \"1.0.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-11-12T08:48:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/ba/69/54b17b587fbf75b122f33bf6aa79f4be3ae093bc35127391b975452ec620/tilecloud-chain-1.0.0.tar.gz\", \n                \"md5_digest\": \"835bbeb3b3eb1c022ce4e7bfeb74ffa9\", \n                \"downloads\": 630, \n                \"filename\": \"tilecloud-chain-1.0.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"ba/69/54b17b587fbf75b122f33bf6aa79f4be3ae093bc35127391b975452ec620/tilecloud-chain-1.0.0.tar.gz\", \n                \"size\": 120189\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-11-12T08:48:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"2.7\", \n                \"url\": \"https://pypi.python.org/packages/a5/86/a13b349101374cb5641c0e52336aee5b1e0ace351f16543f3f79bf188fde/tilecloud_chain-1.0.0-py2-none-any.whl\", \n                \"md5_digest\": \"aa49aee27e59e0c05c1b52af293a63c6\", \n                \"downloads\": 1964, \n                \"filename\": \"tilecloud_chain-1.0.0-py2-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"a5/86/a13b349101374cb5641c0e52336aee5b1e0ace351f16543f3f79bf188fde/tilecloud_chain-1.0.0-py2-none-any.whl\", \n                \"size\": 123965\n            }\n        ], \n        \"0.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2012-10-22T15:37:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/fe/fa/078f689d85644267e5966633d476b0233cc9f01ae8a44f8051c0d1f19a0e/tilecloud-chain-0.1.tar.gz\", \n                \"md5_digest\": \"3eeffbfdef21d3846d198290228ebab6\", \n                \"downloads\": 3207, \n                \"filename\": \"tilecloud-chain-0.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"fe/fa/078f689d85644267e5966633d476b0233cc9f01ae8a44f8051c0d1f19a0e/tilecloud-chain-0.1.tar.gz\", \n                \"size\": 72168\n            }\n        ], \n        \"0.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-02-05T08:45:24\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a6/50/09ac85359e443f7e6bca424cee0146891f28493a9fcaffdcae9592180b86/tilecloud-chain-0.3.tar.gz\", \n                \"md5_digest\": \"91679cd7a6adfe699ed80f8635b99f6d\", \n                \"downloads\": 2662, \n                \"filename\": \"tilecloud-chain-0.3.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a6/50/09ac85359e443f7e6bca424cee0146891f28493a9fcaffdcae9592180b86/tilecloud-chain-0.3.tar.gz\", \n                \"size\": 90057\n            }\n        ], \n        \"0.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-01-07T10:21:57\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/1f/39/626a5a4b47de7b6202aaffcf2cf7d1171a2c907677157f1bf02e074443d3/tilecloud-chain-0.2.tar.gz\", \n                \"md5_digest\": \"61ac3cda54c4d1a9a10246a9b761a315\", \n                \"downloads\": 2746, \n                \"filename\": \"tilecloud-chain-0.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"1f/39/626a5a4b47de7b6202aaffcf2cf7d1171a2c907677157f1bf02e074443d3/tilecloud-chain-0.2.tar.gz\", \n                \"size\": 86429\n            }\n        ], \n        \"0.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-04-11T06:29:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/52/9a/4eb7b515c9ae55547e00b483a8c4acbec1cc7867d54ce2146e02be89f8ae/tilecloud-chain-0.5.tar.gz\", \n                \"md5_digest\": \"11b1d1829d3b408de1b7c46d13fb9ad6\", \n                \"downloads\": 2185, \n                \"filename\": \"tilecloud-chain-0.5.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"52/9a/4eb7b515c9ae55547e00b483a8c4acbec1cc7867d54ce2146e02be89f8ae/tilecloud-chain-0.5.tar.gz\", \n                \"size\": 198517\n            }\n        ], \n        \"0.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-03-06T08:46:05\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/93/99/c8140db72895ce929edba2cbd98dfe8d28a80a9491b210e7c3c4f3cda778/tilecloud-chain-0.4.tar.gz\", \n                \"md5_digest\": \"9f081534b6fc82e1fef49e3c69a78245\", \n                \"downloads\": 2606, \n                \"filename\": \"tilecloud-chain-0.4.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"93/99/c8140db72895ce929edba2cbd98dfe8d28a80a9491b210e7c3c4f3cda778/tilecloud-chain-0.4.tar.gz\", \n                \"size\": 90578\n            }\n        ], \n        \"0.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-07-28T12:23:03\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/60/6c/e98abd35eb7ce0b05ff99dbf6e9837174e2e96b353ea322e3e3af7a94ef2/tilecloud-chain-0.6.tar.gz\", \n                \"md5_digest\": \"7b16432d4392be5d9055615c997dba51\", \n                \"downloads\": 2120, \n                \"filename\": \"tilecloud-chain-0.6.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"60/6c/e98abd35eb7ce0b05ff99dbf6e9837174e2e96b353ea322e3e3af7a94ef2/tilecloud-chain-0.6.tar.gz\", \n                \"size\": 54275\n            }\n        ], \n        \"1.0.0dev2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-04-10T11:44:30\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d8/ea/45c51a1d628faf926cb3b11d3fea83d4091899ff26d6c37f72c1d651d2eb/tilecloud-chain-1.0.0dev2.tar.gz\", \n                \"md5_digest\": \"2dc16f9733b4ccfd2f3c8d8608fc0864\", \n                \"downloads\": 1739, \n                \"filename\": \"tilecloud-chain-1.0.0dev2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d8/ea/45c51a1d628faf926cb3b11d3fea83d4091899ff26d6c37f72c1d651d2eb/tilecloud-chain-1.0.0dev2.tar.gz\", \n                \"size\": 140466\n            }\n        ], \n        \"1.0.0dev1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-12-16T17:38:25\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/90/82/b5b46459b9d53a9fd8c3cbf812935bb574cb0b1f638a1afaca02a127df33/tilecloud-chain-1.0.0dev1.tar.gz\", \n                \"md5_digest\": \"5931889af8fcac958918f7adcf098f75\", \n                \"downloads\": 1295, \n                \"filename\": \"tilecloud-chain-1.0.0dev1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"90/82/b5b46459b9d53a9fd8c3cbf812935bb574cb0b1f638a1afaca02a127df33/tilecloud-chain-1.0.0dev1.tar.gz\", \n                \"size\": 140446\n            }\n        ], \n        \"0.7.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-05-09T11:22:42\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/17/cb/b69772f6cc62c6db36f443da21c25f0be97987bd7e2210ed2f6f553dd73e/tilecloud-chain-0.7.2.tar.gz\", \n                \"md5_digest\": \"f7484472c640c17e53a9a0716116c66e\", \n                \"downloads\": 1625, \n                \"filename\": \"tilecloud-chain-0.7.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"17/cb/b69772f6cc62c6db36f443da21c25f0be97987bd7e2210ed2f6f553dd73e/tilecloud-chain-0.7.2.tar.gz\", \n                \"size\": 133394\n            }\n        ], \n        \"0.7.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-10-29T18:18:01\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/29/67/872809e73480304c66b9dfdbd0f12cfcf0de1707f1f458c0bc70a6a8ff42/tilecloud-chain-0.7.0.tar.gz\", \n                \"md5_digest\": \"303067f2a3322a31581c8f5066001f6c\", \n                \"downloads\": 1974, \n                \"filename\": \"tilecloud-chain-0.7.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"29/67/872809e73480304c66b9dfdbd0f12cfcf0de1707f1f458c0bc70a6a8ff42/tilecloud-chain-0.7.0.tar.gz\", \n                \"size\": 128192\n            }\n        ], \n        \"0.7.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-12-11T17:13:16\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/2b/55/3919b0093cdf73fc4740f6c33a19e313e4199c41d5a38d69e3e385412f54/tilecloud-chain-0.7.1.tar.gz\", \n                \"md5_digest\": \"b2b3d0065562ff637925d4c952e17f54\", \n                \"downloads\": 1922, \n                \"filename\": \"tilecloud-chain-0.7.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"2b/55/3919b0093cdf73fc4740f6c33a19e313e4199c41d5a38d69e3e385412f54/tilecloud-chain-0.7.1.tar.gz\", \n                \"size\": 128410\n            }\n        ], \n        \"0.9.0dev2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-03T08:20:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/18/71/831a4bee0a5bfd2163f42874eee802a64f6bc0f0cca30878a0831910677b/tilecloud-chain-0.9.0dev2.tar.gz\", \n                \"md5_digest\": \"ef04626077b89ce3591a23a7b7165213\", \n                \"downloads\": 1447, \n                \"filename\": \"tilecloud-chain-0.9.0dev2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"18/71/831a4bee0a5bfd2163f42874eee802a64f6bc0f0cca30878a0831910677b/tilecloud-chain-0.9.0dev2.tar.gz\", \n                \"size\": 138566\n            }\n        ], \n        \"0.9.0dev1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-03T07:59:35\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/c2/c8/254d7687d8c95b236b0a9b7303c9feab3d5ca49f6a6f90aaab966f2afc8f/tilecloud-chain-0.9.0dev1.tar.gz\", \n                \"md5_digest\": \"58330be7da4b28b296695f6b7a172b63\", \n                \"downloads\": 1474, \n                \"filename\": \"tilecloud-chain-0.9.0dev1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"c2/c8/254d7687d8c95b236b0a9b7303c9feab3d5ca49f6a6f90aaab966f2afc8f/tilecloud-chain-0.9.0dev1.tar.gz\", \n                \"size\": 138600\n            }\n        ], \n        \"0.4.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2013-03-12T16:24:39\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/9b/7b/4e0d8d838ba4e99191a38b86402cc58300636ae0e07b9786236fbbb56d15/tilecloud-chain-0.4.1.tar.gz\", \n                \"md5_digest\": \"5ade48e52388ecbfc15e36edc1f04cf4\", \n                \"downloads\": 2567, \n                \"filename\": \"tilecloud-chain-0.4.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"9b/7b/4e0d8d838ba4e99191a38b86402cc58300636ae0e07b9786236fbbb56d15/tilecloud-chain-0.4.1.tar.gz\", \n                \"size\": 90602\n            }\n        ], \n        \"0.9.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-08-19T08:15:31\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/95/59/86348bf9e03945bf4a42dd57619971fb0735fa76b9fb7cd15a6de3fcb407/tilecloud-chain-0.9.0.tar.gz\", \n                \"md5_digest\": \"7bdf8bfe3d19d51e7219af78f53e7e76\", \n                \"downloads\": 6583, \n                \"filename\": \"tilecloud-chain-0.9.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"95/59/86348bf9e03945bf4a42dd57619971fb0735fa76b9fb7cd15a6de3fcb407/tilecloud-chain-0.9.0.tar.gz\", \n                \"size\": 139633\n            }\n        ], \n        \"0.8.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-03T06:58:00\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/91/46/0464d7275271ad85869e5f360d971e0a2c2efd42f8293d2c29526263bc8b/tilecloud-chain-0.8.1.tar.gz\", \n                \"md5_digest\": \"db5ecef63bd9eed793e797ef5ae2b30f\", \n                \"downloads\": 1465, \n                \"filename\": \"tilecloud-chain-0.8.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"91/46/0464d7275271ad85869e5f360d971e0a2c2efd42f8293d2c29526263bc8b/tilecloud-chain-0.8.1.tar.gz\", \n                \"size\": 138575\n            }\n        ], \n        \"0.8.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-02T15:49:08\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/23/25/22ad9925778f24116cb3de49df815745c2fe7c4287b7261c1e5d854f4067/tilecloud-chain-0.8.0.tar.gz\", \n                \"md5_digest\": \"ab56b5900fe4b58f218d3270ca0aa5b2\", \n                \"downloads\": 1470, \n                \"filename\": \"tilecloud-chain-0.8.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"23/25/22ad9925778f24116cb3de49df815745c2fe7c4287b7261c1e5d854f4067/tilecloud-chain-0.8.0.tar.gz\", \n                \"size\": 138524\n            }\n        ], \n        \"0.8.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2014-07-03T08:34:21\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/40/c1/e8eaec904b69f2f779b138528802f48ad5d98e437fe25a0e2f79edc0e2c7/tilecloud-chain-0.8.2.tar.gz\", \n                \"md5_digest\": \"90b2453d0bfb7b8c331f53920493e1de\", \n                \"downloads\": 1443, \n                \"filename\": \"tilecloud-chain-0.8.2.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"40/c1/e8eaec904b69f2f779b138528802f48ad5d98e437fe25a0e2f79edc0e2c7/tilecloud-chain-0.8.2.tar.gz\", \n                \"size\": 138555\n            }\n        ], \n        \"1.3.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-03-07T17:00:18\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e9/6b/fe9dda1726c5ecc8ebab21e63188358ffb0d30032c0f25a4bb809b65b6c8/tilecloud-chain-1.3.0.tar.gz\", \n                \"md5_digest\": \"e2e4287f8bbe11d7e09eb7d8db715107\", \n                \"downloads\": 16, \n                \"filename\": \"tilecloud-chain-1.3.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e9/6b/fe9dda1726c5ecc8ebab21e63188358ffb0d30032c0f25a4bb809b65b6c8/tilecloud-chain-1.3.0.tar.gz\", \n                \"size\": 65951\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-03-07T17:00:16\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2\", \n                \"url\": \"https://pypi.python.org/packages/8e/2d/0ddf26a215aa2eaa189a9ff2195c11a45c3da14d9a031dc4187d1e4f83ad/tilecloud_chain-1.3.0-py2-none-any.whl\", \n                \"md5_digest\": \"e8601ac5a8a12eda246308cdbdba303f\", \n                \"downloads\": 84, \n                \"filename\": \"tilecloud_chain-1.3.0-py2-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"8e/2d/0ddf26a215aa2eaa189a9ff2195c11a45c3da14d9a031dc4187d1e4f83ad/tilecloud_chain-1.3.0-py2-none-any.whl\", \n                \"size\": 64610\n            }\n        ], \n        \"1.2.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-07-29T12:36:58\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/b2/38/1508097807522c1cecfb56dcac51f2abe3928b3c7ccfb22c15b49676a0af/tilecloud-chain-1.2.0.tar.gz\", \n                \"md5_digest\": \"ea26b23d642507ca439574a3c828ce0a\", \n                \"downloads\": 114, \n                \"filename\": \"tilecloud-chain-1.2.0.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"b2/38/1508097807522c1cecfb56dcac51f2abe3928b3c7ccfb22c15b49676a0af/tilecloud-chain-1.2.0.tar.gz\", \n                \"size\": 67436\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-07-29T12:36:55\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2\", \n                \"url\": \"https://pypi.python.org/packages/6c/37/bc6bf2f2133a1b9fbb71b5fb0b131538738d1a0cc251c26bc18a72c1a4a0/tilecloud_chain-1.2.0-py2-none-any.whl\", \n                \"md5_digest\": \"3816beeb8efd4bcc83e1e0342e404c1c\", \n                \"downloads\": 157, \n                \"filename\": \"tilecloud_chain-1.2.0-py2-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6c/37/bc6bf2f2133a1b9fbb71b5fb0b131538738d1a0cc251c26bc18a72c1a4a0/tilecloud_chain-1.2.0-py2-none-any.whl\", \n                \"size\": 69232\n            }\n        ], \n        \"1.2.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-28T13:28:08\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/02/a9/751e647f52304728ee558e61739318912038334d9b90d9ba310872f86f62/tilecloud-chain-1.2.1.tar.gz\", \n                \"md5_digest\": \"93ee18f82b6349d8c432ac685ff4feb5\", \n                \"downloads\": 80, \n                \"filename\": \"tilecloud-chain-1.2.1.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"02/a9/751e647f52304728ee558e61739318912038334d9b90d9ba310872f86f62/tilecloud-chain-1.2.1.tar.gz\", \n                \"size\": 67896\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-28T13:28:05\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2\", \n                \"url\": \"https://pypi.python.org/packages/05/33/db00645a6438ad7fd93291a0813baaf32729d571c1c8a3f98ae45b8cfc2c/tilecloud_chain-1.2.1-py2-none-any.whl\", \n                \"md5_digest\": \"17cc9c32a2fcf524897af09e5d111463\", \n                \"downloads\": 496, \n                \"filename\": \"tilecloud_chain-1.2.1-py2-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"05/33/db00645a6438ad7fd93291a0813baaf32729d571c1c8a3f98ae45b8cfc2c/tilecloud_chain-1.2.1-py2-none-any.whl\", \n                \"size\": 69227\n            }\n        ], \n        \"0.9.0dev-20141105\": [], \n        \"1.1.0.dev20160323\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-03-23T16:04:23\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a2/63/24e91f71d9301098ba8e92d776e4591f82c5c508061193107f9314bc32ca/tilecloud-chain-1.1.0.dev20160323.tar.gz\", \n                \"md5_digest\": \"18987dbba2a8e4114019df6d582bfe92\", \n                \"downloads\": 108, \n                \"filename\": \"tilecloud-chain-1.1.0.dev20160323.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a2/63/24e91f71d9301098ba8e92d776e4591f82c5c508061193107f9314bc32ca/tilecloud-chain-1.1.0.dev20160323.tar.gz\", \n                \"size\": 119800\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2017-03-07T17:00:18\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/e9/6b/fe9dda1726c5ecc8ebab21e63188358ffb0d30032c0f25a4bb809b65b6c8/tilecloud-chain-1.3.0.tar.gz\", \n            \"md5_digest\": \"e2e4287f8bbe11d7e09eb7d8db715107\", \n            \"downloads\": 16, \n            \"filename\": \"tilecloud-chain-1.3.0.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"e9/6b/fe9dda1726c5ecc8ebab21e63188358ffb0d30032c0f25a4bb809b65b6c8/tilecloud-chain-1.3.0.tar.gz\", \n            \"size\": 65951\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2017-03-07T17:00:16\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2\", \n            \"url\": \"https://pypi.python.org/packages/8e/2d/0ddf26a215aa2eaa189a9ff2195c11a45c3da14d9a031dc4187d1e4f83ad/tilecloud_chain-1.3.0-py2-none-any.whl\", \n            \"md5_digest\": \"e8601ac5a8a12eda246308cdbdba303f\", \n            \"downloads\": 84, \n            \"filename\": \"tilecloud_chain-1.3.0-py2-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"8e/2d/0ddf26a215aa2eaa189a9ff2195c11a45c3da14d9a031dc4187d1e4f83ad/tilecloud_chain-1.3.0-py2-none-any.whl\", \n            \"size\": 64610\n        }\n    ]\n}"}, "headers": {"Server": ["nginx/1.10.3"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Disposition": ["inline"], "X-PYPI-LAST-SERIAL": ["2860565"], "Cache-Control": ["max-age=600, public"], "Access-Control-Allow-Origin": ["*"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["41b12810dc50b2e47754216eb71fbb8d256e78af7e2aa16904db3e4bc79842e3"], "Content-Length": ["53569"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:53:54 GMT"], "Age": ["48156"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2127-IAD, cache-hhn1536-HHN"], "X-Cache": ["HIT, MISS"], "X-Cache-Hits": ["1, 0"], "X-Timer": ["S1494345234.394028,VS0,VE168"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/tilecloud-chain/json"}, "recorded_at": "2017-05-09T15:53:54"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://github.com/mapnik/mapnik"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:53:55 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Sat, 09 May 2037 15:53:55 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiYTc5ZmY2NzYxMmY0MTg4MTc0MTg3MGY0MmJhOTUxMzIiLCJzcHlfcmVwbyI6Im1hcG5pay9tYXBuaWsiLCJzcHlfcmVwb19hdCI6MTQ5NDM0NTIzNSwiX2NzcmZfdG9rZW4iOiJqMFh1b3U1RFpNSHJ5K1NVa2FYN3FxcWlVQXBkZkhSVUkzUHFKUUhSbGx3PSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--f6f3625ff5067ff18c460bebd862a25f14f929a6; path=/; secure; HttpOnly"], "X-Request-Id": ["1de87b0d1cb657f6691826c2796ed463"], "X-Runtime": ["0.236811"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["2c9958536becb3f8ee288100a6a9b3ee"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["DDE7:35A7:6B5A5FD:9F605E5:5911E612"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/mapnik/mapnik"}, "recorded_at": "2017-05-09T15:53:55"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiYTc5ZmY2NzYxMmY0MTg4MTc0MTg3MGY0MmJhOTUxMzIiLCJzcHlfcmVwbyI6Im1hcG5pay9tYXBuaWsiLCJzcHlfcmVwb19hdCI6MTQ5NDM0NTIzNSwiX2NzcmZfdG9rZW4iOiJqMFh1b3U1RFpNSHJ5K1NVa2FYN3FxcWlVQXBkZkhSVUkzUHFKUUhSbGx3PSIsImZsYXNoIjp7ImRpc2NhcmQiOlsiYW5hbHl0aWNzX2xvY2F0aW9uIl0sImZsYXNoZXMiOnsiYW5hbHl0aWNzX2xvY2F0aW9uIjoiLzx1c2VyLW5hbWU%2BLzxyZXBvLW5hbWU%2BIn19fQ%3D%3D--f6f3625ff5067ff18c460bebd862a25f14f929a6"]}, "method": "GET", "uri": "https://github.com/camptocamp/tilecloud-chain"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:53:55 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiYTc5ZmY2NzYxMmY0MTg4MTc0MTg3MGY0MmJhOTUxMzIiLCJzcHlfcmVwbyI6ImNhbXB0b2NhbXAvdGlsZWNsb3VkLWNoYWluIiwic3B5X3JlcG9fYXQiOjE0OTQzNDUyMzUsIl9jc3JmX3Rva2VuIjoiajBYdW91NURaTUhyeStTVWthWDdxcXFpVUFwZGZIUlVJM1BxSlFIUmxsdz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--8d44d56d699820b8774deb816d5a55ddb3d2293a; path=/; secure; HttpOnly"], "X-Request-Id": ["5630a95fa0bb5a114897cf9051e5ef0e"], "X-Runtime": ["0.229810"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["53e13e5d66f560f3e2b04e74a099de0d"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["DDE7:35A7:6B5A692:9F6068A:5911E613"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/camptocamp/tilecloud-chain"}, "recorded_at": "2017-05-09T15:53:55"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "http://github.com/camptocamp/tilecloud-chain"}, "response": {"body": {"encoding": null, "string": ""}, "headers": {"Content-length": ["0"], "Location": ["https://github.com/camptocamp/tilecloud-chain"], "Connection": ["close"]}, "status": {"code": 301, "message": "Moved Permanently"}, "url": "http://github.com/camptocamp/tilecloud-chain"}, "recorded_at": "2017-05-09T15:53:56"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiYTc5ZmY2NzYxMmY0MTg4MTc0MTg3MGY0MmJhOTUxMzIiLCJzcHlfcmVwbyI6ImNhbXB0b2NhbXAvdGlsZWNsb3VkLWNoYWluIiwic3B5X3JlcG9fYXQiOjE0OTQzNDUyMzUsIl9jc3JmX3Rva2VuIjoiajBYdW91NURaTUhyeStTVWthWDdxcXFpVUFwZGZIUlVJM1BxSlFIUmxsdz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--8d44d56d699820b8774deb816d5a55ddb3d2293a"]}, "method": "GET", "uri": "https://github.com/camptocamp/tilecloud-chain"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:53:56 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiYTc5ZmY2NzYxMmY0MTg4MTc0MTg3MGY0MmJhOTUxMzIiLCJzcHlfcmVwbyI6ImNhbXB0b2NhbXAvdGlsZWNsb3VkLWNoYWluIiwic3B5X3JlcG9fYXQiOjE0OTQzNDUyMzYsIl9jc3JmX3Rva2VuIjoiajBYdW91NURaTUhyeStTVWthWDdxcXFpVUFwZGZIUlVJM1BxSlFIUmxsdz0iLCJmbGFzaCI6eyJkaXNjYXJkIjpbImFuYWx5dGljc19sb2NhdGlvbiJdLCJmbGFzaGVzIjp7ImFuYWx5dGljc19sb2NhdGlvbiI6Ii88dXNlci1uYW1lPi88cmVwby1uYW1lPiJ9fX0%3D--9f892f24a0daa01661582379e0b77d5c3c53501c; path=/; secure; HttpOnly"], "X-Request-Id": ["defc5e9f09e558cc9f924ea61b6237d3"], "X-Runtime": ["0.185525"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["50b06cef3698e972f044d7dc2cb41530"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["DDE7:35A7:6B5A750:9F60755:5911E613"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/camptocamp/tilecloud-chain"}, "recorded_at": "2017-05-09T15:53:56"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://raw.githubusercontent.com/camptocamp/tilecloud-chain/master/CHANGES.rst"}, "response": {"body": {"encoding": "utf-8", "base64_string": "H4sIAAAAAAAAA8VW23LbNhB911dgpg+1PaKUpM1NE3vGcZzLNE5TK2leOiOAxErChCQYALSsfn3PAiJp2XU67Uv1YEvAYrGXcw72bK3qFZV2NTruPqNRNnxGl1SS8iQeTJ7vrY8eTsSZdY6KILytSJBz1omNCWvhS+XXk9Ho0US8pBDI7TZxly5NvcLWT7wlVF6SCBYbVyRs3TlZGiw3OFaqLbnJfQE9+y8BnWotpGwcLdZYWzTWh0XjbEHeSykQIO/uLaZo+Vxhmy3+VBXM7o3q6Z2o5m3TWBeEXQpNS3JUB7EiW/khRz8Wjr61xpHHBfXSrFqngrG1KGKDsG9LLa5gicXZaCTwmUxgq2k2E1tVlWmNP3BQowpsKFpP7niz2WRaBSUa5f3GOj2s6LxWFR2/0PmJWCPt49IWquRvvTv/rZyJF4Ut26o+EafzGLt4ffnrhXgRuIMn6Wr0sabN/xNjLOes/5n9i7AvrCNh6qV1Vay4xw8R1iSOjs52naB4dgqPR0fckCZEVAJNnxtESGLp4FpK24RGOU8AEoohpXKr3e9xRFaEJRbbiiHgaKmKYB0IMeYa4ECWrals0nFPFMO4UdMBiX6A1MtSFV9zclvx6qU4kDL3WudSHsL454n4BA+B6SQlqgw/cG4YY1VTUqByizA2zgQai9puhAm9a1WWolDFmsZcJikvz+efeob88vtHdlSjEEgCh6V8Q+E1qYBqvUMxscuAJh/icT4F34WqRU6crBbKCzR761RlAGyDLMHWuCjll/mbd/CQIp6Mvt8l44MzeRtSuThZv9emx6lkYe1QUdiiYastVzjfMtbiKZD9ejuN6c7EZ59crUlpFD6lf8Z7GRARnAWwapul4vA3jy7GJkv50alVpYZ9ZHEA0qu2DIcxEXbe47dL4vPl+1ii4Va4egsDIJjtFkyAE/YFeYP+UK1JJ3+cGpdsfvqe2+PgBljsQXZgltGryi0kVtv6xyDArq+H/1TVj0NFABjf0l5Nn0zEuwpFu0qV0gaX+eig9WpFKK1QWgPZ3PVgotGXi3mHCR9BcYqM1S78LBt8MMq6+AFwKVdUE7dtEZub6JF08fbtV6qEfwT4dCLOr9HrgqV2d7rginOZ+xVVqT+hsZG+N8xij2OezybiA2ixoQjdwgHgUOiSYKyhyR1Hj47ep6W9Ij1Ph3tUdlewrGvjGyj/zSUf8N8HU4ADIZ5ij/Dz8EHi8fnZo1uPA5hcoQea26YQDdSG5QggbwtmYorw8vz01cW5QJdhfavhcH/PO/bkzjvWJaOaiIpb71SidldFnR5evJ55a0o9vaL6apqbenq7zKizyLJuNUu+s+QblGKc3BAlKXk28FsfqAIOpOxIlmTpQjVnaSHJ8xcDNmw8BorriAqoJ/MP3j0a3EmfOPjDHTKmMAbdSCD1rLB4i0zNfU+KylUAqWq7e7m5Cb6hwixNakSPV37cdtxfJFsEuhlqFCV25wSE2ZkmxeJb8txeR53CA1NaFXwi3gdIJRNmRSFjEzjFw8M9gC0WY4/iWZBHxTQSIdIIA0XFvb4v6cE6hMbPptN+a2Ls1IH6VRMs/52yi6K0rc4AblMfJmJE5al3MOhC2Es+TmAL7tiuQ6qbngbzLNuRepRGiKil0dhRX6joqGvJ/ZB9fHf0+m3eBZgEA2PJ340kqQvDABF/R9Ud1tIs5PcX+PNDZCfC5Yw2awx4sQV8N9SuZf28cyZZzwS12QaCmD28x+vghIMZRy6sbYtZUJVQI70VdA3RuHtBPDTjQGIa/eyrKW/7bh1E4eUVDAxj0aRC8izCsm0RZYRI1P9En04DME58K4dHPtLfETQnCVEUbh6aCG8z+aRPaRaLifi4yUHj4Y4O/bYO6rqTdSVKEwIomiOQ4xNc991JDuj5Cw6xu4/JDAAA"}, "headers": {"Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Strict-Transport-Security": ["max-age=31536000"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "ETag": ["\"e38af0891c0a89aa0ef2697fe27ee693b12407c9\""], "Content-Type": ["text/plain; charset=utf-8"], "Cache-Control": ["max-age=300"], "X-Geo-Block-List": [""], "X-GitHub-Request-Id": ["D1AC:2622:2852CC6:29F3DBE:5911E614"], "Content-Encoding": ["gzip"], "Content-Length": ["1437"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:53:56 GMT"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-Served-By": ["cache-hhn1523-HHN"], "X-Cache": ["MISS"], "X-Cache-Hits": ["0"], "X-Timer": ["S1494345237.646678,VS0,VE251"], "Vary": ["Authorization,Accept-Encoding"], "Access-Control-Allow-Origin": ["*"], "X-Fastly-Request-ID": ["9e75e5238e4023e3ef912706df057233373b2238"], "Expires": ["Tue, 09 May 2017 15:58:56 GMT"], "Source-Age": ["0"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/camptocamp/tilecloud-chain/master/CHANGES.rst"}, "recorded_at": "2017-05-09T15:53:56"}], "recorded_with": "betamax/0.8.0"}