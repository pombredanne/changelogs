{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://pypi.python.org/pypi/xmljson/json"}, "response": {"body": {"encoding": "UTF-8", "string": "{\n    \"info\": {\n        \"maintainer\": \"\", \n        \"docs_url\": null, \n        \"requires_python\": \"\", \n        \"maintainer_email\": \"\", \n        \"cheesecake_code_kwalitee_id\": null, \n        \"keywords\": \"xmljson\", \n        \"package_url\": \"http://pypi.python.org/pypi/xmljson\", \n        \"author\": \"S Anand\", \n        \"author_email\": \"root.node@gmail.com\", \n        \"download_url\": \"\", \n        \"platform\": \"\", \n        \"version\": \"0.1.8\", \n        \"cheesecake_documentation_id\": null, \n        \"_pypi_hidden\": false, \n        \"description\": \"===============================\\r\\nxmljson\\r\\n===============================\\r\\n\\r\\n.. image:: https://img.shields.io/travis/sanand0/xmljson.svg\\r\\n        :target: https://travis-ci.org/sanand0/xmljson\\r\\n\\r\\n.. image:: https://img.shields.io/pypi/v/xmljson.svg\\r\\n        :target: https://pypi.python.org/pypi/xmljson\\r\\n\\r\\n\\r\\nxmljson converts XML into Python dictionary structures (trees, like in JSON) and vice-versa.\\r\\n\\r\\nAbout\\r\\n-----\\r\\n\\r\\nXML can be converted to a data structure (such as JSON) and back. For example::\\r\\n\\r\\n    <employees>\\r\\n        <person>\\r\\n            <name value=\\\"Alice\\\"/>\\r\\n        </person>\\r\\n        <person>\\r\\n            <name value=\\\"Bob\\\"/>\\r\\n        </person>\\r\\n    </employees>\\r\\n\\r\\ncan be converted into this data structure (which also a valid JSON object)::\\r\\n\\r\\n    { \\\"employees\\\": [\\r\\n        { \\\"person\\\": {\\r\\n            \\\"name\\\": {\\\"@value\\\": \\\"Alice\\\"}\\r\\n        } },\\r\\n        { \\\"person\\\": {\\r\\n            \\\"name\\\": {\\\"@value\\\": \\\"Alice\\\"}\\r\\n        } }\\r\\n    ] }\\r\\n\\r\\nThis uses the `BadgerFish`_ convention that prefixes attributes with ``@``.\\r\\nThe conventions supported by this library are:\\r\\n\\r\\n* `Abdera`_: Use ``\\\"attributes\\\"`` for attributes, ``\\\"children\\\"`` for nodes\\r\\n* `BadgerFish`_: Use ``\\\"$\\\"`` for text content, ``@`` to prefix attributes\\r\\n* `Cobra`_: Use ``\\\"attributes\\\"`` for attributes (even when empty), ``\\\"children\\\"`` for nodes, values are strings\\r\\n* `GData`_: Use ``\\\"$t\\\"`` for text content, attributes added as-is\\r\\n* `Yahoo`_ Use ``\\\"content\\\"`` for text content, attributes added as-is\\r\\n* `Parker`_: Use tail nodes for text content, ignore attributes\\r\\n\\r\\n.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\\r\\n.. _BadgerFish: http://www.sklar.com/badgerfish/\\r\\n.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\\r\\n.. _GData: http://wiki.open311.org/JSON_and_XML_Conversion/#the-gdata-convention\\r\\n.. _Parker: https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention\\r\\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\\r\\n.. _xmlconv: https://github.com/chbrown/xmlconv/tree/master/lib\\r\\n\\r\\n\\r\\nConvert data to XML\\r\\n-------------------\\r\\n\\r\\nTo convert from a data structure to XML using the BadgerFish convention::\\r\\n\\r\\n    >>> from xmljson import badgerfish as bf\\r\\n    >>> bf.etree({'p': {'@id': 'main', '$': 'Hello', 'b': 'bold'}})\\r\\n\\r\\nThis returns an **array** of `etree.Element`_ structures. In this case, the\\r\\nresult is identical to::\\r\\n\\r\\n    >>> from xml.etree.ElementTree import fromstring\\r\\n    >>> [fromstring('<p id=\\\"main\\\">Hello<b>bold</b></p>')]\\r\\n\\r\\n.. _etree.Element: http://effbot.org/zone/element-index.htm\\r\\n\\r\\nThe result can be inserted into any existing root `etree.Element`_::\\r\\n\\r\\n    >>> from xml.etree.ElementTree import Element, tostring\\r\\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('root'))\\r\\n    >>> tostring(result)\\r\\n    '<root><p id=\\\"main\\\"/></root>'\\r\\n\\r\\nThis includes `lxml.html <http://lxml.de/lxmlhtml.html>`_ as well::\\r\\n\\r\\n    >>> from lxml.html import Element, tostring\\r\\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('html'))\\r\\n    >>> tostring(result, doctype='<!DOCTYPE html>')\\r\\n    '<!DOCTYPE html>\\\\n<html><p id=\\\"main\\\"></p></html>'\\r\\n\\r\\nFor ease of use, strings are treated as node text. For example, both the\\r\\nfollowing are the same::\\r\\n\\r\\n    >>> bf.etree({'p': {'$': 'paragraph text'}})\\r\\n    >>> bf.etree({'p': 'paragraph text'})\\r\\n\\r\\nBy default, non-string values are converted to strings using Python's ``str``,\\r\\nexcept for booleans -- which are converted into ``true`` and ``false`` (lower\\r\\ncase). Override this behaviour using ``xml_fromstring``::\\r\\n\\r\\n    >>> tostring(bf.etree({'x': 1.23, 'y': True}, root=Element('root')))\\r\\n    '<root><y>true</y><x>1.23</x></root>'\\r\\n    >>> from xmljson import BadgerFish              # import the class\\r\\n    >>> bf_str = BadgerFish(xml_tostring=str)       # convert using str()\\r\\n    >>> tostring(bf_str.etree({'x': 1.23, 'y': True}, root=Element('root')))\\r\\n    '<root><y>True</y><x>1.23</x></root>'\\r\\n\\r\\n\\r\\nConvert XML to data\\r\\n-------------------\\r\\n\\r\\nTo convert from XML to a data structure using the BadgerFish convention::\\r\\n\\r\\n    >>> bf.data(fromstring('<p id=\\\"main\\\">Hello<b>bold</b></p>'))\\r\\n    {\\\"p\\\": {\\\"$\\\": \\\"Hello\\\", \\\"@id\\\": \\\"main\\\", \\\"b\\\": {\\\"$\\\": \\\"bold\\\"}}}\\r\\n\\r\\nTo convert this to JSON, use::\\r\\n\\r\\n    >>> from json import dumps\\r\\n    >>> dumps(bf.data(fromstring('<p id=\\\"main\\\">Hello<b>bold</b></p>')))\\r\\n    '{\\\"p\\\": {\\\"b\\\": {\\\"$\\\": \\\"bold\\\"}, \\\"@id\\\": \\\"main\\\", \\\"$\\\": \\\"Hello\\\"}}'\\r\\n\\r\\nTo preserve the order of attributes and children, specify the ``dict_type`` as\\r\\n``OrderedDict`` (or any other dictionary-like type) in the constructor::\\r\\n\\r\\n    >>> from collections import OrderedDict\\r\\n    >>> from xmljson import BadgerFish              # import the class\\r\\n    >>> bf = BadgerFish(dict_type=OrderedDict)      # pick dict class\\r\\n\\r\\nBy default, values are parsed into boolean, int or float where possible (except\\r\\nin the Yahoo method). Override this behaviour using ``xml_fromstring``::\\r\\n\\r\\n    >>> dumps(bf.data(fromstring('<x>1</x>')))\\r\\n    '{\\\"x\\\": {\\\"$\\\": 1}}'\\r\\n    >>> bf_str = BadgerFish(xml_fromstring=False)   # Keep XML values as strings\\r\\n    >>> dumps(bf_str.data(fromstring('<x>1</x>')))\\r\\n    '{\\\"x\\\": {\\\"$\\\": \\\"1\\\"}}'\\r\\n    >>> bf_str = BadgerFish(xml_fromstring=repr)    # Custom string parser\\r\\n    '{\\\"x\\\": {\\\"$\\\": \\\"\\\\'1\\\\'\\\"}}'\\r\\n\\r\\n``xml_fromstring`` can be any custom function that takes a string and returns a\\r\\nvalue. In the example below, only the integer ``1`` is converted to an integer.\\r\\nEverything else is retained as a float::\\r\\n\\r\\n    >>> def convert_only_int(val):\\r\\n    ...     return int(val) if val.isdigit() else val\\r\\n    >>> bf_int = BadgerFish(xml_fromstring=convert_only_int)\\r\\n    >>> dumps(bf_int.data(fromstring('<p><x>1</x><y>2.5</y><z>NaN</z></p>')))\\r\\n    '{\\\"p\\\": {\\\"x\\\": {\\\"$\\\": 1}, \\\"y\\\": {\\\"$\\\": \\\"2.5\\\"}, \\\"z\\\": {\\\"$\\\": \\\"NaN\\\"}}}'\\r\\n\\r\\n\\r\\nConventions\\r\\n-----------\\r\\n\\r\\nTo use a different conversion method, replace ``BadgerFish`` with one of the\\r\\nother classes. Currently, these are supported::\\r\\n\\r\\n    >>> from xmljson import abdera          # == xmljson.Abdera()\\r\\n    >>> from xmljson import badgerfish      # == xmljson.BadgerFish()\\r\\n    >>> from xmljson import cobra           # == xmljson.Cobra()\\r\\n    >>> from xmljson import gdata           # == xmljson.GData()\\r\\n    >>> from xmljson import parker          # == xmljson.Parker()\\r\\n    >>> from xmljson import yahoo           # == xmljson.Yahoo()\\r\\n\\r\\n\\r\\nOptions\\r\\n-------\\r\\n\\r\\nConventions may support additional options.\\r\\n\\r\\nThe `Parker`_ convention absorbs the root element by default.\\r\\n``parker.data(preserve_root=True)`` preserves the root instance::\\r\\n\\r\\n    >>> from xmljson import parker, Parker\\r\\n    >>> from xml.etree.ElementTree import fromstring\\r\\n    >>> from json import dumps\\r\\n    >>> dumps(parker.data(fromstring('<x><a>1</a><b>2</b></x>')))\\r\\n    '{\\\"a\\\": 1, \\\"b\\\": 2}'\\r\\n    >>> dumps(parker.data(fromstring('<x><a>1</a><b>2</b></x>'), preserve_root=True))\\r\\n    '{\\\"x\\\": {\\\"a\\\": 1, \\\"b\\\": 2}}'\\r\\n\\r\\n\\r\\nInstallation\\r\\n------------\\r\\n\\r\\nThis is a pure-Python package built for Python 2.6+ and Python 3.0+. To set up::\\r\\n\\r\\n    pip install xmljson\\r\\n\\r\\nRoadmap\\r\\n-------\\r\\n\\r\\n* Test cases for Unicode\\r\\n* Support for namespaces and namespace prefixes\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nHistory\\r\\n-------\\r\\n\\r\\n0.1.8 (9 May 2017)\\r\\n~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Add Abdera_ and Cobra_ conventions\\r\\n- Add ``Parker.data(preserve_root=True)`` option to preserve root element in\\r\\n  Parker convention.\\r\\n\\r\\nThanks to @dagwieers\\r\\n\\r\\n.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\\r\\n.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\\r\\n\\r\\n0.1.6 (18 Feb 2016)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Add ``xml_fromstring=`` and ``xml_tostring=`` parameters to constructor to\\r\\n  customise string conversion from and to XML.\\r\\n\\r\\n\\r\\n0.1.5 (23 Sep 2015)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Add the Yahoo_ XML to JSON conversion method.\\r\\n\\r\\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\\r\\n\\r\\n0.1.4 (20 Sep 2015)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Fix ``GData.etree()`` conversion of attributes. (They were ignored. They\\r\\n  should be added as-is.)\\r\\n\\r\\n0.1.3 (20 Sep 2015)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Simplify ``{'p': {'$': 'text'}}`` to ``{'p': 'text'}`` in BadgerFish and GData\\r\\n  conventions.\\r\\n- Add test cases for ``.etree()`` -- mainly from the `MDN JXON article`_.\\r\\n- ``dict_type``/``list_type`` do not need to inherit from ``dict``/``list``\\r\\n\\r\\n.. _MDN JXON article: https://developer.mozilla.org/en-US/docs/JXON#In_summary\\r\\n\\r\\n0.1.2 (18 Sep 2015)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Always use the ``dict_type`` class to create dictionaries (which defaults to\\r\\n  ``OrderedDict`` to preserve order of keys)\\r\\n- Update documentation, test cases\\r\\n- Remove support for Python 2.6 (since we need ``collections.Counter``)\\r\\n- Make the `Travis CI build`_ pass\\r\\n\\r\\n.. _Travis CI build: https://travis-ci.org/sanand0/xmljson\\r\\n\\r\\n0.1.1 (18 Sep 2015)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Convert ``true``, ``false`` and numeric values from strings to Python types\\r\\n- ``xmljson.parker.data()`` is compliant with Parker convention (bugs resolved)\\r\\n\\r\\n0.1.0 (15 Sep 2015)\\r\\n~~~~~~~~~~~~~~~~~~~\\r\\n\\r\\n- Two-way conversions via BadgerFish, GData and Parker conventions.\\r\\n- First release on PyPI.\\r\\n\\r\\n\\r\\n\", \n        \"release_url\": \"http://pypi.python.org/pypi/xmljson/0.1.8\", \n        \"downloads\": {\n            \"last_month\": 0, \n            \"last_week\": 0, \n            \"last_day\": 0\n        }, \n        \"_pypi_ordering\": 8, \n        \"classifiers\": [\n            \"Development Status :: 3 - Alpha\", \n            \"Intended Audience :: Developers\", \n            \"License :: OSI Approved :: MIT License\", \n            \"Operating System :: OS Independent\", \n            \"Programming Language :: Python :: 2\", \n            \"Programming Language :: Python :: 2.7\", \n            \"Programming Language :: Python :: 3\", \n            \"Programming Language :: Python :: 3.3\", \n            \"Programming Language :: Python :: 3.4\", \n            \"Topic :: Software Development\", \n            \"Topic :: Software Development :: Libraries :: Python Modules\"\n        ], \n        \"bugtrack_url\": null, \n        \"name\": \"xmljson\", \n        \"license\": \"MIT\", \n        \"summary\": \"Converts XML into JSON/Python dicts/arrays and vice-versa.\", \n        \"home_page\": \"https://github.com/sanand0/xmljson\", \n        \"cheesecake_installability_id\": null\n    }, \n    \"releases\": {\n        \"0.1.8\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-05-09T13:34:23\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/a4/a7/9b7fbd164376e4d4224b1b75fea7e82e8d154af183f15ab753018fc936e3/xmljson-0.1.8-py2.py3-none-any.whl\", \n                \"md5_digest\": \"bd77916e09f76532e635a29abc7f265d\", \n                \"downloads\": 0, \n                \"filename\": \"xmljson-0.1.8-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"a4/a7/9b7fbd164376e4d4224b1b75fea7e82e8d154af183f15ab753018fc936e3/xmljson-0.1.8-py2.py3-none-any.whl\", \n                \"size\": 11584\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2017-05-09T13:34:25\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/36/92/2aacaf270b2c52a235403bd30f2f3649ffee0ec13a1bab657154839c8ac9/xmljson-0.1.8.tar.gz\", \n                \"md5_digest\": \"fa95866c055ac77add5903e8f8f82edf\", \n                \"downloads\": 0, \n                \"filename\": \"xmljson-0.1.8.tar.gz\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"36/92/2aacaf270b2c52a235403bd30f2f3649ffee0ec13a1bab657154839c8ac9/xmljson-0.1.8.tar.gz\", \n                \"size\": 23519\n            }\n        ], \n        \"0.1.0\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-15T19:08:40\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/2b/52/8c71fc22b4586613c8831ad079802ad731c86627cd374010f2f9c1e795d3/xmljson-0.1.0-py2.py3-none-any.whl\", \n                \"md5_digest\": \"9b60ec811f988217ca92e5b2eaf4fdae\", \n                \"downloads\": 1003, \n                \"filename\": \"xmljson-0.1.0-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"2b/52/8c71fc22b4586613c8831ad079802ad731c86627cd374010f2f9c1e795d3/xmljson-0.1.0-py2.py3-none-any.whl\", \n                \"size\": 6473\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-15T19:08:45\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/d8/1b/53ae61f550102900ced1e27d0f7a91de6626a305efbd5b7fe79a3fb2b0af/xmljson-0.1.0.zip\", \n                \"md5_digest\": \"ab16b65e01ef0c83072f1b252e688a52\", \n                \"downloads\": 572, \n                \"filename\": \"xmljson-0.1.0.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"d8/1b/53ae61f550102900ced1e27d0f7a91de6626a305efbd5b7fe79a3fb2b0af/xmljson-0.1.0.zip\", \n                \"size\": 22374\n            }\n        ], \n        \"0.1.1\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T02:31:31\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/0e/fd/33acdd3a88b7803a954a43260b682f75c979b5122f885483d9553105d821/xmljson-0.1.1-py2.py3-none-any.whl\", \n                \"md5_digest\": \"5734e7bfa9489daaa9cf9bd75aedac83\", \n                \"downloads\": 566, \n                \"filename\": \"xmljson-0.1.1-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"0e/fd/33acdd3a88b7803a954a43260b682f75c979b5122f885483d9553105d821/xmljson-0.1.1-py2.py3-none-any.whl\", \n                \"size\": 6772\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T02:31:37\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/e1/49/2e24539c12712d5a26b68e37530d1cde35e5bd4052d3d1507dcc8660471d/xmljson-0.1.1.zip\", \n                \"md5_digest\": \"7c5a87b778446dfd8d2a24d06138b2b5\", \n                \"downloads\": 577, \n                \"filename\": \"xmljson-0.1.1.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"e1/49/2e24539c12712d5a26b68e37530d1cde35e5bd4052d3d1507dcc8660471d/xmljson-0.1.1.zip\", \n                \"size\": 23183\n            }\n        ], \n        \"0.1.2\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T07:41:09\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/b8/bc/ec01549982c3011778822863cfec1eb098d5ecf9c5eaebb1ff5e9c3245cf/xmljson-0.1.2-py2.py3-none-any.whl\", \n                \"md5_digest\": \"101f3fc5d834f328fb83362478a3f4b9\", \n                \"downloads\": 546, \n                \"filename\": \"xmljson-0.1.2-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"b8/bc/ec01549982c3011778822863cfec1eb098d5ecf9c5eaebb1ff5e9c3245cf/xmljson-0.1.2-py2.py3-none-any.whl\", \n                \"size\": 7372\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-18T07:41:15\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/b3/29/eecebc07d89acb8f1606e3d85f65e57094ac9e02a60d321b7348d8a1d1b0/xmljson-0.1.2.zip\", \n                \"md5_digest\": \"0d5ee41934d11db27b4117baaa8de374\", \n                \"downloads\": 565, \n                \"filename\": \"xmljson-0.1.2.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"b3/29/eecebc07d89acb8f1606e3d85f65e57094ac9e02a60d321b7348d8a1d1b0/xmljson-0.1.2.zip\", \n                \"size\": 24739\n            }\n        ], \n        \"0.1.3\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T05:56:28\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/6c/36/10e98c8c634f54515db9daa9f403652c2c0237873a885e84e88964c5b713/xmljson-0.1.3-py2.py3-none-any.whl\", \n                \"md5_digest\": \"85a375b143e494a9201f3d9670ad88ff\", \n                \"downloads\": 543, \n                \"filename\": \"xmljson-0.1.3-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"6c/36/10e98c8c634f54515db9daa9f403652c2c0237873a885e84e88964c5b713/xmljson-0.1.3-py2.py3-none-any.whl\", \n                \"size\": 7779\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T05:56:34\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/07/ce/c60fb529a9d0993170a3cdef14a7572164986fc05efc408434c93e1e2ac0/xmljson-0.1.3.zip\", \n                \"md5_digest\": \"12d1e09ab60e6908c66220c595720007\", \n                \"downloads\": 554, \n                \"filename\": \"xmljson-0.1.3.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"07/ce/c60fb529a9d0993170a3cdef14a7572164986fc05efc408434c93e1e2ac0/xmljson-0.1.3.zip\", \n                \"size\": 25679\n            }\n        ], \n        \"0.1.4\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T08:28:19\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/ab/dd/67769acaee4e0e684d0653f2092a6f9347af1862dd012ceceb3ec161e22c/xmljson-0.1.4-py2.py3-none-any.whl\", \n                \"md5_digest\": \"a417800ff8d4a05cc49e3ae4115821c3\", \n                \"downloads\": 548, \n                \"filename\": \"xmljson-0.1.4-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"ab/dd/67769acaee4e0e684d0653f2092a6f9347af1862dd012ceceb3ec161e22c/xmljson-0.1.4-py2.py3-none-any.whl\", \n                \"size\": 8029\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-20T08:28:26\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/8b/b8/4b0e06814936ea1193bba4f463bac19a8a8ed4b43611d88abe6446171c7d/xmljson-0.1.4.zip\", \n                \"md5_digest\": \"7db9e019d35cf86d4f4c4e635c89c4fc\", \n                \"downloads\": 558, \n                \"filename\": \"xmljson-0.1.4.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"8b/b8/4b0e06814936ea1193bba4f463bac19a8a8ed4b43611d88abe6446171c7d/xmljson-0.1.4.zip\", \n                \"size\": 26037\n            }\n        ], \n        \"0.1.5\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-23T16:56:54\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/96/43/9e26cf91340333247584bcfe0e09fe8127b931689dd5b1abfab285208881/xmljson-0.1.5-py2.py3-none-any.whl\", \n                \"md5_digest\": \"d38f8cd329a8e9d84802ec44285d6211\", \n                \"downloads\": 827, \n                \"filename\": \"xmljson-0.1.5-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"96/43/9e26cf91340333247584bcfe0e09fe8127b931689dd5b1abfab285208881/xmljson-0.1.5-py2.py3-none-any.whl\", \n                \"size\": 8335\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2015-09-23T16:57:02\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/a0/3e/f30366ac243e2536b9436062b9cc85c97488c4676c7fe4842d109bf5de96/xmljson-0.1.5.zip\", \n                \"md5_digest\": \"db3cb1912b62fbe6b15a7a47433af63d\", \n                \"downloads\": 675, \n                \"filename\": \"xmljson-0.1.5.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"a0/3e/f30366ac243e2536b9436062b9cc85c97488c4676c7fe4842d109bf5de96/xmljson-0.1.5.zip\", \n                \"size\": 26856\n            }\n        ], \n        \"0.1.6\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-18T03:11:13\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/f1/1e/d9b16679a7ba257aeb233c7347eb3defd599d8bb708058c4bb44479d6668/xmljson-0.1.6-py2.py3-none-any.whl\", \n                \"md5_digest\": \"4e2a88a1adb44784c18c8ec96d0b339d\", \n                \"downloads\": 1402, \n                \"filename\": \"xmljson-0.1.6-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"f1/1e/d9b16679a7ba257aeb233c7347eb3defd599d8bb708058c4bb44479d6668/xmljson-0.1.6-py2.py3-none-any.whl\", \n                \"size\": 9348\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-02-18T03:11:21\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/aa/76/42497cb185cb2aafe9303e0cb6990ed1c52cc14e71601fccb4f35e2049fd/xmljson-0.1.6.zip\", \n                \"md5_digest\": \"d269cf3ef9f83a54210baf2ee4f5c39f\", \n                \"downloads\": 398, \n                \"filename\": \"xmljson-0.1.6.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"aa/76/42497cb185cb2aafe9303e0cb6990ed1c52cc14e71601fccb4f35e2049fd/xmljson-0.1.6.zip\", \n                \"size\": 28613\n            }\n        ], \n        \"0.1.7\": [\n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-13T03:06:44\", \n                \"comment_text\": \"\", \n                \"python_version\": \"py2.py3\", \n                \"url\": \"https://pypi.python.org/packages/23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl\", \n                \"md5_digest\": \"981b8acb96669924c3d39cbbffb1c745\", \n                \"downloads\": 2039, \n                \"filename\": \"xmljson-0.1.7-py2.py3-none-any.whl\", \n                \"packagetype\": \"bdist_wheel\", \n                \"path\": \"23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl\", \n                \"size\": 9952\n            }, \n            {\n                \"has_sig\": false, \n                \"upload_time\": \"2016-09-13T03:06:48\", \n                \"comment_text\": \"\", \n                \"python_version\": \"source\", \n                \"url\": \"https://pypi.python.org/packages/47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip\", \n                \"md5_digest\": \"94ea9858cc71bcb38053bfceea358d03\", \n                \"downloads\": 318, \n                \"filename\": \"xmljson-0.1.7.zip\", \n                \"packagetype\": \"sdist\", \n                \"path\": \"47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip\", \n                \"size\": 28486\n            }\n        ]\n    }, \n    \"urls\": [\n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2017-05-09T13:34:23\", \n            \"comment_text\": \"\", \n            \"python_version\": \"py2.py3\", \n            \"url\": \"https://pypi.python.org/packages/a4/a7/9b7fbd164376e4d4224b1b75fea7e82e8d154af183f15ab753018fc936e3/xmljson-0.1.8-py2.py3-none-any.whl\", \n            \"md5_digest\": \"bd77916e09f76532e635a29abc7f265d\", \n            \"downloads\": 0, \n            \"filename\": \"xmljson-0.1.8-py2.py3-none-any.whl\", \n            \"packagetype\": \"bdist_wheel\", \n            \"path\": \"a4/a7/9b7fbd164376e4d4224b1b75fea7e82e8d154af183f15ab753018fc936e3/xmljson-0.1.8-py2.py3-none-any.whl\", \n            \"size\": 11584\n        }, \n        {\n            \"has_sig\": false, \n            \"upload_time\": \"2017-05-09T13:34:25\", \n            \"comment_text\": \"\", \n            \"python_version\": \"source\", \n            \"url\": \"https://pypi.python.org/packages/36/92/2aacaf270b2c52a235403bd30f2f3649ffee0ec13a1bab657154839c8ac9/xmljson-0.1.8.tar.gz\", \n            \"md5_digest\": \"fa95866c055ac77add5903e8f8f82edf\", \n            \"downloads\": 0, \n            \"filename\": \"xmljson-0.1.8.tar.gz\", \n            \"packagetype\": \"sdist\", \n            \"path\": \"36/92/2aacaf270b2c52a235403bd30f2f3649ffee0ec13a1bab657154839c8ac9/xmljson-0.1.8.tar.gz\", \n            \"size\": 23519\n        }\n    ]\n}"}, "headers": {"Server": ["nginx/1.10.3"], "Content-Type": ["application/json; charset=\"UTF-8\""], "Content-Disposition": ["inline"], "X-PYPI-LAST-SERIAL": ["2861686"], "Cache-Control": ["max-age=600, public"], "Access-Control-Allow-Origin": ["*"], "X-Clacks-Overhead": ["GNU Terry Pratchett"], "Strict-Transport-Security": ["max-age=31536000; includeSubDomains"], "Via": ["1.1 varnish", "1.1 varnish"], "Fastly-Debug-Digest": ["71dae5204f4f02e7daec968960a250a666dce7abd58f1881c532192aea6c6300"], "Content-Length": ["25868"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:54:37 GMT"], "Age": ["8398"], "Connection": ["keep-alive"], "X-Served-By": ["cache-iad2125-IAD, cache-hhn1527-HHN"], "X-Cache": ["MISS, HIT"], "X-Cache-Hits": ["0, 1"], "X-Timer": ["S1494345278.873723,VS0,VE0"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Content-Type-Options": ["nosniff"], "X-Permitted-Cross-Domain-Policies": ["none"]}, "status": {"code": 200, "message": "OK"}, "url": "https://pypi.python.org/pypi/xmljson/json"}, "recorded_at": "2017-05-09T15:54:37"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://github.com/sanand0/xmljson"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:54:38 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["logged_in=no; domain=.github.com; path=/; expires=Sat, 09 May 2037 15:54:38 -0000; secure; HttpOnly", "_gh_sess=eyJzZXNzaW9uX2lkIjoiZTc0YWI3YmQzOGYxYTBlN2FkYWJkYzBlMmQ1YWFiZDkiLCJzcHlfcmVwbyI6InNhbmFuZDAveG1sanNvbiIsInNweV9yZXBvX2F0IjoxNDk0MzQ1Mjc4LCJfY3NyZl90b2tlbiI6InVRQS8yS056cUpYbExmV2NVeUN1MUlWdmZva3p6S2orMWlyd2hyd0pTUTg9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--bce8fb5699134b5848c93c2c1c527e381a4c74b8; path=/; secure; HttpOnly"], "X-Request-Id": ["6e83ebc8f9d987dccba7ffb218ac953e"], "X-Runtime": ["0.122380"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["b9c2a2d2339d471239b174dbbc6d8be2"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["DED4:35A5:607CD99:8F99283:5911E63E"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/sanand0/xmljson"}, "recorded_at": "2017-05-09T15:54:38"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"], "Cookie": ["logged_in=no; _gh_sess=eyJzZXNzaW9uX2lkIjoiZTc0YWI3YmQzOGYxYTBlN2FkYWJkYzBlMmQ1YWFiZDkiLCJzcHlfcmVwbyI6InNhbmFuZDAveG1sanNvbiIsInNweV9yZXBvX2F0IjoxNDk0MzQ1Mjc4LCJfY3NyZl90b2tlbiI6InVRQS8yS056cUpYbExmV2NVeUN1MUlWdmZva3p6S2orMWlyd2hyd0pTUTg9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--bce8fb5699134b5848c93c2c1c527e381a4c74b8"]}, "method": "GET", "uri": "https://github.com/chbrown/xmlconv"}, "response": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"Server": ["GitHub.com"], "Date": ["Tue, 09 May 2017 15:54:39 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Status": ["200 OK"], "Cache-Control": ["no-cache"], "Vary": ["X-PJAX", "Accept-Encoding"], "X-UA-Compatible": ["IE=Edge,chrome=1"], "Set-Cookie": ["_gh_sess=eyJzZXNzaW9uX2lkIjoiZTc0YWI3YmQzOGYxYTBlN2FkYWJkYzBlMmQ1YWFiZDkiLCJzcHlfcmVwbyI6ImNoYnJvd24veG1sY29udiIsInNweV9yZXBvX2F0IjoxNDk0MzQ1Mjc4LCJfY3NyZl90b2tlbiI6InVRQS8yS056cUpYbExmV2NVeUN1MUlWdmZva3p6S2orMWlyd2hyd0pTUTg9IiwiZmxhc2giOnsiZGlzY2FyZCI6WyJhbmFseXRpY3NfbG9jYXRpb24iXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfbG9jYXRpb24iOiIvPHVzZXItbmFtZT4vPHJlcG8tbmFtZT4ifX19--557252a2c16c3234d45f435557e94e97d46b3a2a; path=/; secure; HttpOnly"], "X-Request-Id": ["4c4c6750c590360e6b41632d1d18d540"], "X-Runtime": ["0.287593"], "Content-Security-Policy": ["default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-ancestors 'none'; img-src 'self' data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; media-src 'none'; script-src assets-cdn.github.com; style-src 'unsafe-inline' assets-cdn.github.com"], "Strict-Transport-Security": ["max-age=31536000; includeSubdomains; preload"], "Public-Key-Pins": ["max-age=5184000; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "X-Served-By": ["a4e356808e4f2436efee25056a73d995"], "Content-Encoding": ["gzip"], "X-GitHub-Request-Id": ["DED4:35A5:607CDFC:8F992E9:5911E63E"]}, "status": {"code": 200, "message": "OK"}, "url": "https://github.com/chbrown/xmlconv"}, "recorded_at": "2017-05-09T15:54:39"}, {"request": {"body": {"encoding": "utf-8", "string": ""}, "headers": {"User-Agent": ["python-requests/2.12.4"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://raw.githubusercontent.com/sanand0/xmljson/master/HISTORY.rst"}, "response": {"body": {"encoding": "utf-8", "base64_string": "H4sIAAAAAAAAA51VUW/bNhB+1684IAPsAJFkJ03XGSiwLkG2FEsbLC7QPYm0eLbYUKRAUna0ov3tPZJOozXFUkwPhsXT3X33fXfHooBF3XC9QWU2iyz7Qzpv7JDl6cmyWTEvXsD0F7jiAxzP5j8fZp8fPVmWwysh4NVKoOUVcC3gzKzC39roLWovjXb7jxi75vYWbSG459POokO7xcoa418ubY+HjIHpggd4A/d2CHZAhS1FA6kzgBRmlKHIsiXVcuuC46+Cb3YS0bosKwqoErYFNN53i7LcyVtZmA71yXxeGLspX9+8fVMR8Or91Z/VWYhpHcUsD3yDOY/O+UOqGDKW+D8j1sF3HDAy/Rym8xdwgatA9fPvUf2Va8buWlWtrWmdt1JvXhJtgfd07s3Dacctb9FT9sALpSRTX5PM9Eo01j1J3kqHkFwSoREqhPAxKjlSFURwhHkK0+MTuMEuwDz9T5hUK/zNG2OqECDECbSMcxC0xogiqRQ/TZQ64lTglhqzo2YZgqGoTVt+4Fvuais7X35wJHrjW3VANSdozwja7GloF/KOmPr9nFqwQG8Rp6HtRqjMGrgnPla9R1fAdNngADu0CHKjjUVRQDgi/lxjeiVghcCFQAHc5dIVhwnOyY/BuZFtp+R6IEwfJ91kAR8nP9HvxOOdn3z6RNCIuHvb/pQOpYbfuNigvZCuiTrFioKoD2NX3CuBzkPNHTpYk/aMjQrPc2i51GpIigfR2NX5G3j9nrTi1staIatCJMaErH3lhw4ZKxlTtDD2byAMaBpSjRgbRuoGrfQpZPL76sJY0vvbJN+TvjX/SKV4nCnU+bubUpjalcHt4FJXrm9bTisr8n0cB+jpzlQ7PjjoqeljreOioFbcpVGxyD1CsBGR3EqibrprZN2AwDXvlXdphBh7a2lBoDiPNf5rb5lgCe10i4M7pNzvOhGjmroPu4yH2EcjdeiTv7A15Or6rjPWR7muB5oSDcdhRTipa6RmTEwzVhulsE5in5le06gzFlJd8dt9gUvLt9LB2SWseqkEq2gruP1m/Mb2IIGPhryWkXrHNXXYrKRRC3OX+J7/GN9p+3nCSquHOD6if2uuHO6XliYqrKxhy1Uf+jN0TNpGUYh98UEfF3twj6HoRjdJ6GMqg1YEjRKnS2InffP4koDpqqeoJI9RWxT7OZ1RHadP17HcmZw6Z7QoHGwlH03hURrBWNWj3HEWL6QlqS1dZaQ2EKDr4fqyyL4AT8AybYoHAAA="}, "headers": {"Content-Security-Policy": ["default-src 'none'; style-src 'unsafe-inline'"], "Strict-Transport-Security": ["max-age=31536000"], "X-Content-Type-Options": ["nosniff"], "X-Frame-Options": ["deny"], "X-XSS-Protection": ["1; mode=block"], "ETag": ["\"2bda7fc45f09653d3de48bf1df44e2e9f0d915ba\""], "Content-Type": ["text/plain; charset=utf-8"], "Cache-Control": ["max-age=300"], "X-Geo-Block-List": [""], "X-GitHub-Request-Id": ["C660:34B4:282E931:29B2670:5911E63E"], "Content-Encoding": ["gzip"], "Content-Length": ["944"], "Accept-Ranges": ["bytes"], "Date": ["Tue, 09 May 2017 15:54:39 GMT"], "Via": ["1.1 varnish"], "Connection": ["keep-alive"], "X-Served-By": ["cache-hhn1545-HHN"], "X-Cache": ["MISS"], "X-Cache-Hits": ["0"], "X-Timer": ["S1494345279.173609,VS0,VE118"], "Vary": ["Authorization,Accept-Encoding"], "Access-Control-Allow-Origin": ["*"], "X-Fastly-Request-ID": ["f442a25bc33a296ae67e95e7480c98092429db8b"], "Expires": ["Tue, 09 May 2017 15:59:39 GMT"], "Source-Age": ["0"]}, "status": {"code": 200, "message": "OK"}, "url": "https://raw.githubusercontent.com/sanand0/xmljson/master/HISTORY.rst"}, "recorded_at": "2017-05-09T15:54:39"}], "recorded_with": "betamax/0.8.0"}